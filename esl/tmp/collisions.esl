export main;

min(x::Int,y::Int)::Int = if x < y then x; else y;
max(x::Int,y::Int)::Int = if x > y then x; else y;

type GUI = Act{ export size::Int; width::Int; height::Int; ballSize::Int; Time(Int); Draw(Int,Int,Int); }

type Ball = Act { export x::Int; y::Int; Time(Int); }

type Simulator = Act { export gui::GUI; balls::[Ball]; SetGUI(GUI); Start; Stop; Time(Int); Close; } 

type Main = Act { Time(Int); }

act ball(id::Int,simulator::Simulator)::Ball {

  export x,y;
  
  x::Int = random(simulator.gui.width);
  y::Int = random(simulator.gui.height);
  dx::Int = random(2) - 1;
  dy::Int = random(2) - 1;
  
  checkDeltas(n::Int)::Void = 
    if (dx = 0) and (dy = 0)
    then { 
      dx := (random(2) - 1)*n;
      dy := (random(2) - 1)*n;
      checkDeltas(n+1);
    } else {}
  
  hitWalls()::Void = {
    if (x + dx + simulator.gui.ballSize) > simulator.gui.width
    then dx := 0 - dx;
    else if (x + dx) < 0
    then dx := 0 - dx;
    else if (y + dy + simulator.gui.ballSize) > simulator.gui.height
    then dy := 0 - dy;
    else if (y + dy) < 0
    then dy := 0 - dy;
    else {}
    {}
  }
    
  overlaps(x1::Int,y1::Int,x2::Int,y2::Int)::Bool = (((x1 > x2) andalso (x1 < (x2 + simulator.gui.ballSize))) andalso ((y1 > y2) andalso (y1 < (y2 + simulator.gui.ballSize)))) orelse
                          (((x2 > x1) andalso (x2 < (x1 + simulator.gui.ballSize))) andalso ((y2 > y1) andalso (y2 < (y1 + simulator.gui.ballSize))));
  
  hitBalls()::Void =
    for b::Ball in simulator.balls do {
      if b <> self
      then {
         if overlaps(b.x,b.y,x,y)
         then {
           dx := 0 - dx;
           dy := 0 - dy;
         } else {}
      } else {}
    }
    
  -> checkDeltas(2);

  Time(n::Int)  -> {
    hitWalls();
    hitBalls();
    x := max(0,min(x + dx,simulator.gui.width));
    y := max(0,min(y + dy,simulator.gui.height));
    simulator.gui <- Draw(id,x,y);
  }
  
}

act simulator::Simulator {

  export gui, balls;

  gui::GUI = null[GUI];
  
  balls::[Ball] = [][Ball];
  
  SetGUI(g::GUI) -> gui := g;
  
  Start -> balls := [ new ball(i,self) | i::Int <- 0 .. (gui.size - 1)];
  
  Stop -> for ball::Ball in balls do kill[Ball](ball);

  Close -> stopAll();
  
  Time(t::Int) -> { }
  
}

act main::Main {

  // Demonstrates how ESL can communicate with Java. The class test.CollisionGUI implements a simple
  // GUI via Java SWT. The Java agents communicate with ESL via messages in the usual way. When the GUI
  // appears, click on Start to run the simulation and then Stop to stop it. You can change the parameters
  // via the text input fields and then re-run the simulation.

  -> new 'esl.CollisionFrame'[GUI](new simulator);
     
  Time(n::Int) -> {}
}











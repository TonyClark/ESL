export main;

data T = A | B(Int) | C(Int,Int);

type Tree = rec T. union{Leaf,Branch(T,T)}
cnstr Leaf = unfold[Tree].Leaf;
cnstr Branch = unfold[Tree].Branch;

type M = Act { export x::Int; Message(Int); Time(Int); }

type Main = Act { Time(Int); }

a::Int = 0;

b::Int = a;

c ::Str = 'plap';

d ::Bool = true;

e :: Int = 100 + b;

f :: Int = if d then a; else b;

g :: (Int,Int)->Int = fun(x::Int,y::Int)::Int x + 1;

h :: Int = g(100,200);

i :: [Str] = ['spam'];

j :: Int = case B(100) { B(100) -> 20; B(x::Int) -> x + 1; }

k :: Int = case Branch(Leaf,Leaf) { Branch(Leaf,Leaf) -> 1; t::Tree -> 0; }

l(t::Tree)::Int = case t { Branch(t1::Tree,t2::Tree) -> (l(t1)) + (l(t2)); Leaf -> 1; }

act m(i::Int)::M {

   export x,b;
   
  x::Int = random(10);
  y::Int = random(20);
  dx::Int = random(2) - 1;
  dy::Int = random(2) - 1;
  b::Bool = true;
  
  Message(10) -> x := x + 1000;
  Message(n::Int) -> print[Str]('MESSAGE = ' + n + ' ' + x);
  Time(n::Int) -> {}
}

n::M = new m(100);

o::[Int] = [ x + y | x::Int <- 0..10, y::Int <- 0..10, ?(x > y) ];

act main::Main {
  Time(t::Int) ->
   if t > 1000
   then {
     print[Str]('STOPPED ' + t + ' ' +  a + ' ' + c + o);
     stopAll(); 
   }
   else { a := a + 1; c := 'hooray it worked (' + n.x + ')'; n <- Message(t); }
}
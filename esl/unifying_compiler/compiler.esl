export main;

import 
  'new_esl/compiler/ppExp.esl',
  'new_esl/lists.esl',
  'new_esl/compiler/types.esl',
  'new_esl/compiler/typeCheck.esl',
  'new_esl/compiler/toJava.esl';

type Main = Act { Time(Int); }

compileModule(path::Str)::Void =
  try { 
    let module::AST = parse[AST](path); 
    in {
      typeCheckModule0(module,fun(valueEnv::TEnv,cnstrEnv::TEnv,typeEnv::TEnv)::Void {
        print[TEnv](cnstrEnv);
        print[TEnv](typeEnv); 
        let untypedJModule::JMod = moduleToJava(module); in {
        print[Str](''+untypedJModule);
        print[Str](ppJModule(0,untypedJModule));
        let typedJModule::JMod = typeCheckJModule(untypedJModule);  
        in {
          print[Str](ppJModule(0,typedJModule));
          null[Void];
        }
        }
      }); 
    } 
      
  } catch {
      message::Str ->  print[Str]('Type Error: ' + message); 
  }
  
act main::Main { 
  Time(t::Int) -> {
    print[Str]('Start of system');
    compileModule('new_esl/compiler/test1.esl'); 
    print[Str]('DONE');
    stopAll();
  }
}
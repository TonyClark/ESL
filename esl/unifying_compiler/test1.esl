export a;

data Num = One | Succ(Num);
/*
a::Int = 10 + 1;
b::Bool = true;
c::Str = 'plap';
d::Float = 0.9;
e::[Str] = [][Str];
f::[Str] = ['a'];
g::[[Int]] = [[1,2,3],[4,5,6]];
h::Num = Succ(Succ(One));
i::Num = null[Num];
ii::Num = { i := One; i; }
j(x::Int)::Int = if x = 0 then 1; else 2 * k(x -1);
k(x::Int)::Int = if x = 0 then 1; else 2 * j(x -1);

id[T](x::T)::T = x;

l1::Int = id[Int](100) + 3;
l2::Str = id[Str]('plap') + 'plop';

mk2[T](x::T,y::T)::[T] = [x,y]; 

consumer(l::[Int])::Int = 100;
gconsumer[T](l::[T])::Int = 101;

l3::[[Int]] = mk2[[Int]]([1,2],[3,4]);

l4::[(Int)->Int] = mk2[(Int)->Int](fun(x::Int)::Int x+1,fun(y::Int)::Int y-1);
l5::[(Int)->Int] = mk2[(Int)->Int](id[Int],id[Int]);

l6::Int = consumer(mk2[Int](100,200));
l7::Int = gconsumer[Int](mk2[Int](100,200));
l8::Int = gconsumer[Bool](mk2[Bool](true,false));
l9::[Int] = mk2[Int](id[Int](10) + id[Int](20),30);

length[T](l::[T])::Int = 
  case l {
    [] -> 0;
    h:t -> 1 + length[T](t);
  }

member[T](e::T,l::[T])::Bool =
  case l {
    [][T] -> false;
    x::T:xs::[T] when x = e -> true;
    x::T:xs::[T]-> member[T](e,xs);
  }

adjoin[T](x::T,l::[T])::[T] =
  if member[T](x,l)
  then l;
  else x:l;
  
select1[T](l::[T],d::T,p::(T)->Bool)::T =
  case l {
    [][T] -> d;
    h::T:t::[T] when p(h) -> h;
    h::T:t::[T] -> select1[T](t,d,p);
  }

isIn::Bool = member[Int](100,adjoin[Int](100,[][Int]));
*/
exists[T](p::(T)->Bool,x::[T])::Bool = 
  case x {
    [][T] -> false;
    y::T:l::[T] when p(y) -> true;
    z::T:ll::[T] -> exists[T](p,ll);
  }
x::Int = if(exists[Int](fun(x::Int)::Bool x = 200,[200])) then 1; else 2;
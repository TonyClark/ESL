export moduleToJava, typeCheckJModule, main;

import 
  'new_esl/tables.esl',
  'new_esl/lists.esl',
  'new_esl/compiler/cases.esl', 
  'new_esl/compiler/types.esl'
  ;
 
defToField(d::TBind)::JFieldDef =
  case d {
    Binding(l::Loc,n::Str,t::Type,e::AST) -> JField(n,null[JType],expToJExp(e));
    FunBind(l::Loc,n::Str,args::[Pattern],t::Type,e::AST,BoolExp(bl::Loc,true)) ->
      let formals::[TDec] = [ Dec(l,n,t) | PVar(l::Loc,n::Str,t::Type) <- args ]; 
      in JField(n,null[JType],expToJExp(FunExp(l,StrExp(l,n),formals,t,e)));
    FunBind(l::Loc,n::Str,args::[Pattern],t::Type,e::AST,g::AST) ->
      let formals::[TDec] = [ Dec(l,n,t) | PVar(l::Loc,n::Str,t::Type) <- args ]; 
      in JField(n,null[JType],expToJExp(FunExp(l,StrExp(l,n),formals,t,If(l,g,e,Throw(l,t,StrExp(l,'guard failed for ' + n))))));
  }  

decToJDec(d::TDec)::JDeclaration =
  case d {
    Dec(l::Loc,n::Str,t::Type) -> JDec(n,null[JType]);
  }

expsToJCommands(cs::[AST],isLast::Bool)::[JCommand] =
  case cs {
    [][AST] -> [][JCommand];
    [c::AST] -> [expToJCommand(c,isLast)];
    c::AST:cs::[AST] -> expToJCommand(c,false):expsToJCommands(cs,isLast);
  }

expToJCommand(c::AST,isLast::Bool)::JCommand = 
  case c {
    Block(l::Loc,es::[AST]) -> JBlock([ expToJCommand(e,true) | e::AST <- es ]);
    Update(l::Loc,n::Str,e::AST) -> JUpdate(n,expToJExp(e));
    If(l::Loc,e1::AST,e2::AST,e3::AST) -> JIfCommand(expToJExp(e1),expToJCommand(e2,isLast),expToJCommand(e3,isLast));
    CaseList(l::Loc,e::AST,cons::AST,nil::AST,alt::AST) -> 
      JCaseList(expToJExp(e),expToJCommand(cons,true),expToJCommand(nil,true),expToJCommand(alt,true));
    Let(l::Loc,bs::[TBind],e::AST) -> JLet([JField(n,null[JType],expToJExp(v)) | Binding(bl::Loc,n::Str,t::Type,v::AST) <- bs],expToJCommand(e,true));
    e::AST -> JReturn(expToJExp(e));
  }

expsToJExps(es::[AST])::[JExp] =
  map[AST,JExp](fun(e::AST)::JExp expToJExp(e),es);

opToJOp(op::Str)::Str =
  case op { 
    '+' -> '+';
    '-' -> '-';
    '*' -> '*';
    '/' -> '/';
    '%' -> '%';
    '>' -> '>';
    '>=' -> '>=';
    '<' -> '<';
    '<=' -> '<=';
    '=' -> '==';
    '<>' -> '<>';
    ':' -> ':';
  }

expToJExp(e::AST)::JExp =
  case e {
    IntExp(l::Loc,n::Int) -> JConstExp(JConstInt(n));
    StrExp(l::Loc,s::Str) -> JConstExp(JConstStr(s));
    BoolExp(l::Loc,b::Bool) -> JConstExp(JConstBool(b));
    FloatExp(l::Loc,n::Int,m::Int) ->  JConstExp(JConstDouble(100.0));
    ApplyTypeExp(l1::Loc,List(l2::Loc,[][AST]),[t::Type]) -> JNil(null[JType]);
    ApplyTypeExp(l1::Loc,NullExp(l2::Loc),[t::Type]) -> JNull;
    List(l::Loc,es::[AST]) -> JList(null[JType],expsToJExps(es));
    Term(l::Loc,n::Str,ts::[Type],es::[AST]) -> JTerm(n,expsToJExps(es)); 
    Case(l::Loc,ds::[TDec],es::[AST],arms::[Arm]) -> expToJExp(translateCases(e));
    CaseList(l::Loc,list::AST,cons::AST,nil::AST,alt::AST) -> JCommandExp(expToJCommand(e,true),null[JType]);
    Head(e::AST) -> JHead(expToJExp(e));
    Tail(e::AST) -> JTail(expToJExp(e));
    ApplyTypeExp(l::Loc,e::AST,ts::[Type]) -> expToJExp(e);
    CaseError(l::Loc) -> JError(JConstExp(JConstStr('case error at ' + l)));
    NullExp(l::Loc) -> JNull;
    Var(l::Loc,n::Str) -> JVar(n,null[JType]);
    Let(l::Loc,bs::[TBind],body::AST) -> JCommandExp(expToJCommand(e,true),null[JType]);
    Throw(l::Loc,t::Type,e::AST) -> JError(expToJExp(e));
    Apply(l::Loc,op::AST,args::[AST]) -> JApply(expToJExp(op),expsToJExps(args));
    BinExp(l::Loc,e1::AST,op::Str,e2::AST) -> JBinExp(expToJExp(e1),opToJOp(op),expToJExp(e2));
    Block(l::Loc,es::[AST]) -> JCommandExp(JBlock(expsToJCommands(es,true)),null[JType]); 
    If(l::Loc,e1::AST,e2::AST,e3::AST) -> JCommandExp(JIfCommand(expToJExp(e1),expToJCommand(e2,true),expToJCommand(e3,true)),null[JType]);
    FunExp(l::Loc,n::AST,args::[TDec],t::Type,body::AST) -> 
      JFun(expToJExp(n),map[TDec,JDeclaration](fun(d::TDec)::JDeclaration decToJDec(d),args),JFunType([null[JType] | a::TDec <- args],null[JType]),expToJCommand(body,true));
    
  }

moduleToJava(module::AST)::JMod =
  case module {
    Module(name::Str,exports::[Str],imports::[Str],x::Void,y::Void,defs::[TBind]) -> 
      JModule(name,exports,[ defToField(d) | d::TBind <- defs,?(isBinding(d) or isFunBind(d)) ]);
          
  }

// Type checking Java code...

type IEnv = Table[Str,TVar]; 
type VEnv = Table[TVar,JType];
type Fail = () -> Void;
type Succ[T1,T2] = (T1,T2,VEnv,Fail) -> Void;
ienv0::IEnv = [];
venv0::VEnv = [];
fail0::Fail = fun()::Void throw[Void]('no typing possible');

varCount::Int = 0;
newVar()::TVar = { varCount := varCount + 1; V(varCount); }

typeCheckJModule(module::JMod)::JMod = { 
  case module {
    JModule(name::Str,exports::[Str],fs::[JFieldDef]) ->
      let fes::[JExp] = null[[JExp]];
          fts::[JType] = null[[JType]];
          ienv::IEnv = ienv0;
          vs::[TVar] = [ newVar() | f::JFieldDef <- fs ]; in
      let vs0::[TVar] = vs;
      in { 
        for JField(n::Str,t::JType,e::JExp) in fs do {
          ienv := addEntry[Str,TVar](n,head[TVar](vs),ienv);
          vs := tail[TVar](vs);
        }
        typeCheckRecFields(fs,ienv,venv0,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void {
          let ts0::[JType] = ts;
          in {
            for v::TVar in vs0 do {
              venv := unifyTypes(JUnknown(v),head[JType](ts),venv);
              ts := tail[JType](ts);
            }
            fes := [ recons(e,venv) | e::JExp <- es ];
            fts := [ reconsType(t,venv) | t::JType <- ts0 ];
            null[Void]; }},fun()::Void null[Void]);
            JModule(name,exports,zipFields(fs,fes,fts));
        }
      }
    }

typeCheckRecFields(fs::[JFieldDef],ienv::IEnv,venv::VEnv,succ::([JExp],[JType],VEnv,Fail)->Void,fail::Fail)::Void = {
  case fs {
    [][JFieldDef] -> succ([][JExp],[][JType],venv,fail);
    JField(n::Str,t0::JType,e::JExp):fs::[JFieldDef] -> let n::Str = n; fs::[JFieldDef] = fs; in
      jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void 
        typeCheckRecFields(fs,ienv,unifyTypes(JUnknown(lookup[Str,TVar](n,ienv)),t,venv),fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void
          succ(e:es,t:ts,venv,fail),fail),fail);
  }
}

typeCheckParFields(fs::[JFieldDef],ienv::IEnv,venv::VEnv,succ::([JExp],[JType],VEnv,Fail)->Void,fail::Fail)::Void = {
  case fs {
    [][JFieldDef] -> succ([][JExp],[][JType],venv,fail);
    JField(n::Str,t0::JType,e::JExp):fs::[JFieldDef] -> let n::Str = n; fs::[JFieldDef] = fs; in
      jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void 
        typeCheckParFields(fs,ienv,venv,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void
          succ(e:es,t:ts,venv,fail),fail),fail);
  }
}

zipFields(fs::[JFieldDef],es::[JExp],ts::[JType])::[JFieldDef] =
  case fs,es,ts {
    [][JFieldDef],[][JExp],[][JType] -> [][JFieldDef];
    JField(n::Str,t::JType,e::JExp):fs::[JFieldDef],e::JExp:es::[JExp],t::JType:ts::[JType] ->
      JField(n,t,e):zipFields(fs,es,ts);
  }

jExpsTypes(es::[JExp],ienv::IEnv,venv::VEnv,succ::Succ[[JExp],[JType]],fail::Fail)::Void = {
  //print[Str]('exps types ' + es);
  case es {
    [][JExp] -> succ([][JExp],[][JType],venv,fail);
    e::JExp:es::[JExp] -> 
      let es::[JExp] = es; in
      let succ1(e::JExp,t::JType,venv::VEnv,fail1::Fail)::Void = 
            let e::JExp = e; t::JType = t; in
            let succ2(es::[JExp],ts::[JType],venv::VEnv,fail2::Fail)::Void = succ(e:es,t:ts,venv,fail2);
            in jExpsTypes(es,ienv,venv,succ2,fail1);
      in jExpType(e,ienv,venv,succ1,fail);
  }
}

jExpType(e::JExp,ienv::IEnv,venv::VEnv,succ::Succ[JExp,JType],fail::Fail)::Void = {
   print[Str]('jExpType ' + e);
   case e {
    JConstExp(JConstInt(n::Int)) -> succ(e,JIntegerType,venv,fail);
    JConstExp(JConstBool(b::Bool)) -> succ(e,JBooleanType,venv,fail);
    JConstExp(JConstStr(s::Str)) -> succ(e,JStringType,venv,fail);
    JConstExp(JConstDouble(d::Float)) -> succ(e,JDoubleType,venv,fail);
    JNil(t::JType) -> let v::TVar = newVar(); in succ(JNil(JUnknown(v)),JListType(JUnknown(v)),venv,fail);
    JBinExp(e1::JExp,op::Str,e2::JExp) -> 
      let op::Str = op; in
      jExpType(e1,ienv,venv,fun(e1::JExp,t1::JType,venv::VEnv,fail::Fail)::Void
        jExpType(e2,ienv,venv,fun(e2::JExp,t2::JType,venv::VEnv,fail::Fail)::Void
           typeCheckBinExp(e1,t1,op,e2,t2,ienv,venv,succ,fail),fail),fail);
    JList(t::JType,es::[JExp]) -> jExpsTypes(es,ienv,venv,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void
      let venv::VEnv = unifyAllTypes(head[JType](ts),tail[JType](ts),venv);
      in if venv = [][VEnv]
         then fail()
         else succ(JList(head[JType](ts),es),JListType(head[JType](ts)),venv,fail),fail); 
    JTerm(n::Str,es::[JExp]) -> jExpsTypes(es,ienv,venv,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void
      succ(JTerm(n,es),JTermType,venv,fail),fail);
    JNull -> let v::TVar = newVar(); in succ(e,JUnknown(v),venv,fail);
    JCommandExp(c::JCommand,t::JType) -> jCommandType(c,ienv,venv,fun(c::JCommand,t::JType,venv::VEnv,fail::Fail)::Void succ(JCommandExp(c,t),t,venv,fail),fail);
    JVar(n::Str,t::JType) -> let t::JType = JUnknown(lookup[Str,TVar](n,ienv)); in succ(JVar(n,t),t,venv,fail);
    JFun(n::JExp,args::[JDeclaration],t::JType,body::JCommand) -> {
      let args0::[JDeclaration] = [ JDec(n,JUnknown(newVar())) | JDec(n::Str,t::JType) <- args ]; 
      in {
        for JDec(n::Str,JUnknown(v::TVar)) in args0 do {
          ienv := addEntry[Str,TVar](n,v,ienv);
        }
        jCommandType(body,ienv,venv,fun(c::JCommand,t::JType,venv::VEnv,fail::Fail)::Void {
          succ(JFun(n,args0,t,c),JFunType([ t | JDec(n::Str,t::JType) <- args0 ],t),venv,fail);
        },fail);
      }
    }
    JApply(e::JExp,args::[JExp]) -> 
      jExpType(e,ienv,venv,fun(o::JExp,t::JType,venv::VEnv,fail::Fail)::Void {
        let dom::[JType] = [ JUnknown(newVar()) | arg::JExp <- args ];
            ran::JType = JUnknown(newVar());
        in let venv::VEnv = unifyTypes(t,JFunType(dom,ran),venv);
           in if venv = null[VEnv]
              then fail();
              else {
                jExpsTypes(args,ienv,venv,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void
                  // Forpolymorphism we must copy the unbound variables in the function type...
                  case copyUnboundVars(JFunType(dom,ran),venv) {
                    JFunType(newDom::[JType],newRan::JType) ->
                      let venv::VEnv = unifyTypeLists(newDom,ts,venv);
                      in if venv = null[VEnv]
                         then fail();
                         else {
                          succ(JCast(newRan,JApply(o,es)),newRan,venv,fail);
                         }
                  },fail);
              }
      },fail);
    JHead(e::JExp) -> jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void
      let lt::JType = JUnknown(newVar());
      in let venv::VEnv = unifyTypes(JListType(lt),t,venv);
         in if venv = null[VEnv]
            then fail()
            else succ(JHead(e),lt,venv,fail),fail);
    JTail(e::JExp) -> jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void
      let lt::JType = JUnknown(newVar());
      in let venv::VEnv = unifyTypes(JListType(lt),t,venv);
         in if venv = null[VEnv]
            then fail()
            else succ(JTail(e),JListType(lt),venv,fail),fail);
    JError(e::JExp) -> succ(JError(e),JUnknown(newVar()),venv,fail);
      
    /*
    JError(e::JExp) -> JError(typeCheckJExp(e,env));
    JApply(e::JExp,es::[JExp]) -> JApply(typeCheckJExp(e,env),[ typeCheckJExp(e,env) | e::JExp <- es ]);
    JCaseListExp(c::JCommand) -> JCaseListExp(typeCheckJCommand(c,env));
    JHead(e::JExp) -> JHead(typeCheckJExp(e,env));
    JTail(e::JExp) -> JTail(typeCheckJExp(e,env));
    e::JExp -> throw[JExp]('unknown type of JExp for type check; ' + e);
    */
   }
}

copyUnboundVars(t::JType,venv::VEnv)::JType = 
  let unboundVars::[TVar] = unboundVars(t,venv);
  in let table::Table[TVar,TVar] = [ TableEntry(v,newVar()) | v::TVar <- unboundVars ];
     in let newT::JType = substVars(t,venv,table);
        in {
          print[Str]('copy unbound vars ' + unboundVars + ' ' + t + ' ==> ' + newT);
          newT;
        }


unboundVars(t::JType,venv::VEnv)::[TVar] =
  case t {
    JFunType(dom::[JType],ran::JType) -> removeDups[TVar](unboundListVars(dom,venv) + unboundVars(ran,venv));
    JUnknown(v::TVar) when deref(t,venv) = t -> [v];
    JUnknown(v::TVar) -> unboundVars(deref(t,venv),venv);
    JListType(t::JType) -> unboundVars(t,venv);
    JBooleanType -> [];
    JIntegerType -> [];
    JStringType -> [];
    JDoubleType -> [];
    t::JType -> throw[[TVar]]('unknown type for unboundVars: ' + t);
  }

unboundListVars(ts::[JType],venv::VEnv)::[TVar] =
  case ts {
    [] -> [];
    t::JType:ts::[JType] -> unboundVars(t,venv) + unboundListVars(ts,venv);
  }

substVars(t::JType,venv::VEnv,table::Table[TVar,TVar])::JType = {
  //print[Str]('subst vars ' + t + ' ' + table);
  case deref(t,venv) {
    JFunType(dom::[JType],ran::JType) -> JFunType([ substVars(t,venv,table) | t::JType <- dom ],substVars(ran,venv,table));
    JUnknown(v::TVar) when hasEntry[TVar,TVar](v,table) -> JUnknown(lookup[TVar,TVar](v,table));
    JUnknown(v::TVar) -> JUnknown(v);
    JListType(t::JType) -> JListType(substVars(t,venv,table));
    JIntegerType -> t;
    JBooleanType -> t;
    JStringType -> t;
    JDoubleType -> t;
    t::JType -> throw[JType]('unknown type for substVars: ' + t);
  }
}

jCommandsTypes(es::[JCommand],ienv::IEnv,venv::VEnv,succ::Succ[[JCommand],[JType]],fail::Fail)::Void = {
  case es {
    [][JCommand] -> succ([][JCommand],[][JType],venv,fail);
    e::JCommand:es::[JCommand] -> 
      let es::[JCommand] = es; in
      let succ1(e::JCommand,t::JType,venv::VEnv,fail1::Fail)::Void = 
            let e::JCommand = e; t::JType = t; in
            let succ2(es::[JCommand],ts::[JType],venv::VEnv,fail2::Fail)::Void = succ(e:es,t:ts,venv,fail2);
            in jCommandsTypes(es,ienv,venv,succ2,fail1);
      in jCommandType(e,ienv,venv,succ1,fail);
  }
}

jCommandType(c::JCommand,ienv::IEnv,venv::VEnv,succ::Succ[JCommand,JType],fail::Fail)::Void = {
  print[Str]('jcommand type ' + c);
  case c {
    JUpdate(n::Str,e::JExp) -> 
      jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void
        let venv::VEnv = unifyTypes(deref(JUnknown(lookup[Str,TVar](n,ienv)),venv),t,venv); 
        in if venv = null[VEnv]
           then fail()
           else succ(JUpdate(n,e),t,venv,fail),fail);
    JBlock(cs::[JCommand]) -> jCommandsTypes(cs,ienv,venv,fun(cs::[JCommand],ts::[JType],venv::VEnv,fail::Fail)::Void
      succ(JBlock(cs),last[JType](ts),venv,fail),fail);
    JReturn(e::JExp) -> jExpType(e,ienv,venv,fun(e::JExp,t::JType,venv::VEnv,fail::Fail)::Void
      succ(JReturn(e),t,venv,fail),fail);
    JIfCommand(e::JExp,c1::JCommand,c2::JCommand) ->
      jExpType(e,ienv,venv,fun(e0::JExp,t::JType,venv::VEnv,fail::Fail)::Void 
        jCommandType(c1,ienv,venv,fun(c11::JCommand,t1::JType,venv::VEnv,fail::Fail)::Void 
          jCommandType(c2,ienv,venv,fun(c22::JCommand,t2::JType,venv::VEnv,fail::Fail)::Void 
            let venv::VEnv = unifyTypeLists([JBooleanType,t1],[t,t2],venv);
            in if venv = null[VEnv] then fail() else succ(JIfCommand(e0,c11,c22),t1,venv,fail),fail),fail),fail);
    JCaseList(e::JExp,c1::JCommand,c2::JCommand,c3::JCommand) ->
      jExpType(e,ienv,venv,fun(e0::JExp,t::JType,venv::VEnv,fail::Fail)::Void 
        jCommandType(c1,ienv,venv,fun(c11::JCommand,t1::JType,venv::VEnv,fail::Fail)::Void 
          jCommandType(c2,ienv,venv,fun(c22::JCommand,t2::JType,venv::VEnv,fail::Fail)::Void 
            jCommandType(c3,ienv,venv,fun(c33::JCommand,t3::JType,venv::VEnv,fail::Fail)::Void 
              let venv::VEnv = unifyTypes(t1,t2,venv);
              in if venv = null[VEnv]
                 then fail()
                 else succ(JCaseList(e0,c11,c22,c33),t1,venv,fail), fail), fail),fail), fail);
                 
    JLet(fs::[JFieldDef],c::JCommand) -> let c::JCommand = c; in
      typeCheckParFields(fs,ienv,venv,fun(es::[JExp],ts::[JType],venv::VEnv,fail::Fail)::Void {
        let newFields::[JFieldDef] = []; 
        in {
          for JField(n::Str,x::JType,xx::JExp) in fs do {
            let v::TVar = newVar();
            in {
              ienv := addEntry[Str,TVar](n,v,ienv);
              venv := unifyTypes(JUnknown(v),head[JType](ts),venv);
              newFields := newFields + [JField(n,head[JType](ts),head[JExp](es))];
              es := tail[JExp](es);
              ts := tail[JType](ts);
            }
          }
          jCommandType(c,ienv,venv,fun(c::JCommand,t::JType,venv::VEnv,fail::Fail)::Void {
            succ(JLet(newFields,c),t,venv,fail);
          }, fail);
          }
        },fail);
    c::JCommand -> throw[Void]('unknown command for jType: ' + c);
  } 
}
   
recons(e::JExp,venv::VEnv)::JExp = {
  //print[Str]('recons ' + e + ' ' + venv);
  case e {
    JConstExp(JConstInt(n::Int)) -> e;
    JConstExp(JConstBool(b::Bool)) -> e;
    JConstExp(JConstStr(s::Str)) -> e;
    JConstExp(JConstDouble(d::Float)) -> e;
    JError(e::JExp) -> JError(e);
    JApply(e::JExp,es::[JExp]) -> JApply(recons(e,venv),reconsExps(es,venv));
    JNil(t::JType) -> JNil(reconsType(t,venv));
    JBinExp(e1::JExp,op::Str,e2::JExp) -> JBinExp(recons(e1,venv),op,recons(e2,venv));
    JList(t::JType,es::[JExp]) -> JList(reconsType(t,venv),reconsExps(es,venv));
    JTerm(n::Str,es::[JExp]) -> JTerm(n,reconsExps(es,venv));
    JCommandExp(c::JCommand,t::JType) -> JCommandExp(reconsCommand(c,venv),reconsType(t,venv));
    JVar(n::Str,t::JType) -> JVar(n,reconsType(t,venv));
    JFun(n::JExp,args::[JDeclaration],t::JType,body::JCommand) -> JFun(n,reconsDecs(args,venv),reconsType(t,venv),reconsCommand(body,venv));
    JNull -> JNull;
    JCast(t::JType,e::JExp) -> JCast(reconsType(t,venv),recons(e,venv));
    JHead(e::JExp) -> JHead(recons(e,venv));
    JTail(e::JExp) -> JTail(recons(e,venv));
    e::JExp -> throw[JExp]('unknown type of exp for recons: ' + e);
  }
}

reconsDecs(decs::[JDeclaration],venv::VEnv)::[JDeclaration] =
  case decs {
    [] -> [];
    JDec(n::Str,t::JType):decs::[JDeclaration] -> JDec(n,reconsType(t,venv)):reconsDecs(decs,venv);
  }

reconsExps(es::[JExp],venv::VEnv)::[JExp] =
  case es {
    [][JExp] -> es;
    e::JExp:es::[JExp] -> recons(e,venv):reconsExps(es,venv);
  }

reconsCommand(c::JCommand,venv::VEnv)::JCommand =
  case c {
    JBlock(cs::[JCommand]) -> JBlock(reconsCommands(cs,venv));
    JUpdate(n::Str,e::JExp) -> JUpdate(n,recons(e,venv));
    JReturn(e::JExp) -> JReturn(recons(e,venv));
    JCaseList(e::JExp,c1::JCommand,c2::JCommand,c3::JCommand) ->
      JCaseList(recons(e,venv),reconsCommand(c1,venv),reconsCommand(c2,venv),reconsCommand(c3,venv));
    JLet(fs::[JFieldDef],c::JCommand) ->
      JLet([JField(n,reconsType(t,venv),recons(e,venv)) | JField(n::Str,t::JType,e::JExp) <- fs ],reconsCommand(c,venv));
    JIfCommand(e::JExp,c1::JCommand,c2::JCommand) -> JIfCommand(recons(e,venv),reconsCommand(c1,venv),reconsCommand(c2,venv));
    c::JCommand -> throw[JCommand]('unknown command: ' + c);
  }

reconsCommands(es::[JCommand],venv::VEnv)::[JCommand] =
  case es {
    [][JCommand] -> es;
    e::JCommand:es::[JCommandp] -> reconsCommand(e,venv):reconsCommands(es,venv);
  }

reconsType(t::JType,venv::VEnv)::JType = {
  //print[Str]('recons type ' + t + ' ' + venv);
  case t {
    JIntegerType -> t;
    JBooleanType -> t;
    JStringType -> t;
    JDoubleType -> t;
    JTermType -> t;
    JNullType(t::JType) -> JNullType(reconsType(t,venv));
    JListType(t::JType) -> JListType(reconsType(t,venv));
    JFunType(dom::[JType],ran::JType) -> JFunType([ reconsType(t,venv) | t::JType <- dom ], reconsType(ran,venv));
    JUnknown(v::TVar) -> if deref(t,venv) = t then t; else reconsType(deref(t,venv),venv);
  }
}

addOverloads::[JType] = [
   JFunType([JIntegerType,JIntegerType],JIntegerType),
   JFunType([JStringType,JIntegerType],JStringType),
   JFunType([JIntegerType,JStringType],JStringType),
   JFunType([JStringType,JStringType],JStringType)
];

subOverloads::[JType] = [
   JFunType([JIntegerType,JIntegerType],JIntegerType)
];

mulOverloads::[JType] = [
   JFunType([JIntegerType,JIntegerType],JIntegerType)
];

divOverloads::[JType] = [
   JFunType([JIntegerType,JIntegerType],JIntegerType)
];
   

typeCheckBinExp(e1::JExp,t1::JType,op::Str,e2::JExp,t2::JType,ienv::IEnv,venv::VEnv,succ::Succ[JExp,JType],fail::Fail)::Void = {
  //print[Str]('type check bin op ' + op + ' ' + t1 + ' ' + t2);
  case op {
     '+' -> 
       let v::TVar = newVar();
       in unifyOverloads(JFunType([t1,t2],JUnknown(v)),addOverloads,venv,fun(venv::VEnv,fail::Fail)::Void succ(JBinExp(e1,op,e2),JUnknown(v),venv,fail),fail);
     '-' -> 
       let v::TVar = newVar();
       in unifyOverloads(JFunType([t1,t2],JUnknown(v)),subOverloads,venv,fun(venv::VEnv,fail::Fail)::Void succ(JBinExp(e1,op,e2),JUnknown(v),venv,fail),fail);
     '*' -> 
       let v::TVar = newVar();
       in unifyOverloads(JFunType([t1,t2],JUnknown(v)),mulOverloads,venv,fun(venv::VEnv,fail::Fail)::Void succ(JBinExp(e1,op,e2),JUnknown(v),venv,fail),fail);
     '/' -> 
       let v::TVar = newVar();
       in unifyOverloads(JFunType([t1,t2],JUnknown(v)),divOverloads,venv,fun(venv::VEnv,fail::Fail)::Void succ(JBinExp(e1,op,e2),JUnknown(v),venv,fail),fail);
     '==' ->
       let venv::VEnv = unifyTypes(t1,t2,venv);
       in if venv = null[VEnv]
          then fail();
          else succ(JBinExp(e1,op,e2),JBooleanType,venv,fail);
     ':' ->
       let v::TVar = newVar(); in
       let tHead::JType = JUnknown(v);
           tTail::JType = JListType(JUnknown(v)); in 
       let venv::VEnv = unifyTypes(t1,tHead,venv); 
       in if venv = null[VEnv]
          then fail();
          else 
            let venv::VEnv = unifyTypes(t2,tTail,venv);
            in if venv = null[VEnv]
               then fail();
               else succ(JBinExp(e1,op,e2),tTail,venv,fail);
     op::Str -> throw[Void]('unknown op: ' + op);
  }
}

unifyOverloads(t1::JType,ts::[JType],venv::VEnv,cont::(VEnv,Fail)->Void,fail::Fail)::Void =
  case ts {
    [][JType] -> fail();
    t2::JType:ts::[JType] ->
      let ts::[JType] = ts;
      in if unifyTypes(t1,t2,venv) = null[VEnv]
         then unifyOverloads(t1,ts,venv,cont,fail);
         else {
          cont(unifyTypes(t1,t2,venv),fun()::Void unifyOverloads(t1,ts,venv,cont,fail));
         }
  }

deref(t::JType,venv::VEnv)::JType =
  case t {
    JUnknown(v::TVar) -> 
      if hasEntry[TVar,JType](v,venv)
      then deref(lookup[TVar,JType](v,venv),venv);
      else t;
    t::JType -> t;
  }

unifyTypeLists(ts1::[JType],ts2::[JType],venv::VEnv)::VEnv =
  case ts1,ts2 {
    [][JType],[][JType] -> venv;
    ts1::[JType],[][JType] -> null[VEnv];
    [][JType],ts2::[JType] -> null[VEnv];
    t1::JType:ts1::[JType],t2::JType:ts2::[JType] ->
      let venv::VEnv = unifyTypes(t1,t2,venv);
      in if venv = null[VEnv]
         then venv;
         else unifyTypeLists(ts1,ts2,venv);
  }

unifyAllTypes(t1::JType,ts::[JType],venv::VEnv)::VEnv =
  case ts {
    [] -> venv;
    t2::JType:ts::[JType] -> 
      let venv::VEnv = unifyTypes(t1,t2,venv);
      in if venv = [][TMap]
         then venv;
         else unifyAllTypes(t2,ts,venv);
  }

unifyTypes(t1::JType,t2::JType,venv::VEnv)::VEnv = {
  let t1::JType = deref(t1,venv);
      t2::JType = deref(t2,venv);
  in {
    print[Str]('unify types ' + t1 + ' ' + t2);
    if t1 = t2
    then venv;
    else case t1,t2 {
            JFunType(dom1::[JType],ran1::JType),JFunType(dom2::[JType],ran2::JType) -> 
              let venv::VEnv = unifyTypeLists(dom1,dom2,venv);
              in if venv = null[VEnv]
                 then venv;
                 else unifyTypes(ran1,ran2,venv);
            JUnknown(v::TVar),t::JType -> addEntry[TVar,JType](v,t,venv); 
            t::JType,JUnknown(v::TVar) -> addEntry[TVar,JType](v,t,venv); 
            JListType(t1::JType),JListType(t2::JType) -> unifyTypes(t1,t2,venv);
            t1::JType,t2::JType -> null[VEnv];
     }
  }
}
/*
 typeCheckJCommand(c::JCommand,env::JEnv)::JCommand = { print[Str]('type check jcommand ' + c + ' ' + env);
   case c {
    JIfCommand(e::JExp,c1::JCommand,c2::JCommand) -> JIfCommand(typeCheckJExp(e,env),typeCheckJCommand(c1,env),typeCheckJCommand(c2,env));
    JReturn(e::JExp) -> JReturn(typeCheckJExp(e,env));
    JCaseList(l::JExp,cons::JCommand,nil::JCommand,alt::JCommand) -> 
      JCaseList(typeCheckJExp(l,env),typeCheckJCommand(cons,env),typeCheckJCommand(nil,env),typeCheckJCommand(alt,env));
    JLet(bs::[JFieldDef],c::JCommand) -> 
      let letEnv::JEnv = [ JMap(n,null[JType]) | JField(n::Str,t::JType,e::JExp) <- bs ];
      in {
        print[Str]('let env = ' + letEnv);
        JLet([ JField(n,null[JType],typeCheckJExp(e,env)) | JField(n::Str,t::JType,e::JExp) <- bs],typeCheckJCommand(c, letEnv+ env));
      }
    c::JCommand -> throw[JCommand]('unknown type of java command for type checking: ' + c);
   }
 }
*/

act main::Act{Time(Int); } {
  Time(n::Int) -> {
    print[Str](''+emptyTable);
    stopAll();
  }
}

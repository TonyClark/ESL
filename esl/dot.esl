export main;

type Point = rec Point.  Act { export getx::()->Int; gety::()->Int; add::(Point) -> Point; toString::()->Str; Time(Int) }; 

type Main = Act { Time(Int) };

point(x::Int,y::Int)::Point = 
  fold[Point] act {
    export getx,gety,add,toString;
    getx()::Int = x;
    gety()::Int = y;
    add(p::Point)::Point = new point((unfold[Point]p).getx() + x,(unfold[Point]p).gety() + y);
    toString()::Str = '(' + x + ',' + y + ')'
    Time(n::Int) -> {}
  };

act main::Main {

  -> 
  let p1::Point = new point(1,2);
      p2::Point = new point(2,3)
  in print[Str]((unfold[Point](unfold[Point]p1).add(p2)).toString());
  
  Time(1) -> stopAll()

}



 

















/********************************************************************************************************************************
 *                                                                                                                              *
 *                                                   ESL Syntax Types                                                           *
 *                                                 ====================                                                         *
 *                                                                                                                              *
 *   This file contains the type definitions and associated functions for the types that represent ESL and Java source code.    *
 *                                                                                                                              *
 *   Key definitions:                                                                                                           *
 *                                                                                                                              *
 *   (1)  Loc is used to represent the position in the original source code.                                                    *
 *   (2)  TDec is used to represent identifier declarations such as arguments.                                                  *
 *   (3)  TEnv is used to represent type environments mapping names to their types.                                             *
 *   (4)  Error is used to define the values that are thrown if types are found.                                                *
 *   (5)  Type defines the language of ESL types as found in the source code.                                                   *
 *   (6)  Pattern defines the language of patterns found in case expressions.                                                   *
 *   (7)  TBind is used to define identifier bindings with initial values.                                                      *
 *   (8)  Arm defines the language of case arms.                                                                                *
 *   (9)  Qualifier defines the language list comprehension qualifiers.                                                         *
 *   (10) AST is the abstraction syntax of ESL.                                                                                 *
 *   (11) JExp and JCommand are the target java-based languages for the compuler.                                               *
 *                                                                                                                              *
 ********************************************************************************************************************************/

export moduleExportedMethodNames,AST,ActExp,ActType,ActorDynamicRef,Apply,ApplyType,ApplyTypeExp,ApplyTypeFun,Arm,ArrayRef,ArrayType,ArrayUpdate,BArm,BQual,BagExp,BagType,Become,BinExp,Binding,Block,BoolArm,BoolExp,BoolType,Case,CaseAdd,CaseBool,CaseBoolsArm,CaseError,CaseInt,CaseIntsArm,CaseList,CaseSet,CaseStr,CaseStrsArm,CaseTerm,CaseTermArm,Cmp,CnstrBind,Cons,DRef,DataBind,Dec,Error,ExtendedAct,FieldType,FloatExp,FloatType,Fold,For,ForallType,FunBind,FunBinds,FunCase,FunCase,FunExp,FunType,Grab,Head,Hovver,HovverOver,IArm,If,IntExp,IntType,JActorType,JApply,JArrayRef,JArrayUpdate,JBArm,JBag,JBecome,JBehaviour,JBinExp,JBlock,JBoolArm,JBooleanType,JCase,JCaseBool,JCaseInt,JCaseList,JCaseOf,JCaseStr,JCaseTerm,JCast,JCastp,JCmp,JCmpBind,JCmpExp,JCmpIf,JCmpList,JCmpOuter,JCommand,JCommandExp,JConst,JConstBool,JConstDouble,JConstExp,JConstInt,JConstStr,JDec,JDeclaration,JDoubleType,JEnv,JError,JExp,JExtendedBehaviour,JField,JFieldDef,JFlatten,JFor,JFun,JFunType,JGrab,JHead,JIArm,JIfCommand,JIfExp,JIntArm,JIntegerType,JLet,JLetRec,JList,JListType,JMap,JMapFun,JMethod,JMethodCall,JMethodDef,JMod,JModule,JNew,JNewArray,JNewJava,JNewTable,JNil,JNot,JNow,JNull,JNullType,JObject,JPLet,JProbably,JRecord,JRef,JRefSuper,JReturn,JSArm,JSelf,JSend,JSendSuper,JSendTimeSuper,JSet,JStatement,JStrArm,JStringType,JSwitch,JSwitchList,JTArm,JTMap,JTail,JTerm,JTermArm,JTermRef,JTermType,JTry,JType,JUnknown,JUpdate,JVar,JustType,LArm,Let,Letrec,List,ListType,Loc,MType,Map,MessageType,Module,New,NewArray,NewJava,NewTable,Not,Now,NullExp,NullType,ObservedType,ObserverType,PAdd,PApplyType,PBagCons,PBool,PCons,PEmptyBag,PEmptySet,PInt,PLet,PNil,PNull,PQual,PSetCons,PStr,PTerm,PVar,Pattern,Pos,Probably,Qualifier,RecType,Record,RecordType,Ref,RefSuper,SArm,Self,Send,SendSuper,SendTimeSuper,SetExp,SetType,StrExp,StrType,TArm,TBind,TDec,TEnv,TMap,TVar,TableType,TaggedFunType,Tail,Term,TermRef,TermType,Throw,Try,Type,TypeBind,TypeCache,TypeClosure,TypeError,TypeFun,TypeInfo,TypedLoc,Unfold,UnfoldType,UnionRef,UnionType,Update,V,Var,VarDynamicRef,VarType,VoidType,actEqual,actSubType,allEqualTypes,applyTypeFun,bindingLoc,bindingName,decLoc,decName,decSubType,decType,equalDec,equalMessage,expandFunDefs,expandObservedType,expandObserverType,flattenAct,forceType,isBinding,isBoolType,isFloatType,isFunBind,isIntType,isNumType,isStrType,locEnd,locStart,lookupType,maybe,mergeFunDefs,messSubType,patternLoc,patternNames,recordSubType,recordTypeEqual,removeFromDom,restrictTypeEnv,subType,subTypes,substDec,substDecEnv,substMType,substMTypeEnv,substType,substTypeEnv,substTypes,substTypesEnv,theTypeBool,theTypeFloat,theTypeInt,theTypeNull,theTypeStr,theTypeVoid,typeEnvDom,typeEnvRan,typeEqual,typeEqual1,typeMember,typeSetEqual,typeSubset,typesEqual,unfoldType,zipTypeEnv;

import 'esl/lists.esl'; 

data Loc =                                                    // Most syntax elements define their start and end character from the source text.
  Pos(Int,Int)                                                // The data inserted by the parser.
| TypedLoc(Type,Int,Int);                                     // The type is added by the type checker.

locStart(l::Loc)::Int = 
  case l {
    Pos(start,end)        -> start;
    TypedLoc(t,start,end) -> start;
  }

locEnd(l::Loc)::Int = 
  case l {
    Pos(start,end)        -> end;
    TypedLoc(t,start,end) -> end;
  }

data TDec = Dec(Loc,Str,Type,Type);                           // A declaration Dec(location,name,type,sourceType) where the source type matches the original text.
                                                          
decName(d::TDec)::Str =                                       // Get the name of a declaration.
  case d {                                                  
    Dec(l::Loc,n::Str,t::Type,dt::Type) -> n;              
  }

decLoc(d::TDec)::Loc =                                        // Get the location of a declaration.
  case d {
    Dec(l::Loc,n::Str,t::Type,dt::Type) -> l;
  }

decType(d::TDec)::Type =                                      // Get the type of a declaration.
  case d {
    Dec(l::Loc,n::Str,t::Type,dt::Type) -> t;
  }

data DRef =                                                   // The target of a grab. 
  VarDynamicRef(Loc,AST)                                      // Grab a variable.
| ActorDynamicRef(Loc,AST,Str);                               // Grab an exported field from an actor.

data TMap = Map(Str,Type);                                    // The mapping in a type environment Map(name,type).
type TEnv = [TMap];                                           // The type checker builds a type environment.

data JTMap = JMap(Str,JType);                                 // Currently not used.
type JEnv = [JTMap];                                          // Currently not used.

data MType = MessageType(Loc,[Type]);                         // The type of a message handler MessageType(location,[Term(name,types)])

data Error = TypeError(Loc,Str);                              // The value thrown when the type checker fails. The location is used for reporting.
 
data Type =                                                   // The abstract syntax of ESL types.
   ActType(Loc,[TDec],[MType])
|  ApplyType(Loc,Str,[Type])
|  ApplyTypeFun(Loc,Type,[Type])
|  ArrayType(Loc,Type)
|  BagType(Loc,Type)
|  BoolType(Loc)
|  ExtendedAct(Loc,Type,[TDec],[MType])
|  FieldType(Loc,Str,Type)
|  FloatType(Loc)
|  ForallType(Loc,[Str],Type)
|  FunType(Loc,[Type],Type)
|  IntType(Loc)
|  ListType(Loc,Type)
|  NullType(Loc)
|  ObservedType(Loc,Type,Type)
|  ObserverType(Loc,Type,Type)
|  RecType(Loc,Str,Type)
|  RecordType(Loc,[TDec])
|  SetType(Loc,Type)
|  StrType(Loc)
|  TaggedFunType(Loc,[Type],Str,Type)
|  TableType(Loc,Type,Type)
|  TermType(Loc,Str,[Type])
|  TypeCache(Hash[Loc,Type])
|  TypeClosure(() -> Type)
|  TypeFun(Loc,[Str],Type)
|  UnionType(Loc,[Type])
|  UnionRef(Loc,Type,Str)
|  UnfoldType(Loc,Type)
|  VarType(Loc,Str)
|  VoidType(Loc);

// Type constants...

theTypeBool::Type = BoolType(Pos(0,0));
theTypeInt::Type = IntType(Pos(0,0));
theTypeFloat::Type = FloatType(Pos(0,0));
theTypeNull::Type = NullType(Pos(0,0));
theTypeStr::Type = StrType(Pos(0,0));
theTypeVoid::Type = VoidType(Pos(0,0));

isStrType(t::Type)::Bool =
  case t {
    StrType(l::Loc) -> true;
    t::Type -> false;
  }

isIntType(t::Type)::Bool =
  case t {
    IntType(l::Loc) -> true;
    t::Type -> false;
  }

isNumType(t::Type)::Bool =
  case t {
    IntType(l::Loc) -> true;
    FloatType(l::Loc) -> true;
    t::Type -> false;
  }

isBoolType(t::Type)::Bool =
  case t {
    BoolType(l::Loc) -> true;
    t::Type -> false;
  }

isFloatType(t::Type)::Bool =
  case t {
    FloatType(l::Loc) -> true;
    t::Type -> false;
  }

typeEqual(t1::Type,t2::Type)::Bool = {
  let b::Bool = typeEqual1(t1,t2);
  in {
    //print[Str]('type equal ' + ppType(t1) + ' ' + ppType(t2) + ' = ' + b);
    b;
  }
}

typeEqual1(t1::Type,t2::Type)::Bool = { //print[Str]('type equal: ' + t1 + ' = ' + t2);
  if t1 = t2
  then true;
  else case t1,t2 {
    ArrayType(l1::Loc,t1::Type),ArrayType(l2::Loc,t2::Type)                                                        -> typeEqual(t1,t2);
    ActType(l1::Loc,exports1::[TDec],handlers1::[MType]),ActType(l2::Loc,exports2::[TDec],handlers2::[MType])      -> actEqual(exports1,exports2,handlers1,handlers2);
    ApplyTypeFun(l1::Loc,op1::Type,args1::[Type]),ApplyTypeFun(l2::Loc,op2::Type,args2::[Type])                    -> typeEqual(op1,op2) and typesEqual(args1,args2);
    ApplyTypeFun(l::Loc,op::Type,args::[Type]),t2::Type                                                            -> typeEqual(applyTypeFun(l,forceType(op),args),t2);
    t1::Type,ApplyTypeFun(l::Loc,op::Type,args::[Type])                                                            -> typeEqual(t1,applyTypeFun(l,forceType(op),args));
    ExtendedAct(l1::Loc,t1::Type,ds1::[TDec],ms1::[MType]),t2::Type                                                -> typeEqual(flattenAct(l1,t1,ds1,ms1),t2);
    t1::Type,ExtendedAct(l2::Loc,t2::Type,ds2::[TDec],ms2::[MType])                                                -> typeEqual(t1,flattenAct(l2,t2,ds2,ms2));
    BoolType(l1::Loc),BoolType(l2::Loc)                                                                            -> true;
    FloatType(l1::Loc),FloatType(l2::Loc)                                                                          -> true;
    IntType(l1::Loc),IntType(l2::Loc)                                                                              -> true;
    ListType(l1::Loc,t1::Type),ListType(l2::Loc,t2::Type)                                                          -> typeEqual(t1,t2);
    BagType(l1::Loc,t1::Type),BagType(l2::Loc,t2::Type)                                                            -> typeEqual(t1,t2);
    SetType(l1::Loc,t1::Type),SetType(l2::Loc,t2::Type)                                                            -> typeEqual(t1,t2);
    StrType(l1::Loc),StrType(l2::Loc)                                                                              -> true;
    VoidType(l1::Loc),t::Type                                                                                      -> true;
    t::Type,VoidType(l1::Loc)                                                                                      -> true;
    FieldType(l1::Loc,n1::Str,t1::Type),FieldType(l2::Loc,n2::Str,t2::Type)                                        -> n1=n2 and typeEqual(t1,t2);
    ObservedType(l1::Loc,s1::Type,m1::Type),ObservedType(l2::Loc,s2::Type,m2::Type)                                -> typeEqual(s1,s2) and typeEqual(m1,m2);
    ObservedType(l,state,UnionType(ul,terms)),t2                                                                   -> typeEqual(expandObservedType(l,state,UnionType(ul,terms)),t2);
    t1,ObservedType(l,state,UnionType(ul,terms))                                                                   -> typeEqual(t1,expandObservedType(l,state,UnionType(ul,terms)));
    ObserverType(l1::Loc,state1::Type,messages1::Type),ObserverType(l2::Loc,state2::Type,messages2::Type)          -> typeEqual(state1,state2) and typeEqual(messages1,messages2);
    ObserverType(l,state,UnionType(ul,terms)),t2                                                                   -> typeEqual(expandObserverType(l,state,UnionType(ul,terms)),t2);
    t1,ObserverType(l,state,UnionType(ul,terms))                                                                   -> typeEqual(t1,expandObserverType(l,state,UnionType(ul,terms)));
    TableType(l1::Loc,k1::Type,v1::Type),TableType(l2::Loc,k2::Type,v2::Type)                                      -> typeEqual(k1,k2) and typeEqual(v1,v2);
    TermType(l1::Loc,n1::Str,args1::[Type]),TermType(l2::Loc,n2::Str,args2::[Type])                                -> if n1=n2 then typesEqual(args1,args2); else false;
    TermType(l1::Loc,n1::Str,args1::[Type]),t2::Type                                                               -> false;
    t1::Type,TermType(l2::Loc,n2::Str,args2::[Type])                                                               -> false;
    FunType(l1::Loc,d1::[Type],r1::Type),FunType(l2::Loc,d2::[Type],r2::Type)                                      -> typeEqual(r1,r2) and typesEqual(d1,d2);
    TypeClosure(f::()->Type),t2::Type                                                                              -> typeEqual(f(),t2);
    t1::Type,TypeClosure(f::()->Type)                                                                              -> typeEqual(t1,f());
    RecordType(l1::Loc,fs1::[TDec]),RecordType(l2::Loc,fs2::[TDec])                                                -> recordTypeEqual(fs1,fs2);
    RecType(l1::Loc,n1::Str,t1::Type),RecType(l2::Loc,n2::Str,t2::Type) when n1=n2                                 -> typeEqual(t1,t2);
    RecType(l1::Loc,n1::Str,t1::Type),t2::Type                                                                     -> typeEqual(substType(RecType(l1,n1,t1),n1,t1),t2);
    t1::Type,RecType(l2::Loc,n2::Str,t2::Type)                                                                     -> typeEqual(t1,substType(RecType(l2,n2,t2),n2,t2));
    UnionType(l1::Loc,terms1::[Type]),UnionType(l2::Loc,terms2::[Type])                                            -> typeSetEqual(terms1,terms2);
    VarType(l1::Loc,n1::Str),VarType(l2::Loc,n2::Str)                                                              -> n1 = n2;
    ForallType(l1::Loc,ns1::[Str],t1::Type),ForallType(l2::Loc,ns2::[Str],t2::Type)                                -> ns1 = ns2 and typeEqual(t1,t2);
    // Allow [] to be polymorphic...
    ListType(l1::Loc,t1::Type),ForallType(l2::Loc,[v1::Str],ListType(l3::Loc,VarType(l4::Loc,v2::Str))) when v1=v2 -> true;
    ForallType(l2::Loc,[v1::Str],ListType(l3::Loc,VarType(l4::Loc,v2::Str))),ListType(l1::Loc,t1::Type) when v1=v2 -> true;
    // Allow Set{} to be polymorphic...
    SetType(l1::Loc,t1::Type),ForallType(l2::Loc,[v1::Str],SetType(l3::Loc,VarType(l4::Loc,v2::Str))) when v1=v2   -> true;
    ForallType(l2::Loc,[v1::Str],SetType(l3::Loc,VarType(l4::Loc,v2::Str))),SetType(l1::Loc,t1::Type) when v1=v2   -> true;
    // Assume that types are free...
    ForallType(l1::Loc,ns1::[Str],t1::Type),t2::Type                                                               -> typeEqual(t1,t2);
    t1::Type,ForallType(l1::Loc,ns2::[Str],t2::Type)                                                               -> typeEqual(t1,t2);
    t1::Type,t2::Type                                                                                              -> false;
  }}

subType(sub::Type,parent::Type)::Bool = { //print[Str]('sub = ' + sub); print[Str]('parent = ' + parent);  
  if sub = parent
  then true;
  else case sub,parent {
    ActType(l1::Loc,exports1::[TDec],handlers1::[MType]),ActType(l2::Loc,exports2::[TDec],handlers2::[MType])      -> actSubType(exports1,exports2,handlers1,handlers2);
    ApplyTypeFun(l::Loc,op::Type,args::[Type]),t2::Type                                                            -> subType(applyTypeFun(l,forceType(op),args),t2);
    t1::Type,ApplyTypeFun(l::Loc,op::Type,args::[Type])                                                            -> subType(t1,applyTypeFun(l,forceType(op),args));
    ExtendedAct(l1::Loc,t1::Type,ds1::[TDec],ms1::[MType]),t2::Type                                                -> subType(flattenAct(l1,t1,ds1,ms1),t2);
    t1::Type,ExtendedAct(l2::Loc,t2::Type,ds2::[TDec],ms2::[MType])                                                -> subType(t1,flattenAct(l2,t2,ds2,ms2));
    ListType(l1::Loc,t1::Type),ListType(l2::Loc,t2::Type)                                                          -> subType(t1,t2);
    BagType(l1::Loc,t1::Type),BagType(l2::Loc,t2::Type)                                                            -> subType(t1,t2);
    SetType(l1::Loc,t1::Type),SetType(l2::Loc,t2::Type)                                                            -> subType(t1,t2);
    TermType(l1::Loc,n1::Str,args1::[Type]),TermType(l2::Loc,n2::Str,args2::[Type])                                -> if n1=n2 then subTypes(args1,args2); else false;
    FunType(l1::Loc,d1::[Type],r1::Type),FunType(l2::Loc,d2::[Type],r2::Type)                                      -> subType(r1,r2) and subTypes(d2,d1);
    TypeClosure(f::()->Type),t2::Type                                                                              -> subType(f(),t2);
    t1::Type,TypeClosure(f::()->Type)                                                                              -> subType(t1,f());
    RecordType(l1::Loc,fs1::[TDec]),RecordType(l2::Loc,fs2::[TDec])                                                -> recordSubType(fs1,fs2);
    RecType(l1::Loc,n1::Str,t1::Type),RecType(l2::Loc,n2::Str,t2::Type) when n1=n2                                 -> subType(t1,t2);
    RecType(l1::Loc,n1::Str,t1::Type),t2::Type                                                                     -> subType(substType(RecType(l1,n1,t1),n1,t1),t2);
    t1::Type,RecType(l2::Loc,n2::Str,t2::Type)                                                                     -> subType(t1,substType(RecType(l2,n2,t2),n2,t2));
    UnionType(l1::Loc,terms1::[Type]),UnionType(l2::Loc,terms2::[Type])                                            -> subTypes(terms1,terms2);
    VarType(l1::Loc,n1::Str),VarType(l2::Loc,n2::Str)                                                              -> n1 = n2;
    ForallType(l1::Loc,ns1::[Str],t1::Type),ForallType(l2::Loc,ns2::[Str],t2::Type)                                -> ns1 = ns2 and subType(t1,t2);
    ListType(l1::Loc,t1::Type),ForallType(l2::Loc,[v1::Str],ListType(l3::Loc,VarType(l4::Loc,v2::Str))) when v1=v2 -> true; // Should these be subtypes...
    ForallType(l2::Loc,[v1::Str],ListType(l3::Loc,VarType(l4::Loc,v2::Str))),ListType(l1::Loc,t1::Type) when v1=v2 -> true;
    SetType(l1::Loc,t1::Type),ForallType(l2::Loc,[v1::Str],SetType(l3::Loc,VarType(l4::Loc,v2::Str))) when v1=v2   -> true;
    ForallType(l2::Loc,[v1::Str],SetType(l3::Loc,VarType(l4::Loc,v2::Str))),SetType(l1::Loc,t1::Type) when v1=v2   -> true;
    ForallType(l1::Loc,ns1::[Str],t1::Type),t2::Type                                                               -> subType(t1,t2);
    t1::Type,ForallType(l1::Loc,ns2::[Str],t2::Type)                                                               -> subType(t1,t2);
    t1,ObservedType(l,state,messages)                                                                              -> subType(t1,expandObservedType(l,state,messages));
    t1,ObserverType(l,state,messages)                                                                              -> subType(t1,expandObserverType(l,state,messages));
    t1,ObservedType(l,state,TypeClosure(f::()->Type))                                                              -> subType(t1,ObservedType(l,state,f()));
    t1,ObserverType(l,state,TypeClosure(f::()->Type))                                                              -> subType(t1,ObserverType(l,state,f()));
    t1::Type,t2::Type                                                                                              -> typeEqual(t1,t2);
  }
}

expandObserverType(l1::Loc,state::Type,messages)::Type = 
  ActType(l1,[],[
    MessageType(l1,[TermType(l1,'Start',[expandObservedType(l1,state,messages),IntType(l1),state])]),
    MessageType(l1,[TermType(l1,'Transition',[expandObservedType(l1,state,messages),IntType(l1),messages,state])])
  ]);

maybe(t::Type)::Type =
  UnionType(Pos(0,0),[TermType(Pos(0,0),'Exactly',[t]),TermType(Pos(0,0),'Nothing',[])]);
    
expandObservedType(l::Loc,state::Type,messages::Type)::Type = 
 ActType(l,
   [Dec(l,'observeState',FunType(l,[],state),FunType(l,[],state)),
    Dec(l,'observeMessage',FunType(l,[UnionType(l,[])],maybe(messages)),FunType(l,[UnionType(l,[])],maybe(messages)))],
   []);

flattenAct(l1::Loc,t::Type,ds1::[TDec],ms1::[MType])::Type =
  case t {
    ActType(l2::Loc,ds2::[TDec],ms2::[MType]) -> ActType(l1,ds1+ds2,ms1+ms2);
    ExtendedAct(l2::Loc,t::Type,ds2::[TDec],ms2::[MType]) -> flattenAct(l1,flattenAct(l2,t,ds2,ms2),ds1,ms1);
    TypeClosure(f::()->Type) -> flattenAct(l1,f(),ds1,ms1);
    RecType(l2::Loc,n::Str,b::Type) -> flattenAct(l1,substType(t,n,b),ds1,ms1);
    t::Type -> throw[Type] TypeError(l1,'unknown type for flatten ' + t);
  }

actEqual(exports1::[TDec],exports2::[TDec],handlers1::[MType],handlers2::[MType])::Bool =
  forall[TDec](fun(d1::TDec)::Bool exists[TDec](fun(d2::TDec)::Bool equalDec(d1,d2),exports2),exports1) and
  forall[TDec](fun(d1::TDec)::Bool exists[TDec](fun(d2::TDec)::Bool equalDec(d1,d2),exports1),exports2) and
  forall[MType](fun(m1::MType)::Bool exists[MType](fun(m2::MType)::Bool equalMessage(m1,m2),handlers2),handlers1) and
  forall[MType](fun(m1::MType)::Bool exists[MType](fun(m2::MType)::Bool equalMessage(m1,m2),handlers1),handlers2);

actSubType(exports1::[TDec],exports2::[TDec],handlers1::[MType],handlers2::[MType])::Bool = {
  let isObservedMessage(d::TDec)::Bool = case d { Dec(l,'observeMessage',t1,t2) -> true; d -> false; }
  in forall[TDec](fun(d2::TDec)::Bool exists[TDec](fun(d1::TDec)::Bool decSubType(d1,d2),reject[TDec](isObservedMessage,exports1)),reject[TDec](isObservedMessage,exports2)) and
     forall[MType](fun(m2::MType)::Bool exists[MType](fun(m1::MType)::Bool messSubType(m1,m2),handlers1),handlers2);
}

equalDec(d1::TDec,d2::TDec)::Bool =
  case d1,d2 {
    Dec(l1::Loc,n1::Str,t1::Type,st1::Type),Dec(l2::Loc,n2::Str,t2::Type,st2::Type) -> n1=n2 and typeEqual(t1,t2);
  }
  
decSubType(d1::TDec,d2::TDec)::Bool =
  case d1,d2 {
    Dec(l1::Loc,n1::Str,t1::Type,st1::Type),Dec(l2::Loc,n2::Str,t2::Type,st2::Type) -> n1=n2 and subType(t1,t2); 
  }

equalMessage(m1::MType,m2::MType)::Bool =
  case m1,m2 {
    MessageType(l1::Loc,ts1::[Type]),MessageType(l2::Loc,ts2::[Type]) -> typesEqual(ts1,ts2);
  }

messSubType(m1::MType,m2::MType)::Bool =
  case m1,m2 {
    MessageType(l1::Loc,ts1::[Type]),MessageType(l2::Loc,ts2::[Type]) -> subTypes(ts1,ts2);
  }

recordTypeEqual(fields1::[TDec],fields2::[TDec])::Bool = 
  forall[TDec](fun(t1::TDec)::Bool exists[TDec](fun(t2::TDec)::Bool decName(t1) = decName(t2) and typeEqual(decType(t1),decType(t2)),fields2),fields1) and
  forall[TDec](fun(t1::TDec)::Bool exists[TDec](fun(t2::TDec)::Bool decName(t1) = decName(t2) and typeEqual(decType(t1),decType(t2)),fields1),fields2);

recordSubType(fields1::[TDec],fields2::[TDec])::Bool = { 
  forall[TDec](fun(t2::TDec)::Bool exists[TDec](fun(t1::TDec)::Bool decName(t1) = decName(t2) and subType(decType(t1),decType(t2)),fields1),fields2);
}

applyTypeFun(l::Loc,op::Type,args::[Type])::Type =
  case op {
    RecType(lr::Loc,n::Str,t::Type) -> applyTypeFun(l,unfoldType(lr,n,t),args);
    TypeFun(l::Loc,names::[Str],t::Type) ->
      if length[Type](args) = length[Str](names)
      then substTypeEnv(zipTypeEnv(names,args),t);
      else throw[Type] TypeError(l,'type fun expects ' + length[Str](names) + ' args, but supplied with ' + length[Type](args));
    op::Type -> throw[Type] TypeError(l,'expecting a type function: ' + op);
  }

unfoldType(l::Loc,n::Str,t::Type)::Type = substType(RecType(l,n,t),n,t);

forceType(t::Type)::Type =
  case t {
    TypeClosure(f::()->Type) -> forceType(f());
    t::Type -> t;
  }

typesEqual(ts1::[Type],ts2::[Type])::Bool =
  case ts1,ts2 {
    [][Type],[][Type] -> true;
    [][Type],ts2::[Type] -> false;
    ts1::[Type],[][Type] -> false;
    t1::Type:ts1::[Type],t2::Type:ts2::[Type] -> typeEqual(t1,t2) and typesEqual(ts1,ts2);
  }

subTypes(ts1::[Type],ts2::[Type])::Bool =
  case ts1,ts2 {
    [][Type],[][Type] -> true;
    [][Type],ts2::[Type] -> false;
    ts1::[Type],[][Type] -> false;
    t1::Type:ts1::[Type],t2::Type:ts2::[Type] -> subType(t1,t2) and subTypes(ts1,ts2);
  }

typeSetEqual(types1::[Type],types2::[Type])::Bool =
  typeSubset(types1,types2) and typeSubset(types2,types1);

typeSubset(sub::[Type],sup::[Type])::Bool =
  case sub {
    [][Type] -> true;
    t::Type:sub::[Type] -> typeMember(t,sup) and typeSubset(sub,sup);
  }

typeMember(t::Type,types::[Type])::Bool =
  case types {
    [][Type] -> false;
    tt::Type:types::[Type] when typeEqual(t,tt) -> true;
    tt::Type:types::[Type] -> typeMember(t,types);
  }


substTypes(newType::Type,n::Str,oldTypes::[Type])::[Type] = {
  //print[Str]('substTypes ' + ppType(newType) + ' ' + n + ' ' + ppTypes(oldTypes));
  case oldTypes {
    [][Type] -> [][Type];
    t::Type:ts::[Type] -> substType(newType,n,t):substTypes(newType,n,ts);
  }}
    
substType(newType::Type,n::Str,oldType::Type)::Type = { 
  //print[Str]('subst type: ' + ppType(newType) + ' ' + n + ' ' + ppType(oldType));
  case oldType {
    ApplyType(l::Loc,m::Str,types::[Type]) -> 
      if m = n
      then ApplyTypeFun(l,newType,substTypes(newType,n,types));
      else ApplyType(l,m,substTypes(newType,n,types));
    ApplyTypeFun(l::Loc,op::Type,args::[Type]) -> ApplyTypeFun(l,substType(newType,n,op),substTypes(newType,n,args));
    ActType(l::Loc,decs::[TDec],handlers::[MType]) -> 
      ActType(l,[substDec(newType,n,d) | d::TDec <- decs],[ substMType(newType,n,m) | m::MType <- handlers]);
    ArrayType(l::Loc,t::Type) -> ArrayType(l,substType(newType,n,t));
    BoolType(l::Loc) -> oldType;
    ExtendedAct(l::Loc,parent::Type,decs::[TDec],ms::[MType]) ->
      ExtendedAct(l,substType(newType,n,parent),[substDec(newType,n,d) | d::TDec <- decs],[ substMType(newType,n,m) | m::MType <- ms]);
    FloatType(l::Loc) -> oldType;
    ForallType(l::Loc,ns::[Str],t::Type) ->  if member[Str](n,ns) then oldType; else ForallType(l,ns,substType(newType,n,t));
    FunType(l::Loc,d::[Type],r::Type) -> FunType(l,substTypes(newType,n,d),substType(newType,n,r));
    IntType(l::Loc) -> oldType;
    ListType(l::Loc,t::Type) -> ListType(l,substType(newType,n,t));
    NullType(l::Loc) -> oldType;
    ObserverType(l::Loc,s::Type,m::Type) -> ObserverType(l,substType(newType,n,s),substType(newType,n,m));
    ObservedType(l::Loc,s::Type,m::Type) -> ObservedType(l,substType(newType,n,s),substType(newType,n,m));
    RecordType(l::Loc,fs::[TDec]) -> RecordType(l,[ Dec(dl,n,substType(newType,n,t),dt) | Dec(dl::Dec,n::Str,t::Type,dt::Type) <- fs ]);
    RecType(l::Loc,a::Str,t::Type) ->  if n = a then oldType; else RecType(l,a,substType(newType,n,t));
    SetType(l::Loc,t::Type) -> SetType(l,substType(newType,n,t));
    StrType(l::Loc) -> oldType;
    TableType(l::Loc,k::Type,v::Type) -> TableType(l,substType(newType,n,k),substType(newType,n,v));
    TermType(l::Loc,f::Str,ts::[Type]) -> TermType(l,f,substTypes(newType,n,ts));
    TypeClosure(f::()->Type) -> oldType; // Type closures should not have free variables.
    TypeFun(l::Loc,ns::[Str],t::Type) -> if member[Str](n,ns) then oldType; else TypeFun(l,ns,substType(newType,n,t));
    UnfoldType(l::Loc,t::Type) -> UnfoldType(l,substType(newType,n,t));
    UnionType(l::Loc,ts::[Type]) -> UnionType(l,substTypes(newType,n,ts));
    VarType(l::Loc,name::Str) -> if name = n then newType; else oldType;
    VoidType(l::Loc) -> oldType;
    UnionRef(l::Loc,t::Type,name::Str) -> UnionRef(l,substType(newType,n,t),name); 
    x::Type -> throw[Type]x;
  }
}
 
substTypesEnv(env::TEnv,types::[Type])::[Type] =
  case types {
    [][Type] -> [][Type];
    t::Type:ts::[Type] -> substTypeEnv(env,t):substTypesEnv(env,ts);
  }
    
substTypeEnv(env::TEnv,oldType::Type)::Type = { //print[Str]('subst type env: ' + oldType);
  case oldType {
    ApplyType(l::Loc,n::Str,types::[Type]) -> 
      let op::Type = lookupType(n,env);
      in if op = null[Type]
         then ApplyType(l,n,substTypesEnv(env,types));
         else ApplyTypeFun(l,op,substTypesEnv(env,types));
    ApplyTypeFun(l::Loc,op::Type,args::[Type]) -> ApplyTypeFun(l,substTypeEnv(env,op),substTypesEnv(env,args));
    ActType(l::Loc,decs::[TDec],handlers::[MType]) -> 
      ActType(l,[substDecEnv(env,d) | d::TDec <- decs],[ substMTypeEnv(env,m) | m::MType <- handlers]);
    ExtendedAct(l::Loc,parent::Type,decs::[TDec],handlers::[MType]) -> 
      ExtendedAct(l,substTypeEnv(env,parent),[substDecEnv(env,d) | d::TDec <- decs],[ substMTypeEnv(env,m) | m::MType <- handlers]);
    ArrayType(l::Loc,t::Type) -> ArrayType(l,substTypeEnv(env,t)); 
    BoolType(l::Loc) -> oldType;
    FloatType(l::Loc) -> oldType;
    ForallType(l::Loc,ns::[Str],t::Type) -> ForallType(l,ns,substTypeEnv(removeFromDom(env,ns),t));
    FieldType(l::Loc,n::Str,t::Type) -> FieldType(l,n,substTypeEnv(env,t));
    FunType(l::Loc,d::[Type],r::Type) -> FunType(l,[substTypeEnv(env,t) | t::Type <- d],substTypeEnv(env,r));
    TaggedFunType(l::Loc,d::[Type],p::Str,r::Type) -> FunType(l,[substTypeEnv(env,t) | t::Type <- d],substTypeEnv(env,r));
    IntType(l::Loc) -> oldType;
    ListType(l::Loc,t::Type) -> ListType(l,substTypeEnv(env,t));
    SetType(l::Loc,t::Type) -> SetType(l,substTypeEnv(env,t));
    BagType(l::Loc,t::Type) -> BagType(l,substTypeEnv(env,t)); 
    NullType(l::Loc) -> oldType;
    ObserverType(l,s,m) -> ObserverType(l,substTypeEnv(env,s),substTypeEnv(env,m));
    ObservedType(l,s,m) -> ObservedType(l,substTypeEnv(env,s),substTypeEnv(env,m));
    RecType(l::Loc,a::Str,t::Type) ->  RecType(l,a,substTypeEnv(removeFromDom(env,[a]),t));
    RecordType(l::Loc,fs::[TDec]) -> RecordType(l,[ Dec(dl,n,substTypeEnv(env,t),dt) | Dec(dl::Dec,n::Str,t::Type,dt::Type) <- fs ]);
    StrType(l::Loc) -> oldType;
    TableType(l::Loc,k::Type,v::Type) -> TableType(l,substTypeEnv(env,k),substTypeEnv(env,v));
    TermType(l::Loc,f::Str,ts::[Type]) -> TermType(l,f,[substTypeEnv(env,t) | t::Type <- ts]);
    TypeClosure(f::()->Type) -> oldType; //TypeClosure(fun['substTypeEnv_closure']()::Type substTypeEnv(env,f()));
    TypeFun(l::Loc,ns::[Str],t::Type) -> TypeFun(l,ns,substTypeEnv(removeFromDom(env,ns),t));
    UnfoldType(l::Loc,t::Type) -> UnfoldType(l,substTypeEnv(env,t));
    UnionType(l::Loc,ts::[Type]) -> UnionType(l,[substTypeEnv(env,t) | t::Type <- ts]);
    VarType(l::Loc,name::Str) -> if member[Str](name,typeEnvDom(env)) then lookupType(name,env); else oldType;
    VoidType(l::Loc) -> oldType;
    UnionRef(l::Loc,t::Type,name::Str) -> UnionRef(l,substTypeEnv(env,t),name); 
    x::Type -> throw[Type] ('substTypeEnv: ' + oldType);
  }
}


zipTypeEnv(ns::[Str],ts::[Type])::TEnv =
  case ns,ts {
    [][Str],[][Type] -> [][TMap];
    n::Str:ns::[Str],t::Type:ts::[Type] -> Map(n,t):zipTypeEnv(ns,ts);
  }
  
lookupType(name::Str,env::TEnv)::Type =
  case env {
    [][TMap] -> null[Type];
    Map(n::Str,t::Type):e::TEnv when n = name -> t;
    m::TMap:e::TEnv -> lookupType(name,e);
  }
  
typeEnvDom(e::TEnv)::[Str] =
  case e {
    [][TMap] -> [][Str];
    Map(n::Str,t::Type):x::TEnv -> n:typeEnvDom(x);
  }
  
removeFromDom(e::TEnv,ns::[Str])::TEnv =
  case e {
    [][TMap] -> [][TMap];
    Map(n::Str,t::Type):e::TEnv when member[Str](n,ns) -> removeFromDom(e,ns);
    Map(n::Str,t::Type):e::TEnv -> Map(n,t):removeFromDom(e,ns);
  }
  
restrictTypeEnv(e::TEnv,ns::[Str])::TEnv =
  case e {
    [][TMap] -> [][TMap];
    Map(n::Str,t::Type):e::TEnv when not(member[Str](n,ns)) -> restrictTypeEnv(e,ns);
    Map(n::Str,t::Type):e::TEnv -> Map(n,t):restrictTypeEnv(e,ns);
  }
  
typeEnvRan(e::TEnv)::[Type] =
  case e {
    [][TMap] -> [][Type];
    Map(n::Str,t::Type):x::TEnv -> t:typeEnvRan(x); 
  }

allEqualTypes(t1::Type,ts::[Type])::Bool =
  case ts {
    [][Type] -> true;
    t2::Type:ts::[Type] when typeEqual(t1,t2) -> allEqualTypes(t1,ts);
    ts::[Type] -> false;
  }
    
substDec(newType::Type,n::Str,d::TDec)::TDec =
  case d {
    Dec(l::Loc,name::Str,t::Type,st::Type) -> Dec(l,name,substType(newType,n,t),st);
  }
  
substDecEnv(env::TEnv,d::TDec)::TDec =
  case d {
    Dec(l::Loc,name::Str,t::Type,st::Type) -> Dec(l,name,substTypeEnv(env,t),st);
  }
    
substMType(newType::Type,n::Str,m::MType)::MType = 
  case m {
    MessageType(l::Loc,ts::[Type]) -> MessageType(l,[ substType(newType,n,t) | t::Type <- ts]);
  }
    
substMTypeEnv(env::TEnv,m::MType)::MType = 
  case m {
    MessageType(l::Loc,ts::[Type]) -> MessageType(l,[ substTypeEnv(env,t) | t::Type <- ts]);
  }

data TypeInfo =
  // Wraps the type generated by the type-checker. Is associated with 
  // expressions in the table of type Hash[AST,TypeInfo] which is the
  // value of the '$TYPEINFO' property in edb...
  JustType(Type);

data Hovver = 
  // Generated by the type checker to provide information about locations.
  // The location provides where the hovver can occur, the boolean is whether
  // a line should be drawn in the editor and the string is the message...
  HovverOver(Loc,Bool,Str);
 
data Pattern = 
  PAdd(Loc,Pattern,Pattern)
| PApplyType(Loc,Pattern,[Type])
| PBagCons(Loc,Pattern,Pattern)
| PBool(Loc,Bool)
| PCons(Loc,Pattern,Pattern)
| PEmptyBag(Loc)
| PEmptySet(Loc)
| PInt(Loc,Int)
| PNil(Loc)
| PNull(Loc)
| PSetCons(Loc,Pattern,Pattern)
| PStr(Loc,Str)
| PTerm(Loc,Str,[Type],[Pattern])
| PVar(Loc,Str,Type);

patternNames(x::Pattern)::[Str] = {
  case x {
    PAdd(l::Loc,p1::Pattern,p2::Pattern) -> patternNames(p1) + patternNames(p2);
    PVar(v0::Loc,v1::Str,v2::Type) -> [v1];
    PTerm(v0::Loc,v1::Str,v2::[Type],v3::[Pattern]) -> [ n | p::Pattern <- v3, n::Str <- patternNames(p) ];
    PApplyType(v0::Loc,v1::Pattern,v2::[Type]) -> patternNames(v1);
    PNil(v0::Loc) -> [];
    PNull(v0::Loc) -> [];
    PInt(v0::Loc,v1::Int) -> [];
    PStr(v0::Loc,v1::Str) -> [];
    PBool(v0::Loc,v1::Bool) -> [];
    PCons(v0::Loc,v1::Pattern,v2::Pattern) -> patternNames(v1) + patternNames(v2);
    PBagCons(v0::Loc,v1::Pattern,v2::Pattern) -> patternNames(v1) + patternNames(v2);
    PEmptyBag(v0::Loc) -> [];
    PSetCons(v0::Loc,v1::Pattern,v2::Pattern) -> patternNames(v1) + patternNames(v2);
    PEmptySet(v0::Loc) -> [];
  }
}

patternLoc(x::Pattern)::Loc = {
  case x {
    PAdd(l::Loc,p1::Pattern,p2::Pattern) -> l;
    PVar(l::Loc,v1::Str,v2::Type) -> l;
    PTerm(l::Loc,v1::Str,v2::[Type],v3::[Pattern]) -> l;
    PApplyType(l::Loc,v1::Pattern,v2::[Type]) -> l;
    PNil(l::Loc) -> l;
    PNull(l::Loc) -> l;
    PInt(l::Loc,v1::Int) -> l;
    PStr(l::Loc,v1::Str) -> l;
    PBool(l::Loc,v1::Bool) -> l;
    PCons(l::Loc,v1::Pattern,v2::Pattern) -> l;
    PBagCons(l::Loc,v1::Pattern,v2::Pattern) -> l;
    PEmptyBag(l::Loc) -> l;
    PSetCons(l::Loc,v1::Pattern,v2::Pattern) -> l;
    PEmptySet(l::Loc) -> l;
  }
}

data TBind = 
   TypeBind(Loc,Str,Type,AST)
|  CnstrBind(Loc,Str,Type,AST)
|  FunBind(Loc,Str,[Pattern],Type,Type,AST,AST)
|  FunBinds(Str,[FunCase])
|  Binding(Loc,Str,Type,Type,AST)
|  DataBind(Loc,Str,Type,AST);

data FunCase = FunCase(Loc,[Pattern],Type,AST,AST);

mergeFunDefs(defs::[TBind])::[TBind] = 
  letrec
    getFunCases(n::Str,defs::[TBind])::[FunCase] =
      case defs {
        [] -> [];
        FunBind(l,n0,args,t,dt,e,g):defs when n = n0 -> FunCase(l,args,t,g,e):getFunCases(n,defs);
        def:defs -> getFunCases(n,defs);
      }
    removeFunCases(n::Str,defs::[TBind])::[TBind] =
      case defs {
        [] -> [];
        FunBind(l,n0,args,t,dt,e,g):defs when n = n0 -> removeFunCases(n,defs);
        def:defs -> def:removeFunCases(n,defs);
      }
    isPVar(p::Pattern)::Bool = case p { PVar(l,v,t) -> true; p -> false; }
  in { 
    case defs {
      [] -> [];
      FunBind(l,n,args,t,dt,e,g):defs ->
        let cases::[FunCase] = getFunCases(n,defs);
        in if cases = [] and forall[Pattern](isPVar,args)
           then FunBind(l,n,args,t,dt,e,g):mergeFunDefs(defs);
           else {
             let defs::[TBind] = removeFunCases(n,defs);
             in {
              FunBinds(n,FunCase(l,args,t,g,e):cases):mergeFunDefs(defs);
             }
           }
      def:defs -> def:mergeFunDefs(defs);
    }
  }

expandFunDefs(defs::[TBind])::[TBind] =
  case defs {
    [] -> [];
    FunBinds(n,FunCase(l,args,t,g,e):cases):defs ->
      let names::[Str] = [ '$' + i | i <- 0..length[Pattern](args) ];
      in Binding(l,n,t,t,FunExp(l,StrExp(l,n),
           [ Dec(l,n,null[Type],null[Type]) | n <- names ],
           t,
           Case(l,[],[ Var(l,n) | n <- names ],[ BArm(l,args,g,e) | FunCase(l,args,t,g,e) <- FunCase(l,args,t,g,e):cases ]))):expandFunDefs(defs);
    d:defs -> d:expandFunDefs(defs);
  }

isBinding(b::TBind)::Bool =
  case b {
    Binding(l::Loc,n::Str,t::Type,st::Type,e::AST) -> true;
    b::TBind -> false;
  }

isFunBind(b::TBind)::Bool =
  case b {
    FunBind(l::Loc,n::Str,args::[Pattern],t::Type,st::Type,g::AST,e::AST) -> true;
    b::TBind -> false;
  }

bindingName(b::TBind)::Str =
  case b {
    TypeBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v1;
    CnstrBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v1;
    FunBind(v0::Loc,v1::Str,v2::[Pattern],v3::Type,v4::Type,v5::AST,v6::AST) -> v1;
    FunBinds(n,cases) -> n;
    Binding(v0::Loc,v1::Str,v2::Type,v3::Type,v4::AST) -> v1;
    DataBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v1;
  }

bindingLoc(b::TBind)::Loc =
  case b {
    TypeBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v0;
    CnstrBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v0;
    FunBind(v0::Loc,v1::Str,v2::[Pattern],v3::Type,v4::Type,v5::AST,v6::AST) -> v0;
    FunBinds(n,FunCase(l,args,t,g,e):cases) -> l;
    Binding(v0::Loc,v1::Str,v2::Type,v3::Type,v4::AST) -> v0;
    DataBind(v0::Loc,v1::Str,v2::Type,v3::AST) -> v0;
  }

data Arm = 
  BArm(Loc,[Pattern],AST,AST)
| LArm(Loc,[Pattern],[[TBind]],AST,AST);

data Qualifier =
   BQual(Loc,Pattern,AST)
|  PQual(Loc,AST);

data CaseTermArm = TArm(Str,AST);

data CaseIntsArm = IArm(Int,AST);

data CaseStrsArm = SArm(Str,AST);

data CaseBoolsArm = BoolArm(Bool,AST);

data AST = 
  ActExp(Loc,AST,[TDec],[Str],AST,[TBind],AST,[Arm])
| Apply(Loc,AST,[AST])
| ApplyTypeExp(Loc,AST,[Type])
| ArrayRef(Loc,AST,AST)
| ArrayUpdate(Loc,AST,AST,AST)
| BagExp(Loc,[AST])
| Become(Loc,AST)
| BinExp(Loc,AST,Str,AST)
| Block(Loc,[AST])
| BoolExp(Loc,Bool)
| Case(Loc,[TDec],[AST],[Arm])
| CaseAdd(Loc,AST,AST,AST)
| CaseBool(Loc,AST,[CaseBoolsArm],AST)
| CaseError(Loc,AST)
| CaseInt(Loc,AST,[CaseIntsArm],AST)
| CaseList(Loc,AST,AST,AST,AST)
| CaseSet(Loc,AST,AST,AST)
| CaseStr(Loc,AST,[CaseStrsArm],AST)
| CaseTerm(Loc,AST,[CaseTermArm],AST)
| Cmp(Loc,AST,[Qualifier])
| Cons(AST,AST)
| For(Loc,Pattern,AST,AST)
| FunExp(Loc,AST,[TDec],Type,AST)
| Grab(Loc,[DRef],AST)
| If(Loc,AST,AST,AST)
| IntExp(Loc,Int)
| FloatExp(Loc,Float)
| Fold(Loc,Type,AST)
| Head(AST)
| Let(Loc,[TBind],AST)
| Letrec(Loc,[TBind],AST)
| List(Loc,[AST])
| Module(Str,Str,[Str],[Str],[TDec],Null,[TBind])
| New(Loc,AST,[AST])
| NewArray(Loc,Type,AST)
| NewJava(Loc,Str,Type,[AST])
| NewTable(Loc,Type,Type)
| Not(Loc,AST)
| Now(Loc)
| NullExp(Loc)
| PLet(Loc,[TBind],AST)
| Probably(Loc,AST,Type,AST,AST)
| Record(Loc,[TBind])
| RefSuper(Loc,Str)
| Ref(Loc,AST,Str)
| Self(Loc)
| Send(Loc,AST,AST)
| SendSuper(Loc,AST)
| SendTimeSuper(Loc)
| SetExp(Loc,[AST])
| StrExp(Loc,Str)
| Tail(AST)
| Term(Loc,Str,[Type],[AST])
| TermRef(AST,Int)
| Throw(Loc,Type,AST)
| Try(Loc,AST,[Arm])
| Update(Loc,Str,AST)
| Unfold(Loc,Type,AST)
| Var(Loc,Str);

moduleExportedMethodNames(module::AST)::[Str] =
  case module {
    Module(path,name,exports,imports,x,y,defs) ->
     [ bindingName(b) | b <- defs, ?isFunBind(b), ?member[Str](bindingName(b),exports) ];
    module -> [];
  }

data TVar = V(Int);

data JType = 
  JIntegerType
| JStringType
| JBooleanType
| JDoubleType
| JListType(JType)
| JFunType([JType],JType)
| JTermType
| JActorType
| JObject
| JNullType(JType)
| JUnknown(TVar);

data JMod = JModule(Str,[Str],[Str],[JMethodDef],[JFieldDef]);

data JFieldDef = JField(Str,JType,JExp);

data JMethodDef = JMethod(Str,[JDeclaration],JCommand);

data JDeclaration = JDec(Str,JType);

data JConst =
  JConstInt(Int)
| JConstStr(Str)
| JConstBool(Bool)
| JConstDouble(Float);


data JExp = 
  JApply(JExp,[JExp])
| JArrayRef(JExp,JExp)
| JArrayUpdate(JExp,JExp,JExp)
| JBag(JType,[JExp])
| JBecome(JExp,[JExp])
| JBehaviour([Str],[JFieldDef],[JMethodDef],JExp,JExp,JCommand)
| JBinExp(JExp,Str,JExp)
| JCast(JType,JExp)
| JCastp(JType,JType,JExp)
| JCmpExp(JCmp)
| JCommandExp(JCommand,JType)
| JConstExp(JConst)
| JError(JExp)
| JExtendedBehaviour([Str],JExp,[JFieldDef],[JMethodDef],JExp,JExp,JCommand)  // Merge into the above once bootstrapped.
| JFlatten(JExp)
| JFun(JExp,[JDeclaration],JType,JCommand)
| JGrab([JExp],JExp)
| JHead(JExp)
| JIfExp(JExp,JExp,JExp)
| JList(JType,[JExp])
| JMapFun(JExp,JExp)
| JMethodCall(Str,[JExp])
| JNew(JExp,[JExp])
| JNewArray(JExp)
| JNewJava(Str,[JExp])
| JNewTable
| JNil(JType)
| JNot(JExp)
| JNow
| JNull
| JProbably(JExp,JExp,JExp)
| JRecord([JFieldDef])
| JRef(JExp,Str)
| JRefSuper(Str)
| JSelf
| JSend(JExp,Str,[JExp])
| JSendSuper(JExp)
| JSendTimeSuper
| JSet(JType,[JExp])
| JTail(JExp)
| JTerm(Str,[JExp])
| JTermRef(JExp,Int)
| JTry(JExp,Str,JCommand)
| JVar(Str,JType);

data JCmp =
  JCmpList(JExp)
| JCmpOuter(Str,JExp,JCmp)
| JCmpIf(JExp,JCmp)
| JCmpBind(Str,JExp,JCmp);

data JCase = JCaseOf(JConst,JCommand);
data JTermArm = JTArm(Str,Int,JCommand);
data JIntArm = JIArm(Int,JCommand);
data JStrArm = JSArm(Str,JCommand);
data JBoolArm = JBArm(Bool,JCommand);

data JCommand = 
  JBlock([JCommand])
| JCaseBool(JExp,[JBoolArm],JCommand)
| JCaseInt(JExp,[JIntArm],JCommand)
| JCaseList(JExp,JCommand,JCommand,JCommand)
| JCaseStr(JExp,[JStrArm],JCommand)
| JCaseTerm(JExp,[JTermArm],JCommand)
| JFor(Str,Str,JExp,JCommand)
| JIfCommand(JExp,JCommand,JCommand)
| JLet([JFieldDef],JCommand)
| JLetRec([JFieldDef],JCommand)
| JPLet([JFieldDef],JCommand)
| JReturn(JExp)
| JStatement(JExp)
| JSwitch(JExp,[JCase],JCommand)
| JSwitchList(JExp,JCommand,JCommand,JCommand)
| JUpdate(Str,JExp);
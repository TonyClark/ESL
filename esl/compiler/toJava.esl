export moduleToJava, main;

import 
  'esl/tables.esl',
  'esl/lists.esl',
  'esl/compiler/cases.esl', 
  'esl/compiler/types.esl';
 
defToField(d::TBind)::JFieldDef = {
  case d {
    Binding(l::Loc,n::Str,t::Type,st::Type,e::AST) -> JField(n,null[JType],expToJExp(e));
    FunBind(l::Loc,n::Str,args::[Pattern],t::Type,st::Type,e::AST,BoolExp(bl::Loc,true)) ->  
      let formals::[TDec] = [ Dec(l,n,t,st) | PVar(l::Loc,n::Str,t::Type) <- args ]; 
      in JField(n,null[JType],expToJExp(FunExp(l,StrExp(l,n),formals,t,e)));
    FunBind(l::Loc,n::Str,args::[Pattern],t::Type,st::Type,e::AST,g::AST) ->
      let formals::[TDec] = [ Dec(l,n,t,st) | PVar(l::Loc,n::Str,t::Type) <- args ]; 
      in JField(n,null[JType],expToJExp(FunExp(l,StrExp(l,n),formals,t,If(l,g,e,Throw(l,t,StrExp(l,'guard failed for ' + n)))))); 
  }  
} 

decToJDec(d::TDec)::JDeclaration =
  case d {
    Dec(l::Loc,n::Str,t::Type,st::Type) -> JDec(n,null[JType]);
  }

expsToJCommands(cs::[AST],isLast::Bool)::[JCommand] = 
  case cs {
    [][AST] -> [][JCommand];
    [c::AST] -> [expToJCommand(c,isLast)];
    c::AST:cs::[AST] -> expToJCommand(c,false):expsToJCommands(cs,isLast);
  }
 
expToJCommand(c::AST,isLast::Bool)::JCommand = 
  case c {
    Block(l::Loc,[][AST]) when isLast                                   -> JReturn(JNull);
    Block(l::Loc,[][AST])                                               -> JBlock([][JCommand]);
    Block(l::Loc,[e::AST])                                              -> expToJCommand(e,isLast); 
    Block(l::Loc,es::[AST])                                             -> JBlock([ expToJCommand(e,false) | e::AST <- butlast[AST](es) ] + [expToJCommand(last[AST](es),isLast)]);
    Update(l::Loc,n::Str,e::AST) when isLast                            -> JBlock([JUpdate(n,expToJExp(e)),JReturn(JNull)]);
    Update(l::Loc,n::Str,e::AST)                                        -> JUpdate(n,expToJExp(e));
    If(l::Loc,e1::AST,e2::AST,e3::AST)                                  -> JIfCommand(expToJExp(e1),expToJCommand(e2,isLast),expToJCommand(e3,isLast));
    CaseList(l::Loc,e::AST,cons::AST,nil::AST,alt::AST)                 -> JCaseList(expToJExp(e),expToJCommand(cons,isLast),expToJCommand(nil,isLast),expToJCommand(alt,isLast));
    CaseTerm(l::Loc,e::AST,arms::[CaseTermArm],alt::AST)                -> JCaseTerm(expToJExp(e),termArmsToJTermArms(arms,isLast),expToJCommand(alt,isLast));
    CaseInt(l::Loc,e::AST,arms::[CaseIntsArm],alt::AST)                 -> JCaseInt(expToJExp(e),intArmsToJIntArms(arms,isLast),expToJCommand(alt,isLast));
    CaseStr(l::Loc,e::AST,arms::[CaseStrsArm],alt::AST)                 -> JCaseStr(expToJExp(e),strArmsToJStrArms(arms,isLast),expToJCommand(alt,isLast));
    CaseBool(l::Loc,e::AST,arms::[CaseBoolsArm],alt::AST)               -> JCaseBool(expToJExp(e),boolArmsToJBoolArms(arms,isLast),expToJCommand(alt,isLast));
    Let(l::Loc,bs::[TBind],e::AST)                                      -> JLet([defToField(b) | b::TBind <- bs],expToJCommand(e,isLast));
    Letrec(l::Loc,bs::[TBind],e::AST)                                   -> JLetRec([defToField(b) | b::TBind <- bs],expToJCommand(e,true));
    For(l1::Loc,PVar(l2::Loc,n::Str,t::Type),e::AST,b::AST) when isLast -> JBlock([JFor(newName(),n,expToJExp(e),expToJCommand(b,false)),JReturn(JNull)]); 
    For(l1::Loc,PVar(l2::Loc,n::Str,t::Type),e::AST,b::AST)             -> JFor(newName(),n,expToJExp(e),expToJCommand(b,false));
    For(l::Loc,p::Pattern,e::AST,b::AST) -> 
      let opName::Str = newName(); varName::Str = newName();
      in expToJCommand(For(l,PVar(l,varName,null[Type]),e,Let(l,[Binding(l,opName,null[Type],null[Type],FunExp(l,StrExp(l,'forp'),[],null[Type],Case(l,[][TDec],[Var(l,varName)],[BArm(l,[p],BoolExp(l,true),b),BArm(l,[PVar(l,'$$$',null[Type])],BoolExp(l,true),Block(l,[]))])))],Apply(l,Var(l,opName),[]))),isLast);
    PLet(l::Loc,bs::[TBind],e::AST)                                     -> JPLet([defToField(b) | b::TBind <- bs],expToJCommand(e,isLast));
    e::AST when isLast                                                  -> JReturn(expToJExp(e));
    e::AST                                                              -> JStatement(expToJExp(e)); 
  }

expsToJExps(es::[AST])::[JExp] =
  map[AST,JExp](fun(e::AST)::JExp expToJExp(e),es);

termArmsToJTermArms(arms::[CaseTermArm],isLast::Bool)::[JTermArm] =
  case arms {
    [][CaseTermArm] -> [][JTermArm];
    TArm(n::Str,e::AST):arms::[CaseTermArm] -> JTArm(n,0,expToJCommand(e,isLast)):termArmsToJTermArms(arms,isLast); 
  }

intArmsToJIntArms(arms::[CaseIntsArm],isLast::Bool)::[JIntArm] =
  case arms {
    [][CaseIntsArm] -> [][JIntArm];
    IArm(n::Int,e::AST):arms::[CaseIntsArm] -> JIArm(n,expToJCommand(e,isLast)):intArmsToJIntArms(arms,isLast); 
  }

strArmsToJStrArms(arms::[CaseStrsArm],isLast::Bool)::[JStrArm] =
  case arms {
    [][CaseStrsArm] -> [][JStrArm];
    SArm(s::Str,e::AST):arms::[CaseStrsArm] -> JSArm(s,expToJCommand(e,isLast)):strArmsToJStrArms(arms,isLast); 
  }
  
boolArmsToJBoolArms(arms::[CaseBoolsArm],isLast::Bool)::[JBoolArm] =
  case arms {
    [][CaseBoolsArm] -> [][JBoolArm];
    BoolArm(b::Bool,e::AST):arms::[CaseBoolsArm] -> JBArm(b,expToJCommand(e,isLast)):boolArmsToJBoolArms(arms,isLast); 
  }

opToJOp(op::Str)::Str =
  case op { 
    '@' -> 'at';
    '+' -> 'add';
    '-' -> 'sub';
    '*' -> 'mul';
    '/' -> 'div';
    '%' -> 'mod';
    '>' -> 'gre';
    '>=' -> 'greql';
    '<' -> 'less';
    '<=' -> 'lesseql';
    '=' -> 'eql';
    '<>' -> 'neql';
    ':' -> 'cons';
    '..' -> 'to';
    'or' -> 'or';
    'and' -> 'and';
    'andalso' -> 'andalso';
    'orelse' -> 'orelse';
  }

caseToJExp(l::Loc,es::[AST],arms::[Arm])::JExp =
  let bindings::[TBind] = [ Binding(l,newName(),null[Type],null[Type],e)  | e::AST <- es ]; in
  let names::[Str] = [ n | Binding(l::Loc,n::Str,dt::Type,t::Type,e::AST) <- bindings ];
  in expToJExp(Let(l,bindings,translateCases(Case(l,[],[Var(l,n) | n::Str <- names],arms))));

expToJExp(e::AST)::JExp =
  case e {
    Apply(l::Loc,op::AST,args::[AST])                                                                    -> JApply(expToJExp(op),expsToJExps(args));
    ArrayUpdate(l::Loc,a::AST,i::AST,v::AST)                                                             -> JArrayUpdate(expToJExp(a),expToJExp(i),expToJExp(v)); 
    ArrayRef(l::Loc,a::AST,i::AST)                                                                       -> JArrayRef(expToJExp(a),expToJExp(i));
    IntExp(l::Loc,n::Int)                                                                                -> JConstExp(JConstInt(n));
    StrExp(l::Loc,s::Str)                                                                                -> JConstExp(JConstStr(s));
    BoolExp(l::Loc,b::Bool)                                                                              -> JConstExp(JConstBool(b));
    FloatExp(l::Loc,f::Float)                                                                            -> JConstExp(JConstDouble(f)); 
    ApplyTypeExp(l1::Loc,List(l2::Loc,[][AST]),[t::Type])                                                -> JNil(null[JType]);
    ApplyTypeExp(l1::Loc,NullExp(l2::Loc),[t::Type])                                                     -> JNull;
    List(l::Loc,es::[AST])                                                                               -> JList(null[JType],expsToJExps(es));
    SetExp(l::Loc,es::[AST])                                                                             -> JSet(null[JType],expsToJExps(es));
    BagExp(l::Loc,es::[AST])                                                                             -> JBag(null[JType],expsToJExps(es));
    Term(l::Loc,n::Str,ts::[Type],es::[AST])                                                             -> JTerm(n,expsToJExps(es)); 
    Case(l::Loc,ds::[TDec],es::[AST],arms::[Arm])                                                        -> caseToJExp(l,es,arms);
    CaseAdd(l::Loc,s::AST,handler::AST,fail::AST)                                                        -> expToJExp(Apply(l,Var(l,'$ndCase'),[s,handler,fail]));
    CaseList(l::Loc,list::AST,cons::AST,nil::AST,alt::AST)                                               -> JCommandExp(expToJCommand(e,true),null[JType]);
    CaseTerm(l::Loc,list::AST,arms::[CaseTermArm],alt::AST)                                              -> JCommandExp(expToJCommand(e,true),null[JType]);
    CaseStr(l::Loc,s::AST,arms::[CaseStrsArm],alt::AST)                                                  -> JCommandExp(expToJCommand(e,true),null[JType]);
    CaseBool(l::Loc,s::AST,arms::[CaseBoolsArm],alt::AST)                                                -> JCommandExp(expToJCommand(e,true),null[JType]);
    CaseSet(l::Loc,s::AST,handler::AST,fail::AST)                                                        -> expToJExp(Apply(l,Var(l,'$ndCase'),[s,handler,fail]));
    Head(e::AST)                                                                                         -> JHead(expToJExp(e));
    Tail(e::AST)                                                                                         -> JTail(expToJExp(e));
    ApplyTypeExp(l::Loc,e::AST,ts::[Type])                                                               -> expToJExp(e);
    CaseError(l::Loc,e::AST)                                                                             -> JError(JBinExp(JConstExp(JConstStr('case error at ' + l)),'add',expToJExp(e)));
    NullExp(l::Loc)                                                                                      -> JNull;
    Var(l::Loc,n::Str)                                                                                   -> JVar(n,null[JType]); 
    Let(l::Loc,bs::[TBind],body::AST)                                                                    -> JCommandExp(expToJCommand(e,true),null[JType]);
    Letrec(l::Loc,bs::[TBind],body::AST)                                                                 -> JCommandExp(expToJCommand(e,true),null[JType]);
    Throw(l::Loc,t::Type,e::AST)                                                                         -> JError(expToJExp(e));
    BinExp(l::Loc,e1::AST,op::Str,e2::AST)                                                               -> JBinExp(expToJExp(e1),opToJOp(op),expToJExp(e2));
    Become(l::Loc,Apply(al::Loc,b::AST,args::[AST]))                                                     -> JBecome(expToJExp(b),expsToJExps(args));
    Block(l::Loc,[][AST])                                                                                -> JNull;
    Block(l::Loc,[e::AST])                                                                               -> expToJExp(e); 
    Block(l::Loc,es::[AST])                                                                              -> JCommandExp(JBlock(expsToJCommands(es,true)),null[JType]); 
    If(l::Loc,e1::AST,e2::AST,e3::AST)                                                                   -> JCommandExp(JIfCommand(expToJExp(e1),expToJCommand(e2,true),expToJCommand(e3,true)),null[JType]);
    FunExp(l::Loc,n::AST,args::[TDec],t::Type,body::AST)                                                 -> JFun(expToJExp(n),map[TDec,JDeclaration](fun(d::TDec)::JDeclaration decToJDec(d),args),JFunType([null[JType] | a::TDec <- args],null[JType]),expToJCommand(body,true));
    TermRef(e::AST,i::Int)                                                                               -> JTermRef(expToJExp(e),i);
    Cmp(l::Loc,e::AST,qs::[Qualifier]) when exists[Qualifier](isBindingQualifier,qs) and forall[Qualifier](isSimpleQualifier,qs) -> JCmpExp(cmpToJCmp(e,qs)); 
    Cmp(l::Loc,e::AST,qs::[Qualifier])                                                                   -> cmpToJExp(e,qs);
    Not(l::Loc,e::AST)                                                                                   -> JNot(expToJExp(e)); 
    New(l::Loc,b::AST,args::[AST])                                                                       -> JNew(expToJExp(b),expsToJExps(args));
    NewArray(l::Loc,t::Type,i::AST)                                                                      -> JNewArray(expToJExp(i)); 
    NewJava(l::Loc,n::Str,t::Type,args::[AST])                                                           -> JNewJava(n,expsToJExps(args));
    NewTable(l::Loc,key::Type,value::Type)                                                               -> JNewTable;
    Record(l::Loc,fs::[TBind])                                                                           -> JRecord([ JField(n,null[JType],expToJExp(e)) | Binding(bl::Loc,n::Str,t::Type,dt::Type,e::AST) <- fs ]);
    Send(l::Loc,a::AST,Term(lt::Loc,n::Str,ts::[Type],es::[AST]))                                        -> JSend(expToJExp(a),n,expsToJExps(es)); 
    SendTimeSuper(l::Loc)                                                                                -> JSendTimeSuper;
    SendSuper(l::Loc,e::AST)                                                                             -> JSendSuper(expToJExp(e)); 
    Self(l::Loc)                                                                                         -> JSelf;
    Fold(l::Loc,t::Type,e::AST)                                                                          -> expToJExp(e);
    Now(l::Loc)                                                                                          -> JNow; 
    Ref(l::Loc,e::AST,n::Str)                                                                            -> JRef(expToJExp(e),n);
    RefSuper(l::Loc,n::Str)                                                                              -> JRefSuper(n);
    For(l1::Loc,p::Pattern,l2::AST,c::AST)                                                               -> JCommandExp(expToJCommand(e,true),null[JType]);
    Grab(l::Loc,refs::[DRef],e::AST)                                                                     -> JGrab(refsToJExps(refs),expToJExp(e));
    Update(l::Loc,n::Str,v::AST)                                                                         -> JCommandExp(expToJCommand(e,true),null[JType]);
    Probably(l::Loc,e::AST,t::Type,e1::AST,e2::AST)                                                      -> JProbably(expToJExp(e),expToJExp(e1),expToJExp(e2));
    Try(l::Loc,e::AST,arms::[Arm])                                                                       -> JTry(expToJExp(e),'$x',expToJCommand(Case(l,[][TDec],[Var(l,'$x')],arms),true)); 
    ActExp(l::Loc,name::AST,decs::[TDec],exports::[Str],parent::AST,defs::[TBind],init::AST,arms::[Arm]) -> actToJava(name,decs,exports,parent,defs,init,arms);
  }

isSimpleQualifier(q::Qualifier)::Bool = {
  case q {
    BQual(l,PVar(vl,n,t),e) -> true;
    BQual(l,p,e)            -> false;
    q                       -> true;
  }
}

isBindingQualifier(q::Qualifier)::Bool = {
  case q {
    BQual(l,p,e)            -> true;
    q                       -> false;
  }
}

cmpToJCmp(e::AST,qs::[Qualifier])::JCmp =
  letrec 
    inner(qs::[Qualifier])::JCmp =
      case qs {
        [] -> JCmpList(expToJExp(e));
        BQual(l,PVar(vl,n,t),listExp):qs -> JCmpBind(n,expToJExp(listExp),inner(qs));
        PQual(l,p):qs -> JCmpIf(expToJExp(p),inner(qs));
      }
  in {
    case qs {
      [] -> JCmpList(expToJExp(e));
      BQual(l,PVar(vl,n,t),listExp):qs -> JCmpOuter(n,expToJExp(listExp),inner(qs));
      PQual(l,p):qs -> JCmpIf(expToJExp(p),cmpToJCmp(e,qs));
    }
  }

refsToJExps(refs::[DRef])::[JExp] = { 
  case refs {
    [][DRef] -> [][JExp];
    VarDynamicRef(l::Loc,Var(vl::Loc,n::Str)):refs::[DRef] -> JVar(n,null[JType]):refsToJExps(refs); 
    ActorDynamicRef(l::Loc,e::AST,n::Str):refs::[DRef] -> JRef(expToJExp(e),n):refsToJExps(refs);
  }
}

actToJava(name::AST,decs::[TDec],exports::[Str],parent::AST,defs::[TBind],init::AST,arms::[Arm])::JExp = 
  if parent = null[AST]
  then simpleActToJava(name,decs,exports,defs,init,arms);
  else extendedActToJava(name,decs,exports,parent,defs,init,arms);

simpleActToJava(name::AST,decs::[TDec],exports::[Str],defs::[TBind],init::AST,arms::[Arm])::JExp = 
  let timeArms::[Arm] = select[Arm](isTimeArm,arms); in
  let nonTimeArms::[Arm] = reject[Arm](isTimeArm,arms); in
  let timeCommand::JCommand = if timeArms = [] then JBlock([]); else timeArmsToJCommand(timeArms); in
  let f::AST = FunExp(Pos(0,0),name,[Dec(Pos(0,0),'$m',null[Type],null[Type])],VoidType(Pos(0,0)),Case(Pos(0,0),[][TDec],[Var(Pos(0,0),'$m')],nonTimeArms));
  in JBehaviour(exports,[defToField(b) | b::TBind <- defs],expToJExp(init),expToJExp(f),timeCommand); 

extendedActToJava(name::AST,decs::[TDec],exports::[Str],parent::AST,defs::[TBind],init::AST,arms::[Arm])::JExp = 
  let p0::Loc = Pos(0,0); in
  let timeSuper::Arm = BArm(p0,[PTerm(p0,'Time',[],[PVar(p0,'$',null[Type])])],BoolExp(p0,true),SendTimeSuper(p0)); in
  let timeArms::[Arm] = select[Arm](isTimeArm,arms) + [timeSuper]; in
  let messageSuper::Arm = BArm(p0,[PVar(p0,'$m',null[Type])],BoolExp(p0,true),Block(p0,[SendSuper(p0,Var(p0,'$m')),NullExp(p0)])); in
  let nonTimeArms::[Arm] = reject[Arm](isTimeArm,arms) + [messageSuper]; in
  let timeCommand::JCommand = if timeArms = [] then JBlock([]); else timeArmsToJCommand(timeArms); in
  let f::AST = FunExp(Pos(0,0),name,[Dec(Pos(0,0),'$m',null[Type],null[Type])],VoidType(Pos(0,0)),Case(Pos(0,0),[][TDec],[Var(Pos(0,0),'$m')],nonTimeArms));
  in JExtendedBehaviour(exports,expToJExp(parent),[defToField(b) | b::TBind <- defs],expToJExp(init),expToJExp(f),timeCommand); 

isTimeArm(a::Arm)::Bool =
  case a {
    BArm(l::Loc,[PTerm(pl::Loc,'Time',ts::[Type],ps::[Pattern])],g::AST,e::AST) -> true;
    a::Arm -> false;
  }

timeArmsToJCommand(arms::[Arm])::JCommand =

  // The time arms are all expected to be in the form Time(p) so a sequence of them can be turned into a
  // simple nested if...
  
  case arms {
    [][Arm] -> JBlock([]);
    BArm(l::Loc,[PTerm(tl::Loc,'Time',[][Type],[PVar(vl::Loc,n::Str,t::Type)])],g::AST,e::AST):arms::[Arm] ->
      JLet([JField(n,null[JType],JVar('$t',null[JType]))],JIfCommand(expToJExp(g),expToJCommand(e,false),timeArmsToJCommand(arms)));
    BArm(l::Loc,[PTerm(tl::Loc,'Time',[][Type],[PInt(vl::Loc,n::Int)])],BoolExp(bl::Loc,true),e::AST):arms::[Arm] ->
      JIfCommand(JBinExp(JVar('$t',null[JType]),'eq',JConstExp(JConstInt(n))),expToJCommand(e,false),timeArmsToJCommand(arms));
  }

cmpToJExp(e::AST,qs::[Qualifier])::JExp = 
  case qs {
    [][Qualifier] -> JList(null[JType],[expToJExp(e)]);
    BQual(l::Loc,p::Pattern,v::AST):qs::[Qualifier] -> 
      let f::AST = FunExp(Pos(0,0),StrExp(Pos(0,0),'qual'),[Dec(Pos(0,0),'$qualArg',null[Type],null[Type])],null[Type],Case(Pos(0,0),[],[Var(Pos(0,0),'$qualArg')],[
            BArm(Pos(0,0),[p],BoolExp(Pos(0,0),true),List(Pos(0,0),[Cmp(Pos(0,0),e,qs)])),
            BArm(Pos(0,0),[PVar(Pos(0,0),'_0',null[Type])],BoolExp(Pos(0,0),true),List(Pos(0,0),[][AST]))
          ]));
      in JFlatten(JFlatten(JMapFun(expToJExp(f),expToJExp(v)))); 
    PQual(l::Loc,p::AST):qs::[Qualifier] -> JIfExp(expToJExp(p),cmpToJExp(e,qs),JNil(null[JType]));
  }

moduleToJava(module::AST)::JMod =
  case module {
    Module(path::Str,name::Str,exports::[Str],imports::[Str],x::Void,y::Void,defs::[TBind]) ->  
      renameJVarsModule(JModule(name,exports,imports,[ defToField(d) | d::TBind <- expandFunDefs(mergeFunDefs(defs)),?(isBinding(d) or isFunBind(d)) ]));     
  }

renameJVarsModule(m::JMod)::JMod  =
  case m {
    JModule(name::Str,exports::[Str],imports::[Str],fs::[JFieldDef]) -> 
      let fieldNames::[Str] = [ n | JField(n::Str,t::JType,e::JExp) <- fs ];
      in JModule(name,exports,imports,[ JField(n,t,renameJVarsExp(e,fieldNames,emptyTable[Str,Str])) | JField(n::Str,t::JType,e::JExp) <- fs ]);
  }

renameJVarsExp(e::JExp,vars::[Str],env::Table[Str,Str])::JExp = {
  case e {
    JFun(v0::JExp,v1::[JDeclaration],v2::JType,v3::JCommand) -> {
      let boundNames::[Str] = [ n | JDec(n::Str,t::JType) <- v1 ];
      in {
        if exists[Str](fun(n::Str)::Bool member[Str](n,boundNames),vars)
        then 
          let newNames::[Str] = [ newName() | n::Str <- boundNames ]; in 
          let env1::Table[Str,Str] = addEntries[Str,Str](boundNames,newNames,env);
          in JFun(v0,[ JDec(n,null[JType]) | n::Str <- newNames ],v2,renameJVarsCommand(v3,boundNames + vars,env1));
        else JFun(v0,v1,v2,renameJVarsCommand(v3,boundNames + vars,env));
      }
    }
    JApply(v0::JExp,v1::[JExp]) -> {
      JApply(renameJVarsExp(v0,vars,env),[ renameJVarsExp(v,vars,env) | v::JExp <- v1 ]);
    }
    JArrayRef(a::JExp,i::JExp) -> JArrayRef(renameJVarsExp(a,vars,env),renameJVarsExp(i,vars,env));
    JArrayUpdate(a::JExp,i::JExp,v::JExp) -> JArrayUpdate(renameJVarsExp(a,vars,env),renameJVarsExp(i,vars,env),renameJVarsExp(v,vars,env));
    JBecome(e::JExp,es::[JExp]) -> JBecome(renameJVarsExp(e,vars,env),[ renameJVarsExp(v,vars,env) | v::JExp <- es ]);
    JBinExp(v0::JExp,v1::Str,v2::JExp) -> {
      JBinExp(renameJVarsExp(v0,vars,env),v1,renameJVarsExp(v2,vars,env));
    }
    JCommandExp(v0::JCommand,v1::JType) -> {
      JCommandExp(renameJVarsCommand(v0,vars,env),v1);
    }
    JIfExp(v0::JExp,v1::JExp,v2::JExp) -> {
      JIfExp(renameJVarsExp(v0,vars,env),renameJVarsExp(v1,vars,env),renameJVarsExp(v2,vars,env));
    }
    JConstExp(v0::JConst) -> e;
    JTerm(v0::Str,v1::[JExp]) -> {
      JTerm(v0,[ renameJVarsExp(v,vars,env) | v::JExp <- v1 ]);
    }
    JTermRef(v0::JExp,v1::Int) -> {
      JTermRef(renameJVarsExp(v0,vars,env),v1);
    }
    JList(v0::JType,v1::[JExp]) -> {
      JList(v0,[ renameJVarsExp(v,vars,env) | v::JExp <- v1 ]);
    }
    JSet(v0::JType,v1::[JExp]) -> {
      JSet(v0,[ renameJVarsExp(v,vars,env) | v::JExp <- v1 ]);
    }
    JBag(v0::JType,v1::[JExp]) -> {
      JBag(v0,[ renameJVarsExp(v,vars,env) | v::JExp <- v1 ]);
    }
    JNil(v0::JType) -> e;
    JNow -> e;
    JVar(v0::Str,v1::JType) -> { 
      if hasEntry[Str,Str](v0,env)
      then JVar(lookup[Str,Str](v0,env),v1);
      else e;
    }
    JNull -> e;
    JError(v0::JExp) -> JError(renameJVarsExp(v0,vars,env));
    JHead(v0::JExp) -> {
      JHead(renameJVarsExp(v0,vars,env));
    }
    JTail(v0::JExp) -> {
      JTail(renameJVarsExp(v0,vars,env));
    }
    JCastp(v0::JType,v1::JType,v2::JExp) -> {
      JCastp(v0,v1,renameJVarsExp(v2,vars,env));
    }
    JCast(v0::JType,v1::JExp) -> {
      JCast(v0,renameJVarsExp(v1,vars,env));
    }
    JCmpExp(cmp) -> JCmpExp(renameJVarsCmp(cmp,vars,env));
    JNot(e::JExp) -> JNot(renameJVarsExp(e,vars,env));
    JNew(b::JExp,args::[JExp]) -> JNew(renameJVarsExp(b,vars,env),[ renameJVarsExp(a,vars,env) | a::JExp <- args ]);
    JNewArray(b::JExp) -> JNewArray(renameJVarsExp(b,vars,env));
    JNewJava(n::Str,args::[JExp]) -> JNewJava(n,[ renameJVarsExp(a,vars,env) | a::JExp <- args ]);
    JNewTable -> JNewTable;
    JMapFun(f::JExp,l::JExp) -> JMapFun(renameJVarsExp(f,vars,env),renameJVarsExp(l,vars,env));
    JRecord(fs::[JFieldDef]) -> JRecord([ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n,t,e) <- fs ]);
    JFlatten(e::JExp) -> JFlatten(renameJVarsExp(e,vars,env));
    JSend(e::JExp,n::Str,es::[JExp]) -> JSend(renameJVarsExp(e,vars,env),n,[ renameJVarsExp(e,vars,env) | e::JExp <- es ]);
    JSendSuper(e::JExp) -> JSendSuper(renameJVarsExp(e,vars,env));
    JSendTimeSuper -> JSendTimeSuper;
    JSelf -> JSelf;
    JRef(e::JExp,n::Str) -> JRef(renameJVarsExp(e,vars,env),n);
    JRefSuper(n::Str) -> JRefSuper(n);
    JBehaviour(es::[Str],fs::[JFieldDef],init::JExp,handler::JExp,time::JCommand) ->
      JBehaviour(es,[ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- fs ],renameJVarsExp(init,vars,env),renameJVarsExp(handler,vars,env),renameJVarsCommand(time,vars,env));
    JExtendedBehaviour(es::[Str],parent::JExp,fs::[JFieldDef],init::JExp,handler::JExp,time::JCommand) ->
      JExtendedBehaviour(es,renameJVarsExp(parent,vars,env),[ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- fs ],renameJVarsExp(init,vars,env),renameJVarsExp(handler,vars,env),renameJVarsCommand(time,vars,env));
    JTry(e::JExp,n::Str,c::JCommand) -> JTry(renameJVarsExp(e,vars,env),n,renameJVarsCommand(c,vars,env));
    JProbably(e::JExp,e1::JExp,e2::JExp) -> JProbably(renameJVarsExp(e,vars,env),renameJVarsExp(e1,vars,env),renameJVarsExp(e2,vars,env));
    JGrab(es::[JExp],c::JExp) -> JGrab([ renameJVarsExp(e,vars,env) | e::JExp <- es ],renameJVarsExp(c,vars,env));
  }
  
}

renameJVarsCmp(c::JCmp,vars::[Str],env::Table[Str,Str])::JCmp = {
  case c {
    JCmpList(e)      -> JCmpList(renameJVarsExp(e,vars,env));
    JCmpOuter(n,e,c) -> 
      let vars::[Str] = remove[Str](n,vars);
          env::Table[Str,Str] = addEntry[Str,Str](n,n,env);
      in JCmpOuter(n,renameJVarsExp(e,vars,env),renameJVarsCmp(c,vars,env));
    JCmpBind(n,e,c)  -> 
      let vars::[Str] = remove[Str](n,vars);
          env::Table[Str,Str] = addEntry[Str,Str](n,n,env);
      in JCmpBind(n,renameJVarsExp(e,vars,env),renameJVarsCmp(c,vars,env));
    JCmpIf(e,c)      -> 
      JCmpIf(renameJVarsExp(e,vars,env),renameJVarsCmp(c,vars,env));
  }
}

nameCount::Int = 0;
newName()::Str = {
  nameCount := nameCount + 1;
  '_v' + nameCount;
}

renameJVarsCommand(c::JCommand,vars::[Str],env::Table[Str,Str])::JCommand = { //print[Str]('rename command ' + c + ' ' + vars + ' ' + env);
  case c {
    JBlock(v0::[JCommand]) -> {
      JBlock([ renameJVarsCommand(c,vars,env) | c::JCommand <- v0 ]);
    }
    JReturn(v0::JExp) -> {
      JReturn(renameJVarsExp(v0,vars,env));
    }
    JSwitch(v0::JExp,v1::[JCase],v2::JCommand) -> {
      throw[JCommand]('jswitch should not occur');
    }
    JSwitchList(v0::JExp,v1::JCommand,v2::JCommand,v3::JCommand) -> {
      JSwitchList(renameJVarsExp(v0,vars,env),renameJVarsCommand(v1,vars,env),renameJVarsCommand(v2,vars,env),renameJVarsCommand(v3,vars,env));
    }
    JIfCommand(v0::JExp,v1::JCommand,v2::JCommand) -> {
      JIfCommand(renameJVarsExp(v0,vars,env),renameJVarsCommand(v1,vars,env),renameJVarsCommand(v2,vars,env));
    }
    JCaseList(v0::JExp,v1::JCommand,v2::JCommand,v3::JCommand) -> {
      JCaseList(renameJVarsExp(v0,vars,env),renameJVarsCommand(v1,vars,env),renameJVarsCommand(v2,vars,env),renameJVarsCommand(v3,vars,env));
    }
    JCaseInt(e::JExp,arms::[JIntArm],alt::JCommand) -> JCaseInt(renameJVarsExp(e,vars,env), [ JIArm(n,renameJVarsCommand(c,vars,env)) | JIArm(n::Int,c::JCommand) <- arms ],renameJVarsCommand(alt,vars,env));
    JCaseStr(e::JExp,arms::[JStrArm],alt::JCommand) -> JCaseStr(renameJVarsExp(e,vars,env), [ JSArm(s,renameJVarsCommand(c,vars,env)) | JSArm(s::Str,c::JCommand) <- arms ],renameJVarsCommand(alt,vars,env));
    JCaseBool(e::JExp,arms::[JBoolArm],alt::JCommand) -> JCaseBool(renameJVarsExp(e,vars,env), [ JBArm(b,renameJVarsCommand(c,vars,env)) | JBArm(b::Bool,c::JCommand) <- arms ],renameJVarsCommand(alt,vars,env));
    JCaseTerm(e::JExp,arms::[JTermArm],alt::JCommand) -> JCaseTerm(renameJVarsExp(e,vars,env),[ JTArm(n,i,renameJVarsCommand(c,vars,env)) | JTArm(n::Str,i::Int,c::JCommand) <- arms ], renameJVarsCommand(alt,vars,env));
    JLet(v0::[JFieldDef],v1::JCommand) -> { 
      // Rename if already bound...
      let boundNames::[Str] = [ n | JField(n::Str,t::JType,e::JExp) <- v0 ];
      in {
        if exists[Str](fun(n::Str)::Bool member[Str](n,vars),boundNames)
        then 
          let newNames::[Str] = [ newName() | n::Str <- boundNames ]; in 
          let env1::Table[Str,Str] = addEntries[Str,Str](boundNames,newNames,env);
          in JLet([ JField(lookup[Str,Str](n,env1),t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0],renameJVarsCommand(v1,boundNames + vars,env1));
        else JLet([ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0 ],renameJVarsCommand(v1,boundNames+vars,env));
      }
    }
    JPLet(v0::[JFieldDef],v1::JCommand) -> { 
      // Rename if already bound...
      let boundNames::[Str] = [ n | JField(n::Str,t::JType,e::JExp) <- v0 ];
      in {
        if exists[Str](fun(n::Str)::Bool member[Str](n,vars),boundNames)
        then 
          let newNames::[Str] = [ newName() | n::Str <- boundNames ]; in 
          let env1::Table[Str,Str] = addEntries[Str,Str](boundNames,newNames,env);
          in JPLet([ JField(lookup[Str,Str](n,env1),t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0],renameJVarsCommand(v1,boundNames + vars,env1));
        else JPLet([ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0 ],renameJVarsCommand(v1,boundNames+vars,env));
      }
    }
    JLetRec(v0::[JFieldDef],v1::JCommand) -> { 
      // Rename if already bound...
      let boundNames::[Str] = [ n | JField(n::Str,t::JType,e::JExp) <- v0 ];
      in {
        if exists[Str](fun(n::Str)::Bool member[Str](n,vars),boundNames)
        then 
          let newNames::[Str] = [ newName() | n::Str <- boundNames ]; in 
          let env::Table[Str,Str] = addEntries[Str,Str](boundNames,newNames,env);
          in JLetRec([ JField(lookup[Str,Str](n,env),t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0],renameJVarsCommand(v1,boundNames + vars,env));
        else JLetRec([ JField(n,t,renameJVarsExp(e,vars,env)) | JField(n::Str,t::JType,e::JExp) <- v0 ],renameJVarsCommand(v1,boundNames+vars,env));
      }
    } 
    JStatement(e::JExp) -> JStatement(renameJVarsExp(e,vars,env));
    JUpdate(name::Str,value::JExp) when hasEntry[Str,Str](name,env) -> {
      JUpdate(lookup[Str,Str](name,env),renameJVarsExp(value,vars,env));
    }
    JUpdate(v0::Str,v1::JExp) ->  JUpdate(v0,renameJVarsExp(v1,vars,env));
    JFor(l::Str,n::Str,e::JExp,c::JCommand) -> JFor(l,n,renameJVarsExp(e,vars,env),renameJVarsCommand(c,vars,env));
  }
}

act main::Act{Time(Int); } {
  Time(n::Int) -> {
    print[Str](''+emptyTable); 
    stopAll();
  }
}
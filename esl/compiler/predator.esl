export main;

import 'esl/lists.esl';

// This file contains the definition of a simple predator-prey situation where each of the 
// predators and the prey are represented as actors. The implementation also provides an
// example of a simple pattern that maps a history of events to a filmstrip via a semantic
// structure which is defined as a monoid.

type Main = Act { Time(Int); }
type Predator = Act { export getX::()->Int; getY::()->Int; at::(Int,Int)->Bool; getId::()->Int; Move; }
type Prey = Act { export getX::()->Int; getY::()->Int; at::(Int,Int)->Bool; Move; }
data Message = MovePredator(Int,Int,Int) | MovePrey(Int,Int);
data Location = EmptyLoc | PredLoc | PreyLoc | Rock;
data Point = Point(Int,Int);

board::[[Location]] = []; // The semantic structure.

messages::[Message] = []; // The history trace.

abs(n::Int)::Int = if n < 0 then (0-n); else n;

stop::Bool = false;

act predator(id::Int,x::Int,y::Int)::Predator {

  // A predator is trying to box the prey into a situation where it
  // cannot move. The predator will always move towards the prey
  // unless it hits an occupied location in which case it moves at random.

  export getX, getY, at, getId;
  
  getX()::Int = x;
  getY()::Int = y;
  getId()::Int = id;
  at(px::Int,py::Int)::Bool = (px = x) and (py = y);
  
  move(dx::Int,dy::Int)::Void = {
  
    // Attempt to move by (dx,dy) and fail if this is
    // not a legal position. Record a move on the messages.
    
    if legalPredatorPos(x+dx,y+dy)  
    then { 
      x := x + dx;
      y := y + dy;
      messages := messages + [MovePredator(id,x,y)];
    } else { }
  }

  Move -> grab(messages) { 
  
    // Called at regular intervals. This needs to update the messages if
    // the predator moves, do use the messages variable as a lock. The use
    // of turn ensures that predators and prey all work in turn.
    
    if turn = id
    then {
      turn := (turn + 1) % (numOfPredators+1);
      let dx::Int = if thePrey.getX() > x then 1; else if thePrey.getX() < x then 0 - 1; else 0;
          dy::Int = if thePrey.getY() > y then 1; else if thePrey.getY() < y then 0 - 1; else 0;
      in { 
        // Work out which way we should move. The predators can only move N,S,E, or W.
        if (dy <> 0) and legalPredatorPos(x,y+dy)
        then move(0,dy);
        else if (dx <> 0) and legalPredatorPos(x+dx,y)
        then move(dx,0);
        else probably(50) move(0,1-random(3)); else move(1-random(3),0);
      }
    } else {}
  }

}

act prey(x::Int,y::Int)::Prey {

  // The prey is trying to evade the predators. If it becomes unable to
  // move then it loses.

  export getX, getY, at;
  
  getX()::Int = x;
  getY()::Int = y;
  
  at(px::Int,py::Int)::Bool = (px = x) and (py = y);
  dir(n::Int)::Int = if n < 0 then (0-1); else 1;
  
  dirX::Int = 1 - random(3);
  dirY::Int = 1 - random(3); 
  
  move(dx::Int,dy::Int)::Void = {
  
    // Move by (dx,dy) if that is a legal direction.
    // Record the event on the messages.
    
    if legalPreyPos(x+dx,y+dy)
    then {
      x := x + dx;
      y := y + dy;
      messages := messages + [MovePrey(x,y)];
    } else { }
  }
  
  predatorWins()::Void = {
  
    // Once the game is over, create a filmstrip and display what happened.
    // Creation of the filmstrip uses the semantic structure of locations
    // to guide the creation of each snapshot.

    print[Str]('Predator Wins');
    
    stop := true;
  }
  
  cannotMove()::Bool =
    
    // Prey can move diagonally. The game is over when the prey cannot make
    // a move.
    
    (not(legalPreyPos(x-1,y-1))) and
    (not(legalPreyPos(x-1,y))) and
    (not(legalPreyPos(x+1,y))) and
    (not(legalPreyPos(x,y-1))) and
    (not(legalPreyPos(x,y+1)))and
    (not(legalPreyPos(x+1,y+1)));
    
  changeDir()::Void =
    if legalPreyPos(x-1,y-1)
    then { dirX := 0-1; dirY := 0-1; }
    else if legalPreyPos(x-1,y)
    then { dirX := 0-1; dirY := 0; }
    else if legalPreyPos(x,y-1)
    then { dirX := 0; dirY := 0-1; }
    else  if legalPreyPos(x+1,y)
    then { dirX := 1; dirY := 0; }
    else if legalPreyPos(x,y+1)
    then { dirX := 0; dirY := 1; }
    else if legalPreyPos(x+1,y+1)
    then { dirX := 1; dirY := 1; }
    else {}

  Move -> grab(messages) { 
  
    // When it is the turn of the prey keep moving in the direction that is
    // selected until that is not legal. Then change direction...
    
    if turn = numOfPredators
    then {
      turn := (turn + 1) % (numOfPredators+1);
      if cannotMove()
      then predatorWins();
      else if legalPreyPos(x+dirX,y+dirY)
      then move(dirX,dirY);
      else changeDir();
    } else {}
  }

}

size::Int = 10;                    // Controls the size of the grid elements.
width::Int = 100;                   // The width of the world.
height::Int = 100;                  // The height of the world.
numOfPredators::Int = 200;           // Total number of predators.
numOfRocks::Int = random(100) + 100;  // The number of rocks in the world.
points::[Point] = 
  letrec generate(ps::[Point],n::Int)::[Point] = 
    if n = 0
    then [];
    else 
      let x::Int = random(width); 
          y::Int = random(height); 
      in if member[Point](Point(x,y),ps) 
         then generate(ps,n); 
         else Point(x,y):generate(Point(x,y):ps,n-1);
  in generate([],numOfPredators+1+numOfRocks);
pointX(p::Point)::Int = case p { Point(x::Int,y::Int) -> x; }
pointY(p::Point)::Int = case p { Point(x::Int,y::Int) -> y; }
limit::Int = 10000;
turn::Int = 0;

rocks::[Point] = drop[Point](points,numOfPredators+1);

predators::[Predator] = [ new predator(p,pointX(nth[Point](points,p)),pointY(nth[Point](points,p))) | p::Int <- 0..numOfPredators ];

thePrey::Prey = new prey(pointX(nth[Point](points,numOfPredators)),pointY(nth[Point](points,numOfPredators)));

onBoard(x::Int,y::Int)::Bool = (x > (0-1)) and (x < (width + 1)) and (y > (0-1)) and (y < (height + 1));

onRock(x::Int,y::Int)::Bool = member[Point](Point(x,y),rocks);

legalPreyPos(x::Int,y::Int)::Bool = (not(onRock(x,y))) and onBoard(x,y) and not(exists[Predator](fun(p::Predator)::Bool p.at(x,y),predators));
legalPredatorPos(x::Int,y::Int)::Bool = (not(onRock(x,y))) and onBoard(x,y) and (not(exists[Predator](fun(p::Predator)::Bool p.at(x,y),predators))) and not(thePrey.at(x,y));


  
act main::Main {

  Time(n::Int) when (not(stop)) and (n < limit) -> {
    for p::Predator in predators do {
      p <- Move;
    }
    thePrey <- Move;
    wait(1);
  }

  Time(n::Int) -> {
   print[Str]('Messages: ' + length[Message](messages) + ' ' + messages);
   stopAll();
  }
  
}



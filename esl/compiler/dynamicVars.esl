export dynamicVarsJExp, dynamicVarsJCommand, dynamicVarsJModule;

import 
  'esl/compiler/types.esl',
  'esl/lists.esl';

decName(d::JDeclaration)::Str =
  case d {
    JDec(n::Str,t::JType) -> n; 
  }

fieldName(d::JFieldDef)::Str =
  case d {
    JField(n::Str,t::JType,e::JExp) -> n;
  }

fieldJExp(d::JFieldDef)::JExp =
  case d {
    JField(n::Str,t::JType,e::JExp) -> e;
  }

dynamicVarsJModule(m::JMod)::Void =
  case m {
    JModule(n::Str,exports::[Str],imports::[Str],fs::[JFieldDef]) ->
      for f::JFieldDef in fs do {
        case f {
          JField(name::Str,t::JType,e::JExp) ->
            dynamicVarsJExp(e);
        }
      }
  }

dynamicVarsJExp(x::JExp)::[Str] = { //print[Str]('dynamic exp = ' + x);
  case x {
    JArrayRef(a::JExp,i::JExp) -> dynamicVarsJExp(a) + dynamicVarsJExp(i);
    JArrayUpdate(a::JExp,i::JExp,v::JExp) -> dynamicVarsJExp(a) + dynamicVarsJExp(i) + dynamicVarsJExp(v);
    JBecome(e::JExp,es::[JExp]) -> dynamicVarsJExp(e) + flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),es));
    JFun(v0::JExp,v1::[JDeclaration],v2::JType,v3::JCommand) -> 
      reject[Str](fun(n::Str)::Bool member[Str](n,map[JDeclaration,Str](decName,v1)),dynamicVarsJCommand(v3));
    JApply(v0::JExp,v1::[JExp]) -> dynamicVarsJExp(v0) + flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v1));
    JBinExp(v0::JExp,v1::Str,v2::JExp) -> dynamicVarsJExp(v0) + dynamicVarsJExp(v2);
    JCommandExp(v0::JCommand,v1::JType) -> dynamicVarsJCommand(v0);
    JIfExp(v0::JExp,v1::JExp,v2::JExp) -> dynamicVarsJExp(v0) + dynamicVarsJExp(v1) + dynamicVarsJExp(v2);
    JConstExp(v0::JConst) -> [];
    JTerm(v0::Str,v1::[JExp]) -> flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v1));
    JTermRef(v0::JExp,v1::Int) -> dynamicVarsJExp(v0);
    JList(v0::JType,v1::[JExp]) -> flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v1));
    JNil(v0::JType) -> [];
    JVar(v0::Str,v1::JType) -> [];
    JNull ->[];
    JNow -> [];
    JError(v0::JExp) -> dynamicVarsJExp(v0);
    JHead(v0::JExp) -> dynamicVarsJExp(v0);
    JTail(v0::JExp) -> dynamicVarsJExp(v0);
    JMapFun(v0::JExp,v1::JExp) -> dynamicVarsJExp(v0) + dynamicVarsJExp(v1);
    JFlatten(v0::JExp) -> dynamicVarsJExp(v0);
    JNot(v0::JExp) -> dynamicVarsJExp(v0);
    JBehaviour(v0::[Str],v1::[JFieldDef],v2::JExp,v3::JExp,v4::JCommand) -> {
      flatten[Str](map[JFieldDef,[Str]](fun(d::JFieldDef)::[Str] dynamicVarsJFieldDef(d),v1)) +
      dynamicVarsJExp(v2) +
      dynamicVarsJExp(v3) +
      dynamicVarsJCommand(v4);
    }
    JNew(v0::JExp,v1::[JExp]) -> dynamicVarsJExp(v0) + flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v1));
    JNewArray(v0::JExp) -> dynamicVarsJExp(v0);
    JNewJava(v0::Str,v1::[JExp]) -> flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v1));
    JSend(v0::JExp,v1::Str,v2::[JExp]) -> dynamicVarsJExp(v0) + flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v2));
    JSelf -> [];
    JTry(e::JExp,n::Str,c::JCommand) -> dynamicVarsJExp(e) + dynamicVarsJCommand(c);
    JRef(v0::JExp,v1::Str) -> dynamicVarsJExp(v0);
    JGrab(v0::[JExp],v1::JExp) -> flatten[Str](map[JExp,[Str]](fun(e::JExp)::[Str] dynamicVarsJExp(e),v0)) + dynamicVarsJExp(v1);
    JProbably(v0::JExp,v1::JExp,v2::JExp) -> dynamicVarsJExp(v0) + dynamicVarsJExp(v1) + dynamicVarsJExp(v2);
  }
}

dynamicVarsJFieldDef(d::JFieldDef)::[Str] =
  case d {
    JField(n::Str,t::JType,e::JExp) -> dynamicVarsJExp(e);
  }

dynamicVarsJTermArm(t::JTermArm)::[Str] = 
  case t {
    JTArm(n::Str,i::Int,c::JCommand) -> dynamicVarsJCommand(c);
  }

dynamicVarsJIntArm(t::JIntArm)::[Str] = 
  case t {
    JIArm(i::Int,c::JCommand) -> dynamicVarsJCommand(c);
  }

dynamicVarsJStrArm(t::JStrArm)::[Str] = 
  case t {
    JSArm(s::Str,c::JCommand) -> dynamicVarsJCommand(c);
  }

dynamicVarsJBoolArm(t::JBoolArm)::[Str] = 
  case t {
    JBArm(b::Bool,c::JCommand) -> dynamicVarsJCommand(c); 
  }
  
dynamicVarsJCommand(x::JCommand)::[Str] = { //print[Str]('dynamic command = ' + x);
  case x {
    JBlock(v0::[JCommand]) -> flatten[Str](map[JCommand,[Str]](fun(e::JCommand)::[Str] dynamicVarsJCommand(e),v0));
    JReturn(v0::JExp) -> dynamicVarsJExp(v0);
    JIfCommand(v0::JExp,v1::JCommand,v2::JCommand) -> dynamicVarsJExp(v0) + dynamicVarsJCommand(v1) + dynamicVarsJCommand(v2);
    JCaseList(v0::JExp,v1::JCommand,v2::JCommand,v3::JCommand) -> dynamicVarsJExp(v0) + dynamicVarsJCommand(v1) + dynamicVarsJCommand(v2)+ dynamicVarsJCommand(v3);
    JCaseTerm(v0::JExp,v1::[JTermArm],v2::JCommand) -> dynamicVarsJExp(v0) + flatten[Str](map[JTermArm,[Str]](fun(t::JTermArm)::[Str] dynamicVarsJTermArm(t),v1)) + dynamicVarsJCommand(v2);
    JCaseInt(v0::JExp,v1::[JIntArm],v2::JCommand) -> dynamicVarsJExp(v0) + flatten[Str](map[JIntArm,[Str]](fun(t::JIntArm)::[Str] dynamicVarsJIntArm(t),v1)) + dynamicVarsJCommand(v2);
    JCaseStr(v0::JExp,v1::[JStrArm],v2::JCommand) -> dynamicVarsJExp(v0) + flatten[Str](map[JStrArm,[Str]](fun(t::JStrArm)::[Str] dynamicVarsJStrArm(t),v1)) + dynamicVarsJCommand(v2);
    JCaseBool(v0::JExp,v1::[JBoolArm],v2::JCommand) -> dynamicVarsJExp(v0) + flatten[Str](map[JBoolArm,[Str]](fun(t::JBoolArm)::[Str] dynamicVarsJBoolArm(t),v1)) + dynamicVarsJCommand(v2);
    JLet(v0::[JFieldDef],v1::JCommand) -> flatten[Str](map[JFieldDef,[Str]](fun(f::JFieldDef)::[Str] dynamicVarsJExp(fieldJExp(f)),v0)) + reject[Str](fun(n::Str)::Bool member[Str](n, map[JFieldDef,Str](fieldName,v0)),dynamicVarsJCommand(v1));
    JLetRec(v0::[JFieldDef],v1::JCommand) -> reject[Str](fun(n::Str)::Bool member[Str](n, map[JFieldDef,Str](fieldName,v0)),flatten[Str](map[JFieldDef,[Str]](fun(f::JFieldDef)::[Str] dynamicVarsJExp(fieldJExp(f)),v0)) + dynamicVarsJCommand(v1));
    JUpdate(v0::Str,v1::JExp) -> [v0] + dynamicVarsJExp(v1);
    JStatement(v0::JExp) -> dynamicVarsJExp(v0);
    JFor(listName::Str,v0::Str,v1::JExp,v2::JCommand) -> [listName] + dynamicVarsJExp(v1) + dynamicVarsJCommand(v2);
  }
}
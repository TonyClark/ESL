export main;

import 'esl/lists.esl';

type Main = Act { Time(Int) };

type Agent = Act { Turn(); Die() };

type Grid = Act { SetColour(Int,Int,Str); Turn(Int,Int) };

act agent(x::Int,y::Int)::Agent {
    
  findEmpty(x0::Int,y0::Int)::Void = { 
    if y0 > height 
    then findEmpty(0,0)
    else if x0 > width 
    then findEmpty(0,y0+1)
    else if popEl(x0,y0) = empty
    then {
        popSet(x0,y0,popEl(x,y));
        popSet(x,y,empty);
        x := x0;
        y := y0
    } else findEmpty(x0+1,y0)
  }
  
  Die -> kill[Agent](self);
    
  Turn -> {
    grab(population) {
      grid <- Turn(x,y);
      if popSim(x,y) < similarpc
      then findEmpty(random(width),random(height))
      else {}
    }
  }
};

intToFloat::(Int)->Float = builtin[(Int)->Float]('runtime.actors.Builtins','intToFloat',1);
round::(Float)->Int = builtin[(Float)->Int]('runtime.actors.Builtins','round',1);

similarpc::Int = 75;
width::Int     = 60;
height::Int    = 30;
redpc::Int     = 40;
emptypc::Int   = 20;
empty::Int     = 0;
red::Int       = 1;
blue::Int      = 2;
limit::Int     = 2000;

opp(c::Int)::Int = if c = red then blue else red;
colour(c::Int)::Str = if c = red then 'red' else if c = empty then 'white' else 'blue';

legalx(x::Int)::Bool = (x = 0) or (x = width) or ((x > 0) and (x < width));
legaly(y::Int)::Bool = (y = 0) or (y = height) or ((y > 0) and (y < height));

population::[[Int]] = [ [ probably(100-emptypc)::Int { probably(redpc)::Int red else blue } else empty | w::Int <- 0..width ] | h::Int <- 0..height ];

popEl(x::Int,y::Int)::Int = nth[Int](nth[[Int]](population,y),x);

popElp(x::Int,y::Int)::[Int] =
  if legalx(x) and legaly(y)
  then [popEl(x,y)]
  else [];
  
popSet(x::Int,y::Int,c::Int)::Void = {
  population := replaceNth[[Int]](population,y,replaceNth[Int](nth[[Int]](population,y),x,c));
  grid <- SetColour(x,y,colour(c))
};

popSim(x::Int,y::Int)::Int =
  let surround::[Int] = flatten[Int]([ popElp(x0,y0) | x0::Int <- (x-1)..(x+1), y0::Int <- (y-1)..(y+1), ?not((x0 = x) and (y0 = y)) ]);
      colour::Int = popEl(x,y)
  in let sim::Int = occurrences[Int](colour,surround);
         diff::Int = occurrences[Int](opp(colour),surround)
     in round((intToFloat(sim)/(intToFloat(sim+diff)))* 100.0);
  
grid::Grid = new 'test.grid.Grid'[Grid](width,height,17);

act main::Main {

  agents::[Agent] = []

   -> {
    for y::Int in 0..height do {
      for x::Int in 0..width do {
        if popEl(x,y) <> empty
        then {
          agents := new agent(x,y):agents;
          grid <- SetColour(x,y,colour(popEl(x,y)))
        } else {}
      }
    }
  };
  
  Time(n::Int) when n > limit -> { for a::Agent in agents do a <- Die; kill[Main](self) };
  
  Time(n::Int) -> {
    for a::Agent in agents do a <- Turn
  }
  
}
























































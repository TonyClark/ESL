export main;

x::Int = 2;
y::Str = 'plap';
z::Bool = true;

zeroTo10::[Int] = 0..10;

type X = Int;

f::(X)->Int = fun(x::Int)::Int x+1;

caseTest::(T(Int)) -> G(Bool) =
 fun(x::T(Int))::G(Bool)
  case x {
    T(10) -> G(true);
    T(11) -> G(false);
    T(1)  -> G(true); 
    K(true) -> G(true);
    _ -> G(false)
  };

a::Int = f(f(x));

type Main = Act { Time(Int) };

act main::Main {
  a::Int = 1;
  b::Int = 2;
  c::(Int)->Bool = fun(x::Int)::Bool true
 
  Time(n::Int) -> {
    let g::[Int] = [f(f(0)),
                   1,
                   3,4,5];
        h::Int = 2;

        i::Bool = c(x) 

    in { 
      i := if x > 1 then true else false or true; 
      stopAll()
    }
  }
}























































export main;

act processor(jobs) {
  -> print('start processor ' + self);
  Time(_) -> 
    for job in jobs do
      probably(50) 
        job <- Process 
      else {}
};

act job {
  effort = 3;
  currentJob = effort
  -> print('start job ' + self);
  Time(_) -> {};
  Process -> 
    case currentJob {
      1 -> {
        record(self,Completed);
        currentJob := effort
      };
      _ -> currentJob := currentJob - 1
    }
};

act main {

  -> 
    for x in 1 .. 1 do { 
      new processor([new job,new job,new job,new job])
    };

  Time(100) -> 
    letrec
      results = getResults();
      start = 1;
      end = 10;
      resultsAt(t,l) = find Result(tt,Completed) ? tt=t in l do [Completed] else [];
      getActorResults(a) =
        case a {
          Results(_,results) -> results;
          _ -> []
        };
      flatten(lists) =
        case lists {
          h:t -> h+flatten(t);
          [] -> []
        };
      length(l) =
        case l {
          h:t -> 1 + length(t);
          [] -> 0
        };
      csv(values) =
        case values {
          h:[] -> '';
          h:t -> h+','+(csv(t))
        } 
    in {
      stopAll();
      print('HERE');
      case results {
        Results(all) ->
          let completed = for n in start..end -> {
                            length(flatten(for r in all -> {
                                             resultsAt(n,getActorResults(r))
                                           }))
                          }
          in print(csv('jobs processed':completed))
      }
    };
  
  Time(_) -> {}

}
      
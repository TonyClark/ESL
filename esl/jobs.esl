act processor(jobs) {
  -> print('start processor ' + self);
  Time(_) -> 
    for job in jobs do
      probably(50) 
        job <- Process 
      else {}
};

act job {
  effort = 3;
  currentJob = effort
  -> print('start job ' + self);
  Time(_) -> {};
  Process -> 
    case currentJob {
      1 -> {
        record(self,Completed);
        currentJob := effort
      };
      _ -> currentJob := currentJob - 1
    }
}

-> 
  for x in 1 .. 300 do { 
    new processor([new job,new job,new job,new job])
  };

Time(100) -> 
  letrec
    results = getResults();
    start = 1;
    end = 10;
    resultsAt(t) = fun(l) find Result(tt,Completed) ? tt=t in l do [Completed] else [];
    map(f,l) =
      case l {
        h:t -> (f(h)):map(f,t);
        [] -> []
      };
    getActorResults(a) =
      case a {
        Results(_,results) -> results;
        _ -> []
      };
    flatten(lists) =
      case lists {
        h:t -> h+flatten(t);
        [] -> []
      };
    length(l) =
      case l {
        h:t -> 1 + length(t);
        [] -> 0
      };
    csv(values) =
      case values {
        h:[] -> '';
        h:t -> h+','+(csv(t))
      }
  in {
    stopAll();
    case results {
      Results(all) ->
        let completed = for n in start..end -> length(flatten(map(resultsAt(n),map(getActorResults,all))))
        in print(csv('jobs processed':completed))
    }
  };
  
Time(_) -> {}
      
package esl;
import runtime.data.Term;
import static esl.Library.*;
import static esl.Lists.*;
import static esl.Lists.*;
import list.*;
public class Segregation {
public interface Fail<T> { public T fail(); }
interface Fun2<T
,T0,T1> {
T apply(
T0 x0,T1 x1); }
interface Fun3<T
,T0,T1,T2> {
T apply(
T0 x0,T1 x1,T2 x2); }
private static Fun1<Double,Integer> intToFloat = builtin("intToFloat")
;private static Fun1<Integer,Double> round = builtin("round")
;private static int similarpc = 70;private static int width = 600;private static int height = 300;private static int redpc = 60;private static int emptypc = 10;private static int empty = 0;private static int red = 1;private static int blue = 2;private static int limit = 500000;private static Fun1<Integer,Integer> opp = new Fun1<Integer,Integer> () { public Integer apply(Integer c
) {if(c==red) {return blue;} else {return red;}}};private static Fun1<String,Integer> colour = new Fun1<String,Integer> () { public String apply(Integer c
) {if(c==red) {return "red";} else {if(c==empty) {return "white";} else {return "blue";}}}};private static Fun1<Boolean,Integer> legalx = new Fun1<Boolean,Integer> () { public Boolean apply(Integer x
) {return (x==0) || ((x==width) || (((x) > (0)) && ((x) < (width))));}};private static Fun1<Boolean,Integer> legaly = new Fun1<Boolean,Integer> () { public Boolean apply(Integer y
) {return (y==0) || ((y==height) || (((y) > (0)) && ((y) < (height))));}};private static Cell<list.List<list.List<Integer>>> population = new Cell<list.List<list.List<Integer>>>(esl.Library.flatten(esl.Library.map(new Fun1<list.List<list.List<Integer>>,Integer>() { public list.List<list.List<Integer>> apply(Integer mapElement) {return new Fun1<list.List<list.List<Integer>>,Integer> () {public list.List<list.List<Integer>> apply(Integer var0) { return new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int h=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil()
.cons(esl.Library.flatten(esl.Library.map(new Fun1<list.List<Integer>,Integer>() { public list.List<Integer> apply(Integer mapElement) {return new Fun1<list.List<Integer>,Integer> () {public list.List<Integer> apply(Integer var0) { return new Fail<list.List<Integer>>() { public list.List<Integer> fail() { return 
new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {int w=var0;return new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {return new list.Nil()
.cons((esl.Library.probably(
(100) - (emptypc)) ? ((esl.Library.probably(
redpc) ? (red) : (blue))) : (empty)));}}.apply(fail);}}.apply(new Fail<list.List<Integer>>() { public list.List<Integer> fail() { return 
new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {int else_=var0;return new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<Integer>>() { public list.List<Integer> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to(0,width))));}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int else_=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to(0,height))));private static Fun2<Integer,Integer,Integer> popEl = new Fun2<Integer,Integer,Integer> () { public Integer apply(Integer x
,Integer y
) {return population.getValue().nth(y).nth(x);}};private static Fun2<list.List<Integer>,Integer,Integer> popElp = new Fun2<list.List<Integer>,Integer,Integer> () { public list.List<Integer> apply(Integer x
,Integer y
) {return new list.Nil()
.cons(popEl.apply((x) % (width),(y) % (height)));}};private static Fun3<Object,Integer,Integer,Integer> popSet = new Fun3<Object,Integer,Integer,Integer> () { public Object apply(Integer x
,Integer y
,Integer c
) {population.setValue(replaceNth.apply(population.getValue(),y,replaceNth.apply(population.getValue().nth(y),x,c)));return grid.send(new Term("SetColour",x,y,colour.apply(c)));}};private static Fun2<Integer,Integer,Integer> popSim = new Fun2<Integer,Integer,Integer> () { public Integer apply(Integer x
,Integer y
) {return new Fun0<Integer>() { public Integer apply() {list.List<Integer> surround = flatten.apply(esl.Library.flatten(esl.Library.flatten(esl.Library.map(new Fun1<list.List<list.List<list.List<Integer>>>,Integer>() { public list.List<list.List<list.List<Integer>>> apply(Integer mapElement) {return new Fun1<list.List<list.List<list.List<Integer>>>,Integer> () {public list.List<list.List<list.List<Integer>>> apply(Integer var0) { return new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { return 
new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {int x0=var0;return new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {return new list.Nil()
.cons(esl.Library.flatten(esl.Library.flatten(esl.Library.map(new Fun1<list.List<list.List<list.List<Integer>>>,Integer>() { public list.List<list.List<list.List<Integer>>> apply(Integer mapElement) {return new Fun1<list.List<list.List<list.List<Integer>>>,Integer> () {public list.List<list.List<list.List<Integer>>> apply(Integer var0) { return new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { return 
new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {int y0=var0;return new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {return new list.Nil()
.cons(((!((x0==x) && (y0==y)))) ? new list.Nil<list.List<Integer>>().cons(popElp.apply(x0,y0)) : new list.Nil<list.List<Integer>>());}}.apply(fail);}}.apply(new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { return 
new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {int else_=var0;return new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to((y) - (1),y + 2)))));}}.apply(fail);}}.apply(new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { return 
new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {int else_=var0;return new Fun1<list.List<list.List<list.List<Integer>>>,Fail<list.List<list.List<list.List<Integer>>>>>() { public list.List<list.List<list.List<Integer>>> apply(Fail<list.List<list.List<list.List<Integer>>>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<list.List<list.List<Integer>>>>() { public list.List<list.List<list.List<Integer>>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to((x) - (1),x + 2)))));int colour = popEl.apply(x,y);return new Fun0<Integer>() { public Integer apply() {int sim = occurrences.apply(colour,surround);int diff = occurrences.apply(opp.apply(colour),surround);return round.apply(((intToFloat.apply(sim)) / (intToFloat.apply(sim + diff))) * (100.0));}}.apply();}}.apply();}};private static Actor grid = javaNew("esl.grid.Grid",width,height,2);private static Fun2<Actor,Integer,Integer> agent = new Fun2<Actor,Integer,Integer> () { public Actor apply(Integer x_
,Integer y_
) {Cell<Integer> x = new Cell<Integer>(x_);Cell<Integer> y = new Cell<Integer>(y_);return new Actor(new BehaviourAdapter(false) {Actor self; public void setSelf(Actor self) { this.self = self; }Fun2<Object,Integer,Integer> findEmpty = new Fun2<Object,Integer,Integer> () { public Object apply(Integer x0
,Integer y0
) {if(popEl.apply(x0,y0)==empty) {popSet.apply(x0,y0,popEl.apply(x.getValue(),y.getValue()));popSet.apply(x.getValue(),y.getValue(),empty);x.setValue(x0);return y.setValue(y0);} else {return findEmpty.apply(random.apply(width),random.apply(height));}}};public Object get(String name) {if(name.equals("findEmpty")) return findEmpty;throw new Error("no field named " + name);
}public Object init() {return null;}public void processTime(Actor self, int n) {}public void processMessage(Actor self,Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Turn",0))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return new Fun0<Object>() {public Object apply() { Object ignore = new Fun0<Object>() { public Object apply() {synchronized(population) {
if((popSim.apply(x.getValue(),y.getValue())) < (similarpc)) {return findEmpty.apply(random.apply(width),random.apply(height));} else {return null;}}}}.apply(); return self.send(new Term("Turn"));}}.apply();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }); } }.fail(); } }.apply(message);}}).start();}};public static Fun0<Actor> main = new Fun0<Actor> () { public Actor apply() {return new Actor(new BehaviourAdapter(true) {Actor self; public void setSelf(Actor self) { this.self = self; }Cell<list.List<Actor>> agents = new Cell<list.List<Actor>>(new list.Nil());public Object get(String name) {if(name.equals("agents")) return agents.getValue();throw new Error("no field named " + name);
}public Object init() {return new java.util.function.Supplier<Object>() { public Object get() {List<Integer> l_ = esl.Library.to(0,height); while(!l_.isNil()) { int y = l_.getHead();l_ = l_.getTail();new java.util.function.Supplier<Object>() { public Object get() {List<Integer> l_ = esl.Library.to(0,width); while(!l_.isNil()) { int x = l_.getHead();l_ = l_.getTail();if((popEl.apply(x,y)) != (empty)) {new Fun0<Object>() { public Object apply() {Actor a = agent.apply(x,y);agents.setValue(agents.getValue().cons(
a));grid.send(new Term("SetColour",x,y,colour.apply(popEl.apply(x,y))));return a.send(new Term("Turn"));}}.apply();} else {{}}} return null;}}.get();} return null;}}.get();}public void processTime(Actor self,int time_) {new Fun1<Object,Integer> () {public Object apply(Integer var0) { return new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {int n=var0;return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if((n) > (limit)) {return new Fun0<Object>() {public Object apply() { Object ignore = print.apply("STOP " + n + " " + limit); return stopAll.apply();}}.apply();} else return fail.fail();}}.apply(fail);}}.apply(new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {int n=var0;return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return null
;}}.apply(fail);}}.apply(new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(time_);}public void processMessage(Actor self,Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }.fail(); } }.apply(message);}}).start();}};public static void main(String[] args) {
  new Segregation().main.apply();
}
}

package esl;
import runtime.data.Term;
import static esl.Library.*;
import list.*;
public class Test1 {
public interface Fail<T> { public T fail(); }
interface Fun2<T
,T0,T1> {
T apply(
T0 x0,T1 x1); }
private static Cell<Integer> a = new Cell<Integer>(0);private static int b = a.getValue();private static Cell<String> c = new Cell<String>("plap");private static boolean d = true;private static int e = 100 + b;private static int f = (d) ? a.getValue() : b;private static Fun2<Integer,Integer,Integer> g = new Fun2<Integer,Integer,Integer> () { public Integer apply(Integer x
,Integer y
) {return x + 1;}};private static int h = g.apply(100,200);private static list.List<String> i = new list.Nil()
.cons("spam");private static int j = new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"B",1))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(termRef(var0,0).equals(100))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 20;}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"B",1))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {int x=termRef(var0,0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return x + 1;}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(new Term("B",100));private static int k = new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Branch",2))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(termRef(var0,0),"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(termRef(var0,1),"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1;}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t=var0;return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 0;}}.apply(fail);}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(new Term("Branch",new Term("Leaf"),new Term("Leaf")));private static Fun1<Integer,Term> l = new Fun1<Integer,Term> () { public Integer apply(Term t
) {return new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Branch",2))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t1=termRef(var0,0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t2=termRef(var0,1);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return l.apply(t1) + l.apply(t2);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(t);}};private static Fun1<Actor,Integer> m = new Fun1<Actor,Integer> () { public Actor apply(Integer i
) {return new Actor(new BehaviourAdapter(false) {Actor self; public void setSelf(Actor self) { this.self = self; }Cell<Integer> x = new Cell<Integer>(random.apply(10));int y = random.apply(20);int dx = (random.apply(2)) - (1);int dy = (random.apply(2)) - (1);boolean b = true;public Object get(String name) {if(name.equals("x")) return x.getValue();if(name.equals("y")) return y;if(name.equals("dx")) return dx;if(name.equals("dy")) return dy;if(name.equals("b")) return b;throw new Error("no field named " + name);
}public Object init() {return null;}public void processTime(Actor self, int n) {}public void processMessage(Actor self,Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Message",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(termRef(var0,0).equals(10))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return x.setValue(x.getValue() + 1000);}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Message",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {int n=termRef(var0,0);return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return print.apply("MESSAGE = " + n + " " + x.getValue());}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(message);}}).start();}};private static Actor n = m.apply(100);private static list.List<Integer> o = esl.Library.flatten(esl.Library.flatten(esl.Library.map(new Fun1<list.List<list.List<Integer>>,Integer>() { public list.List<list.List<Integer>> apply(Integer mapElement) {return new Fun1<list.List<list.List<Integer>>,Integer> () {public list.List<list.List<Integer>> apply(Integer var0) { return new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int x=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil()
.cons(esl.Library.flatten(esl.Library.flatten(esl.Library.map(new Fun1<list.List<list.List<Integer>>,Integer>() { public list.List<list.List<Integer>> apply(Integer mapElement) {return new Fun1<list.List<list.List<Integer>>,Integer> () {public list.List<list.List<Integer>> apply(Integer var0) { return new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int y=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil()
.cons(((x) > (y)) ? new list.Nil<Integer>().cons(x + y) : new list.Nil<Integer>());}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int else_=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to(0,10)))));}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {int else_=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return new list.Nil();}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},esl.Library.to(0,10))));public static Fun0<Actor> main = new Fun0<Actor> () { public Actor apply() {return new Actor(new BehaviourAdapter(true) {Actor self; public void setSelf(Actor self) { this.self = self; }public Object get(String name) {throw new Error("no field named " + name);
}public Object init() {return null;}public void processTime(Actor self,int t) {if(true) {if((t) > (1000)) {print.apply("STOPPED " + t + " " + a.getValue() + " " + c.getValue() + o);stopAll.apply();} else {a.setValue(a.getValue() + 1);c.setValue("hooray it worked (" + ((int)n.get("x")) + ")");n.send(new Term("Message",t));}} else {{}}}public void processMessage(Actor self,Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }.fail(); } }.apply(message);}}).start();}};public static void main(String[] args) {
  new Test1().main.apply();
}
}

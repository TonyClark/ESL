package esl; import static esl.Library.*; public class Test {
public interface Fail<T> { public T fail(); }
interface Fun0<T
> {
T apply(
); }
interface Fun1<T
,T0> {
T apply(
T0 x0); }
interface Fun2<T
,T0,T1> {
T apply(
T0 x0,T1 x1); }
 public abstract class Actor0 extends Actor {  public abstract Integer getx();}
 public abstract class Actor1 extends Actor { }
int[] a = new int[]{0};int b = a[0];String[] c = new String[]{"plap"};boolean d = true;int e = 100 + b;int f = (d) ? a[0] : b;Fun2<Integer,Integer,Integer> g = new Fun2<Integer,Integer,Integer> () { public Integer apply(Integer x
,Integer y
) {return x + 1;}};int h = g.apply(100,200);list.List<String> i = list.List.asList(new String[]{"spam"});int j = new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"B",1))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(termRef(var0,0).equals(100))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 20;}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"B",1))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Integer x=termRef(var0,0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return x + 1;}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(new Term("B",100));int k = new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Branch",2))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(termRef(var0,0),"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(termRef(var0,1),"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1;}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t=var0;return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 0;}}.apply(fail);}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(new Term("Branch",new Term("Leaf"),new Term("Leaf")));Fun1<Integer,Term> l = new Fun1<Integer,Term> () { public Integer apply(Term t
) {return new Fun1<Integer,Term> () {public Integer apply(Term var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Branch",2))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t1=termRef(var0,0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {Term t2=termRef(var0,1);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return l.apply(t1) + l.apply(t2);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isTerm(var0,"Leaf",0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(t);}};Fun1<Actor0,Integer> m = new Fun1<Actor0,Integer> () { public Actor0 apply(Integer i
) {return new Actor0() {Actor0 self = this;
int[] x = new int[]{random.apply(10)};public Integer getx(){ return 
x[0]; }int y = random.apply(20);public Integer gety(){ return 
y; }int dx = random.apply(2) - 1;public Integer getdx(){ return 
dx; }int dy = random.apply(2) - 1;public Integer getdy(){ return 
dy; }boolean b = true;public Boolean getb(){ return 
b; }public void processMessage(Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Message",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(termRef(var0,0).equals(10))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return (x[0] = x[0] + 1000);}}.apply(fail);else return fail.fail();}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Message",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {Integer n=termRef(var0,0);return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return print.apply("MESSAGE = " + n + " " + x[0]);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Time",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {Integer n=termRef(var0,0);return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return null
;}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(message);}};}};Actor0 n = m.apply(100);list.List<Integer> o = flatten.apply(flatten.apply(map.apply(new Fun1<Integer,list.List<list.List<Integer>>> { public list.List<list.List<Integer>> apply(Integer mapElement) {return new Fun1<list.List<list.List<Integer>>,Integer> () {public list.List<list.List<Integer>> apply(Integer var0) { return new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {Integer x=var0;return new Fun1<list.List<list.List<Integer>>,Fail<list.List<list.List<Integer>>>>() { public list.List<list.List<Integer>> apply(Fail<list.List<list.List<Integer>>> fail) {return list.List.asList(new list.List<Integer>[]{flatten.apply(map.apply(new Fun1<Integer,list.List<Integer>> { public list.List<Integer> apply(Integer mapElement) {return new Fun1<list.List<Integer>,Integer> () {public list.List<Integer> apply(Integer var0) { return new Fail<list.List<Integer>>() { public list.List<Integer> fail() { return 
new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {Integer y=var0;return new Fun1<list.List<Integer>,Fail<list.List<Integer>>>() { public list.List<Integer> apply(Fail<list.List<Integer>> fail) {return list.List.asList(new Integer[]{x + y});}}.apply(fail);}}.apply(new Fail<list.List<Integer>>() { public list.List<Integer> fail() { return 
new Fun1<list.List<Term>,Fail<list.List<Term>>>() { public list.List<Term> apply(Fail<list.List<Term>> fail) {Integer else_=var0;return new Fun1<list.List<Term>,Fail<list.List<Term>>>() { public list.List<Term> apply(Fail<list.List<Term>> fail) {return new list.Nil<?>();}}.apply(fail);}}.apply(new Fail<list.List<Integer>>() { public list.List<Integer> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},to(0,10)))});}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { return 
new Fun1<list.List<Term>,Fail<list.List<Term>>>() { public list.List<Term> apply(Fail<list.List<Term>> fail) {Integer else_=var0;return new Fun1<list.List<Term>,Fail<list.List<Term>>>() { public list.List<Term> apply(Fail<list.List<Term>> fail) {return new list.Nil<?>();}}.apply(fail);}}.apply(new Fail<list.List<list.List<Integer>>>() { public list.List<list.List<Integer>> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(mapElement);}},to(0,10))));Fun0<Actor1> main = new Fun0<Actor1> () { public Actor1 apply() {return new Actor1() {Actor1 self = this;
public void processMessage(Term message) {new Fun1<Object,Term> () {public Object apply(Term var0) { return new Fail<Object>() { public Object fail() { return 
new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {if(isTerm(var0,"Time",1))return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {Integer t=termRef(var0,0);return new Fun1<Object,Fail<Object>>() { public Object apply(Fail<Object> fail) {return (t > 1000) ? new Fun0<Object>() {public Object apply() { Object ignore = print.apply("STOPPED " + t + " " + a[0] + " " + c[0] + o); return stopAll.apply();}}.apply() : new Fun0<Object>() {public Object apply() { Object ignore = (a[0] = a[0] + 1); return new Fun0<Object>() {public Object apply() { Object ignore = (c[0] = "hooray it worked (" + n.getx() + ")"); return n.send(new Term("Message",t));}}.apply();}}.apply();}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Object>() { public Object fail() { throw new Error(" case failed."); } }); } }.fail(); } }.apply(message);}};}};public static void main(String[] args) {
  new Test().main.apply();
}
}


package esl;
import runtime.data.Term;
import static esl.Library.*;
import list.*;
public class Lists {
public interface Fail<T> { public T fail(); }
interface Fun2<T
,T0,T1> {
T apply(
T0 x0,T1 x1); }
interface Fun3<T
,T0,T1,T2> {
T apply(
T0 x0,T1 x1,T2 x2); }
interface Fun4<T
,T0,T1,T2,T3> {
T apply(
T0 x0,T1 x1,T2 x2,T3 x3); }
public static class adjoin_ { public <T> list.List<T> apply(T x
,list.List<T> l
) {if(member.apply(x,l)) {return l;} else {return l.cons(
x);}}public <T> Fun2<list.List<T>,T,list.List<T>> asFun2() { return new Fun2<list.List<T>,T,list.List<T>>() { public list.List<T> apply(T var0,list.List<T> var1) { return adjoin_.this.apply( var0, var1); }};}}public static adjoin_ adjoin = new adjoin_();public static class select1_ { public <T> T apply(list.List<T> l
,T d
,Fun1<Boolean,T> p
) {return new Fun1<T,list.List<T>> () {public T apply(list.List<T> var0) { return new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isNil(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return d;}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T h=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {list.List<T> t=consTail(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(p.apply(h)) {return h;} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T h=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {list.List<T> t=consTail(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return select1.apply(t,d,p);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun3<T,list.List<T>,T,Fun1<Boolean,T>> asFun3() { return new Fun3<T,list.List<T>,T,Fun1<Boolean,T>>() { public T apply(list.List<T> var0,T var1,Fun1<Boolean,T> var2) { return select1_.this.apply( var0, var1, var2); }};}}public static select1_ select1 = new select1_();public static class map_ { public <M,N> list.List<N> apply(Fun1<N,M> f
,list.List<M> l
) {return new Fun1<list.List<N>,list.List<M>> () {public list.List<N> apply(list.List<M> var0) { return new Fail<list.List<N>>() { public list.List<N> fail() { return 
new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {if(isNil(var0))return new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<N>>() { public list.List<N> fail() { return 
new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {if(isCons(var0))return new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {M m=consHead(var0);return new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {list.List<M> ms=consTail(var0);return new Fun1<list.List<N>,Fail<list.List<N>>>() { public list.List<N> apply(Fail<list.List<N>> fail) {return map.apply(f,ms).cons(
f.apply(m));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<N>>() { public list.List<N> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <M,N> Fun2<list.List<N>,Fun1<N,M>,list.List<M>> asFun2() { return new Fun2<list.List<N>,Fun1<N,M>,list.List<M>>() { public list.List<N> apply(Fun1<N,M> var0,list.List<M> var1) { return map_.this.apply( var0, var1); }};}}public static map_ map = new map_();public static class remove_ { public <T> list.List<T> apply(T v
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(eql(h,v)) {return remove.apply(v,t);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return remove.apply(v,t).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<list.List<T>,T,list.List<T>> asFun2() { return new Fun2<list.List<T>,T,list.List<T>>() { public list.List<T> apply(T var0,list.List<T> var1) { return remove_.this.apply( var0, var1); }};}}public static remove_ remove = new remove_();public static class remove1_ { public <T> list.List<T> apply(T v
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(eql(h,v)) {return t;} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return remove1.apply(v,t).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<list.List<T>,T,list.List<T>> asFun2() { return new Fun2<list.List<T>,T,list.List<T>>() { public list.List<T> apply(T var0,list.List<T> var1) { return remove1_.this.apply( var0, var1); }};}}public static remove1_ remove1 = new remove1_();public static class length_ { public <T> int apply(list.List<T> l
) {return new Fun1<Integer,list.List<T>> () {public Integer apply(list.List<T> var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> t=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1 + length.apply(t);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isNil(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 0;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<Integer,list.List<T>> asFun1() { return new Fun1<Integer,list.List<T>>() { public Integer apply(list.List<T> var0) { return length_.this.apply( var0); }};}}public static length_ length = new length_();public static class flatten_ { public <T> list.List<T> apply(list.List<list.List<T>> lists
) {return new Fun1<list.List<T>,list.List<list.List<T>>> () {public list.List<T> apply(list.List<list.List<T>> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<list.List<T>> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return append(h,flatten.apply(t));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(lists);}public <T> Fun1<list.List<T>,list.List<list.List<T>>> asFun1() { return new Fun1<list.List<T>,list.List<list.List<T>>>() { public list.List<T> apply(list.List<list.List<T>> var0) { return flatten_.this.apply( var0); }};}}public static flatten_ flatten = new flatten_();public static class count_ { public <T> int apply(T x
,list.List<T> l
) {return new Fun1<Integer,list.List<T>> () {public Integer apply(list.List<T> var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> t=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return (eql(h,x)) ? 1 + count.apply(x,t) : count.apply(x,t);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isNil(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 0;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Integer,T,list.List<T>> asFun2() { return new Fun2<Integer,T,list.List<T>>() { public Integer apply(T var0,list.List<T> var1) { return count_.this.apply( var0, var1); }};}}public static count_ count = new count_();public static class hasPrefix_ { public <T> boolean apply(list.List<T> list
,list.List<T> prefix
) {return new Fun2<Boolean,list.List<T>,list.List<T>> () {public Boolean apply(list.List<T> var0,list.List<T> var1) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> l1=var0;return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var1))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return true;}}.apply(fail);else return fail.fail();}}.apply(fail);}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> list=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var1))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T y=consHead(var1);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> prefix=consTail(var1);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(eql(x,y)) {return hasPrefix.apply(list,prefix);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> l1=var0;return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> l2=var1;return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);}}.apply(fail);}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(list,prefix);}public <T> Fun2<Boolean,list.List<T>,list.List<T>> asFun2() { return new Fun2<Boolean,list.List<T>,list.List<T>>() { public Boolean apply(list.List<T> var0,list.List<T> var1) { return hasPrefix_.this.apply( var0, var1); }};}}public static hasPrefix_ hasPrefix = new hasPrefix_();public static class nth_ { public <T> T apply(list.List<T> l
,int n
) {return new Fun1<T,list.List<T>> () {public T apply(list.List<T> var0) { return new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T h=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {list.List<T> t=consTail(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return (n==0) ? h : t.nth((n) - (1));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isNil(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return esl.Library.throwError("cannot take nth element.");}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<T,list.List<T>,Integer> asFun2() { return new Fun2<T,list.List<T>,Integer>() { public T apply(list.List<T> var0,Integer var1) { return nth_.this.apply( var0, var1); }};}}public static nth_ nth = new nth_();public static class take_ { public <T> list.List<T> apply(list.List<T> l
,int n
) {if(n==0) {return new list.Nil();} else {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return take.apply(t,(n) - (1)).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return esl.Library.throwError("cannot take element " + n);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}}public <T> Fun2<list.List<T>,list.List<T>,Integer> asFun2() { return new Fun2<list.List<T>,list.List<T>,Integer>() { public list.List<T> apply(list.List<T> var0,Integer var1) { return take_.this.apply( var0, var1); }};}}public static take_ take = new take_();public static class drop_ { public <T> list.List<T> apply(list.List<T> l
,int n
) {if(n==0) {return l;} else {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return drop.apply(t,(n) - (1));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return esl.Library.throwError("cannot drop element " + n);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}}public <T> Fun2<list.List<T>,list.List<T>,Integer> asFun2() { return new Fun2<list.List<T>,list.List<T>,Integer>() { public list.List<T> apply(list.List<T> var0,Integer var1) { return drop_.this.apply( var0, var1); }};}}public static drop_ drop = new drop_();public static class subst_ { public <T> list.List<T> apply(T n
,T o
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return (eql(h,o)) ? subst.apply(n,o,t).cons(
n) : subst.apply(n,o,t).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun3<list.List<T>,T,T,list.List<T>> asFun3() { return new Fun3<list.List<T>,T,T,list.List<T>>() { public list.List<T> apply(T var0,T var1,list.List<T> var2) { return subst_.this.apply( var0, var1, var2); }};}}public static subst_ subst = new subst_();public static class head_ { public <T> T apply(list.List<T> l
) {return new Fun1<T,list.List<T>> () {public T apply(list.List<T> var0) { return new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T h=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {list.List<T> t=consTail(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return h;}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isNil(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return esl.Library.throwError("cannot take the head of []");}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<T,list.List<T>> asFun1() { return new Fun1<T,list.List<T>>() { public T apply(list.List<T> var0) { return head_.this.apply( var0); }};}}public static head_ head = new head_();public static class tail_ { public <T> list.List<T> apply(list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return t;}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return esl.Library.throwError("cannot take the tail of []");}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<list.List<T>,list.List<T>> asFun1() { return new Fun1<list.List<T>,list.List<T>>() { public list.List<T> apply(list.List<T> var0) { return tail_.this.apply( var0); }};}}public static tail_ tail = new tail_();public static class isNil_ { public <T> boolean apply(list.List<T> l
) {return new Fun1<Boolean,list.List<T>> () {public Boolean apply(list.List<T> var0) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return true;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> l=var0;return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<Boolean,list.List<T>> asFun1() { return new Fun1<Boolean,list.List<T>>() { public Boolean apply(list.List<T> var0) { return isNil_.this.apply( var0); }};}}public static isNil_ isNil = new isNil_();public static class member_ { public <T> boolean apply(T e
,list.List<T> l
) {return new Fun1<Boolean,list.List<T>> () {public Boolean apply(list.List<T> var0) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(eql(x,e)) {return true;} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return member.apply(e,xs);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Boolean,T,list.List<T>> asFun2() { return new Fun2<Boolean,T,list.List<T>>() { public Boolean apply(T var0,list.List<T> var1) { return member_.this.apply( var0, var1); }};}}public static member_ member = new member_();public static class reverse_ { public <T> list.List<T> apply(list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T x=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> xs=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return append(reverse.apply(xs),new list.Nil()
.cons(x));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<list.List<T>,list.List<T>> asFun1() { return new Fun1<list.List<T>,list.List<T>>() { public list.List<T> apply(list.List<T> var0) { return reverse_.this.apply( var0); }};}}public static reverse_ reverse = new reverse_();public static class exists_ { public <T> boolean apply(Fun1<Boolean,T> pred
,list.List<T> l
) {return new Fun1<Boolean,list.List<T>> () {public Boolean apply(list.List<T> var0) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(pred.apply(x)) {return true;} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return exists.apply(pred,xs);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Boolean,Fun1<Boolean,T>,list.List<T>> asFun2() { return new Fun2<Boolean,Fun1<Boolean,T>,list.List<T>>() { public Boolean apply(Fun1<Boolean,T> var0,list.List<T> var1) { return exists_.this.apply( var0, var1); }};}}public static exists_ exists = new exists_();public static class forall_ { public <T> boolean apply(Fun1<Boolean,T> pred
,list.List<T> l
) {return new Fun1<Boolean,list.List<T>> () {public Boolean apply(list.List<T> var0) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(pred.apply(x)) {return forall.apply(pred,xs);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> xs=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Boolean,Fun1<Boolean,T>,list.List<T>> asFun2() { return new Fun2<Boolean,Fun1<Boolean,T>,list.List<T>>() { public Boolean apply(Fun1<Boolean,T> var0,list.List<T> var1) { return forall_.this.apply( var0, var1); }};}}public static forall_ forall = new forall_();public static class replaceNth_ { public <T> list.List<T> apply(list.List<T> l
,int n
,T x
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return esl.Library.throwError("cannot replace nth of []");}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(n==0) {return t.cons(
x);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return replaceNth.apply(t,(n) - (1),x).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun3<list.List<T>,list.List<T>,Integer,T> asFun3() { return new Fun3<list.List<T>,list.List<T>,Integer,T>() { public list.List<T> apply(list.List<T> var0,Integer var1,T var2) { return replaceNth_.this.apply( var0, var1, var2); }};}}public static replaceNth_ replaceNth = new replaceNth_();public static class indexOf_ { public <T> int apply(T t
,list.List<T> l
) {return new Fun1<Integer,list.List<T>> () {public Integer apply(list.List<T> var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isNil(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return (0) - (1);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> l=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(eql(h,t)) {return 0;} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> l=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 1 + indexOf.apply(t,l);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Integer,T,list.List<T>> asFun2() { return new Fun2<Integer,T,list.List<T>>() { public Integer apply(T var0,list.List<T> var1) { return indexOf_.this.apply( var0, var1); }};}}public static indexOf_ indexOf = new indexOf_();public static class select_ { public <T> list.List<T> apply(Fun1<Boolean,T> p
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(p.apply(h)) {return select.apply(p,t).cons(
h);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return select.apply(p,t);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<list.List<T>,Fun1<Boolean,T>,list.List<T>> asFun2() { return new Fun2<list.List<T>,Fun1<Boolean,T>,list.List<T>>() { public list.List<T> apply(Fun1<Boolean,T> var0,list.List<T> var1) { return select_.this.apply( var0, var1); }};}}public static select_ select = new select_();public static class last_ { public <T> T apply(list.List<T> l
) {return new Fun1<T,list.List<T>> () {public T apply(list.List<T> var0) { return new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isNil(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return esl.Library.throwError("cannot find last element of emply list");}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T x=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isNil(consTail(var0)))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return x;}}.apply(fail);else return fail.fail();}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { return 
new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {if(isCons(var0))return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {T h=consHead(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {list.List<T> l=consTail(var0);return new Fun1<T,Fail<T>>() { public T apply(Fail<T> fail) {return last.apply(l);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<T>() { public T fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<T,list.List<T>> asFun1() { return new Fun1<T,list.List<T>>() { public T apply(list.List<T> var0) { return last_.this.apply( var0); }};}}public static last_ last = new last_();public static class butlast_ { public <T> list.List<T> apply(list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T x=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(consTail(var0)))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> l=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return butlast.apply(l).cons(
h);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun1<list.List<T>,list.List<T>> asFun1() { return new Fun1<list.List<T>,list.List<T>>() { public list.List<T> apply(list.List<T> var0) { return butlast_.this.apply( var0); }};}}public static butlast_ butlast = new butlast_();public static class occurrences_ { public <T> int apply(T x
,list.List<T> l
) {return new Fun1<Integer,list.List<T>> () {public Integer apply(list.List<T> var0) { return new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isNil(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return 0;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> t=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(eql(h,x)) {return 1 + occurrences.apply(x,t);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { return 
new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {if(isCons(var0))return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {T h=consHead(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {list.List<T> t=consTail(var0);return new Fun1<Integer,Fail<Integer>>() { public Integer apply(Fail<Integer> fail) {return occurrences.apply(x,t);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Integer>() { public Integer fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<Integer,T,list.List<T>> asFun2() { return new Fun2<Integer,T,list.List<T>>() { public Integer apply(T var0,list.List<T> var1) { return occurrences_.this.apply( var0, var1); }};}}public static occurrences_ occurrences = new occurrences_();public static class filter_ { public <T> list.List<T> apply(Fun1<Boolean,T> pred
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T h=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> t=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return (pred.apply(h)) ? filter.apply(pred,t).cons(
h) : filter.apply(pred,t);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(l);}public <T> Fun2<list.List<T>,Fun1<Boolean,T>,list.List<T>> asFun2() { return new Fun2<list.List<T>,Fun1<Boolean,T>,list.List<T>>() { public list.List<T> apply(Fun1<Boolean,T> var0,list.List<T> var1) { return filter_.this.apply( var0, var1); }};}}public static filter_ filter = new filter_();public static class foldr_ { public <M,N> N apply(Fun1<N,M> map
,Fun2<N,N,N> op
,N empty
,list.List<M> list
) {return new Fun1<N,list.List<M>> () {public N apply(list.List<M> var0) { return new Fail<N>() { public N fail() { return 
new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {if(isNil(var0))return new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {return empty;}}.apply(fail);else return fail.fail();}}.apply(new Fail<N>() { public N fail() { return 
new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {if(isCons(var0))return new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {M h=consHead(var0);return new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {list.List<M> t=consTail(var0);return new Fun1<N,Fail<N>>() { public N apply(Fail<N> fail) {return op.apply(map.apply(h),foldr.apply(map,op,empty,t));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<N>() { public N fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(list);}public <M,N> Fun4<N,Fun1<N,M>,Fun2<N,N,N>,N,list.List<M>> asFun4() { return new Fun4<N,Fun1<N,M>,Fun2<N,N,N>,N,list.List<M>>() { public N apply(Fun1<N,M> var0,Fun2<N,N,N> var1,N var2,list.List<M> var3) { return foldr_.this.apply( var0, var1, var2, var3); }};}}public static foldr_ foldr = new foldr_();private static class id_ { public <T> T apply(T x
) {return x;}public <T> Fun1<T,T> asFun1() { return new Fun1<T,T>() { public T apply(T var0) { return id_.this.apply( var0); }};}}private static id_ id = new id_();public static Fun1<Integer,list.List<Integer>> sum = new Fun1<Integer,list.List<Integer>> () { public Integer apply(list.List<Integer> list
) {return foldr.apply(id.asFun1(),new Fun2<Integer,Integer,Integer> () { public Integer apply(Integer x
,Integer y
) {return x + y;}},0,list);}};public static class removeDups_ { public <T> list.List<T> apply(list.List<T> list
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return new list.Nil();}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T x=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> l=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return removeDups.apply(remove.apply(x,l)).cons(
x);}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(list);}public <T> Fun1<list.List<T>,list.List<T>> asFun1() { return new Fun1<list.List<T>,list.List<T>>() { public list.List<T> apply(list.List<T> var0) { return removeDups_.this.apply( var0); }};}}public static removeDups_ removeDups = new removeDups_();public static class prefixes_ { public <T> list.List<list.List<T>> apply(list.List<T> l
) {return new Fun0<list.List<list.List<T>>>() { public list.List<list.List<T>> apply() {Cell<Fun2<list.List<list.List<T>>,list.List<list.List<T>>,list.List<T>>> pre = new Cell<Fun2<list.List<list.List<T>>,list.List<list.List<T>>,list.List<T>>>(null);pre.setValue(new Fun2<list.List<list.List<T>>,list.List<list.List<T>>,list.List<T>> () { public list.List<list.List<T>> apply(list.List<list.List<T>> prefixes
,list.List<T> rest
) {print.apply(rest);if(eql(rest,new list.Nil())) {return prefixes;} else {return pre.getValue().apply(append(prefixes,new list.Nil()
.cons(append(last.apply(prefixes),new list.Nil()
.cons(head.apply(rest))))),tail.apply(rest));}}});return pre.getValue().apply(new list.Nil()
.cons(new list.Nil()),l);}}.apply();}public <T> Fun1<list.List<list.List<T>>,list.List<T>> asFun1() { return new Fun1<list.List<list.List<T>>,list.List<T>>() { public list.List<list.List<T>> apply(list.List<T> var0) { return prefixes_.this.apply( var0); }};}}public static prefixes_ prefixes = new prefixes_();public static class subset_ { public <T> boolean apply(list.List<T> l1
,list.List<T> l2
) {return new Fun1<Boolean,list.List<T>> () {public Boolean apply(list.List<T> var0) { return new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isNil(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return true;}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(isCons(var0))return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {T x=consHead(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> l1=consTail(var0);return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {if(member.apply(x,l2)) {return subset.apply(l1,l2);} else return fail.fail();}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<Boolean>() { public Boolean fail() { return 
new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {list.List<T> x=var0;return new Fun1<Boolean,Fail<Boolean>>() { public Boolean apply(Fail<Boolean> fail) {return false;}}.apply(fail);}}.apply(new Fail<Boolean>() { public Boolean fail() { throw new Error(" case failed."); } }); } }); } }); } }.fail(); } }.apply(l1);}public <T> Fun2<Boolean,list.List<T>,list.List<T>> asFun2() { return new Fun2<Boolean,list.List<T>,list.List<T>>() { public Boolean apply(list.List<T> var0,list.List<T> var1) { return subset_.this.apply( var0, var1); }};}}public static subset_ subset = new subset_();public static class setEql_ { public <T> boolean apply(list.List<T> l1
,list.List<T> l2
) {return (subset.apply(l1,l2)) && (subset.apply(l2,l1));}public <T> Fun2<Boolean,list.List<T>,list.List<T>> asFun2() { return new Fun2<Boolean,list.List<T>,list.List<T>>() { public Boolean apply(list.List<T> var0,list.List<T> var1) { return setEql_.this.apply( var0, var1); }};}}public static setEql_ setEql = new setEql_();public static class removeAll_ { public <T> list.List<T> apply(list.List<T> removables
,list.List<T> l
) {return new Fun1<list.List<T>,list.List<T>> () {public list.List<T> apply(list.List<T> var0) { return new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isNil(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return l;}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { return 
new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {if(isCons(var0))return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {T t=consHead(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {list.List<T> r=consTail(var0);return new Fun1<list.List<T>,Fail<list.List<T>>>() { public list.List<T> apply(Fail<list.List<T>> fail) {return removeAll.apply(r,remove.apply(t,l));}}.apply(fail);}}.apply(fail);}}.apply(fail);else return fail.fail();}}.apply(new Fail<list.List<T>>() { public list.List<T> fail() { throw new Error(" case failed."); } }); } }); } }.fail(); } }.apply(removables);}public <T> Fun2<list.List<T>,list.List<T>,list.List<T>> asFun2() { return new Fun2<list.List<T>,list.List<T>,list.List<T>>() { public list.List<T> apply(list.List<T> var0,list.List<T> var1) { return removeAll_.this.apply( var0, var1); }};}}public static removeAll_ removeAll = new removeAll_();}

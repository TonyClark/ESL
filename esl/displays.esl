/********************************************************************************************************************************
 *                                                                                                                              *
 *                                                   EDB Displays                                                               *
 *                                                 ================                                                             *
 *                                                                                                                              *
 *   EDB can display graphics including pictures, HTML pages and filmstrips. This file defines the data types that are used     *
 *   to construct the graphics that are then supplied to the value edb::EDB.                                                    *
 *                                                                                                                              *
 ********************************************************************************************************************************/


export Actor,Actor,BrowserListener,Circle,Data,Data,Display,EDB,ESLSource,Edge,Edge,EditType,GLine,GLine,Graph,HBox,HTML,Image,JavaSource,LPoint,LabelledTree,Line,LineGraph,LinePoint,Math,Message,Message,Node,Node,Padding,Picture,PictureElement,Pie,Prop,Property,Props,RawText,Rectangle,Row,Row,Sequence,Slice,Slice,Table,Text,Tree,TreeElement,TreeNode,VBox,edb,edgeProps,edgeSource,edgeTarget,hasProp,nodeId,nodeProps,propValue,setEdgeProps,setNodeProps,setProp;

Act EDB {
  export 
    math::Math;
    message::Forall[T] (T)->T; 
    display::Forall[T] (Str,T)->Void; 
    button::(Str,Str,Str,Str,()->Void)->Void; 
    getProperty::Forall[T] (Str) -> T;
    setProperty::Forall[T] (Str,T) -> T;
  Show(Str,Display);
  Filmstrip(Str,[Display]);
  AddBrowserListener(BrowserListener);
  Edit(EditType);
}

edb::EDB = null[EDB];

type Math = {
  circlePos::(Int,Int,Int,Int) -> Point
};

Act BrowserListener {
  BrowserEvent(Str);
}

data Property = Prop(Str,Str);
type Props    = [Property];

propValue(props::Props,n::Str)::Str = case props { ps1 + [Prop(m,v)] + ps2 when m = n -> v; }
hasProp(props::Props,n::Str)::Bool = case props { ps1 + [Prop(m,v)] + ps2 when m = n -> true; props -> false; }
setProp(props::Props,n::Str,v::Str)::Props = case props { ps1 + [Prop(m,v0)] + ps2 when m = n -> ps1 + [Prop(n,v)] + ps2; }

data PictureElement = // Shapes, images and text with absolute positions...
  Rectangle(Int,Int,Int,Int,Str)
| Circle(Int,Int,Int,Str)
| Line(Int,Int,Int,Int,Str)
| Image(Int,Int,Int,Int,Str)
| Text(Int,Int,Str,Str);

data TreeElement = // Horizontal and vertical layout with elastic padding...
   TreeNode(PictureElement)
|  VBox(Props,[TreeElement])
|  HBox(Props,[TreeElement])
|  Padding(Props)
|  LabelledTree(Str,TreeElement);

data LinePoint = LPoint(Props,Int,Int);
data Row       = Row(Props,[Data]);
data Data      = Data(Props,Display);
data Slice     = Slice(Props,Str,Int);
data GLine     = GLine(Props,Str,[LinePoint]);
data Message   = Message(Int,Int,Int,Str);
data Actor     = Actor(Int,Int,Int,Str);
data Node      = Node(Props,Int,Display);
data Edge      = Edge(Props,Int,Int,Display);

edgeSource(e::Edge)::Int                 = case e { Edge(props,source,target,display) -> source; }
edgeTarget(e::Edge)::Int                 = case e { Edge(props,source,target,display) -> target; }
nodeId(n::Node)::Int                     = case n { Node(props,id,display) -> id; }
nodeProps(n::Node)::Props                = case n { Node(props,id,display) -> props; }
setNodeProps(n::Node,props::Props)::Node = case n { Node(props0,id,display) -> Node(props,id,display); }
edgeProps(e::Edge)::Props                = case e { Edge(props,source,target,display) -> props; }
setEdgeProps(e::Edge,props::Props)::Edge = case e { Edge(props0,source,target,display) -> Edge(props,source,target,display); }

data Display = // Types of EDB display element.        
  HTML(Str)                                      // Raw HTML.
| Table(Props,[Row])                             // A table of display elements.
| Pie(Props,Str,Int,Int,[Slice])                 // A pie chart.
| LineGraph(Props,Str,Str,Str,Int,Int,[GLine])   // A line graph.
| Picture(Int,Int,[PictureElement])              // Absolute positions.
| Sequence([Actor],[Message])                    // Sequence diagram.
| Graph(Props,[Node],[Edge])                     // Graph.
| Tree(Int,Int,TreeElement);                     // Recursive horizontal and vertical layout.


data EditType =
  ESLSource(Str,Str)
| JavaSource(Str,Str,Str)
| RawText(Str);

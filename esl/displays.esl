export TRow,TData,Data,Row,Prop,LGLine,GLine,Circle,EDBDisplay,ESLSource,ESLSource,EditType,Graph,HBox,HBox,HTML,Image,Image,JavaSource,JavaSource,LPoint,LPoint,LabelledTree,LabelledTree,Line,Line,LineGraph,LinePoint,Padding,Padding,Picture,PictureElement,Pie,Property,Props,RawText,RawText,Rectangle,Rectangle,Sequence,Table,Text,Text,Tree,TreeElement,TreeNode,TreeNode,VBox,VBox;

// This file contains a collection of type definitions that can be used to 
// create data to be supplied to EDB for display.

data Property = Prop(Str,Str);
type Props = [Property];

type PictureElement = union { 

  // Shapes, images and text with absolute positions...
  
  Rectangle(Int,Int,Int,Int,Str), 
  Circle(Int,Int,Int,Str), 
  Line(Int,Int,Int,Int,Str),
  Image(Int,Int,Int,Int,Str),
  Text(Int,Int,Str,Str) 
}

cnstr Rectangle     = PictureElement.Rectangle;
cnstr Circle        = PictureElement.Circle;
cnstr Line          = PictureElement.Line;
cnstr Image         = PictureElement.Image;
cnstr Text          = PictureElement.Text;

type TreeElement = union {

  // Horizontal and vertical layout with elastic padding...
  
  TreeNode(PictureElement),
  VBox(Props,[TreeElement]),
  HBox(Props,[TreeElement]),
  Padding(Props),
  LabelledTree(Str,TreeElement)
}

cnstr TreeNode     = unfold[TreeElement].TreeNode;
cnstr VBox         = unfold[TreeElement].VBox;
cnstr HBox         = unfold[TreeElement].HBox;
cnstr Padding      = unfold[TreeElement].Padding;
cnstr LabelledTree = unfold[TreeElement].LabelledTree;

data LinePoint = LPoint(Props,Int,Int);
data TRow[T]   = Row(Props,[TData[T]]);
data TData[T]  = Data(Props,T);
data PSlice    = Slice(Props,Str,Int);
data LGLine    = GLine(Props,Str,[LinePoint]);
data SMessage  = Message(Int,Int,Int,Str);
data SActor    = Actor(Int,Int,Int,Str);
data GNode[T]  = Node(Props,Int,T);
data GEdge[T]  = Edge(Props,Int,Int,T);

type EDBDisplay = rec T. union { 
                                                   // Types of EDB display element.
  HTML(Str),                                       // Raw HTML.
  Table(Props,[TRow[T]]),                          // A table of display elements.
  Pie(Props,Str,Int,Int,[PSlice]),                 // A pie chart.
  LineGraph(Props,Str,Str,Str,Int,Int,[LGLine]),   // A line graph.
  Picture(Int,Int,[PictureElement]),               // Absolute positions.
  Sequence([SActor],[SMessage]),                   // Sequence diagram.
  Graph(Props,[GNode[T]],[GEdge[T]]),              // Graph.
  Tree(Int,Int,TreeElement)                        // Recursive horizontal and vertical layout.
}

cnstr Tree      = unfold[EDBDisplay].Tree;
cnstr Graph     = unfold[EDBDisplay].Graph;
cnstr HTML      = unfold[EDBDisplay].HTML;
cnstr Sequence  = unfold[EDBDisplay].Sequence;
cnstr Table     = unfold[EDBDisplay].Table;
cnstr Pie       = unfold[EDBDisplay].Pie;
cnstr LineGraph = unfold[EDBDisplay].LineGraph;
cnstr Picture   = unfold[EDBDisplay].Picture;

cnstr LPoint = LinePoint.LPoint;


data EditType =
  ESLSource(Str,Str)
| JavaSource(Str,Str,Str)
| RawText(Str);

cnstr ESLSource = EditType.ESLSource; 
cnstr JavaSource = EditType.JavaSource; 
cnstr RawText = EditType.RawText; 

export main;

import 'esl/lists.esl';

type Main = Act { }

type Agent = Act { export toString::()->Str; getX::()->Int; getY::()->Int; setX::(Int)->Void; setY::(Int)->Void; }

type Grid = Act { SetColour(Int,Int,Str); Swap(Int,Int,Int,Int); } 

type Population = Act { Move(Agent); }  

data Loc = Coord(Int,Int);

coordX(p::Loc)::Int = case p { Coord(x::Int,y::Int) -> x; }

coordY(p::Loc)::Int = case p { Coord(x::Int,y::Int) -> y; }

act agent(x::Int,y::Int)::Agent {

  export getX,getY,setX,setY,toString;

  getX()::Int = x;
  getY()::Int = y;
  setX(x0::Int)::Void = x := x0;
  setY(y0::Int)::Void = y := y0;

  toString()::Str = 'Agent(' + x + ',' + y + ')';

  -> population <- Move(self);
  
}

intToFloat::(Int)->Float = builtin[(Int)->Float]('runtime.actors.Builtins','intToFloat',1);
round::(Float)->Int = builtin[(Float)->Int]('runtime.actors.Builtins','round',1); 

diffLimit::Float = 25.00;
width::Int     = 1000;
height::Int    = 600;
redpc::Int     = 40;
emptypc::Int   = 10;
empty::Int     = 0;
red::Int       = 1;
blue::Int      = 2;
limit::Int     = 60000;

opp(c::Int)::Int = if c = red then blue; else red;
colour(c::Int)::Str = if c = red then 'red'; else if c = empty then 'white'; else 'blue';

legalx(x::Int)::Bool = ((x = 0) or (x > 0)) and (x < width);
legaly(y::Int)::Bool = ((y = 0) or (y > 0)) and (y < height);

act pop::Population {

  createAgent(x::Int,y::Int)::Agent = {
    grid <- SetColour(x,y,colour(popEl(x,y)));
    new agent(x,y);
  }

  createVacancy(x::Int,y::Int)::Loc = {
    grid <- SetColour(x,y,colour(empty));
    Coord(x,y);
  }
  
  popEl(x::Int,y::Int)::Int = { 
    population[x][y];
  }

  population::Array[Array[Int]] = 
    let a::Array[Array[Int]] = new Array[Array[Int]](width); 
    in {
      for w::Int in 0..width do {
        a[w] := new Array[Int](height);
        for h::Int in 0..height do {
          a[w][h] := probably(100-emptypc)::Int { probably(redpc)::Int red; else blue; } else empty;
        }
      }
      a;
    }

  agents::Array[Array[Agent]] =
    let a::Array[Array[Agent]] = new Array[Array[Agent]](width);
    in {
      for x::Int in 0..width do {
        a[x] := new Array[Agent](height);
        for y::Int in 0..height do {
          a[x][y] := if popEl(x,y) <> empty then createAgent(x,y) else null[Agent];
        }
      }
      a;
    }

  vLength::Int = 0;

  createVacancies()::Array[Loc] =
    let vacancies::[Loc] = [ createVacancy(x,y) | x::Int <- 0..width, y::Int <- 0..height, ?(popEl(x,y) = empty) ];
    in {
      vLength := length[Loc](vacancies);
      let v::Array[Loc] = new Array[Loc](vLength);
      in {
        for i::Int in 0..vLength do {
          v[i] := nth[Loc](vacancies,i);
        }
        v;
      }
    }
  
  vacancies::Array[Loc] = createVacancies();
  
  popSet(x::Int,y::Int,c::Int)::Void = { 
    population[x][y] := c;
    {}
  }

  diffCellCount(x::Int,y::Int,c::Int)::Int =  length[Int]([ 1 | 
    dx <- [-1,0,1], 
    dy <- [-1,0,1], 
    ?not(dx=0 and dy=0),
    ?legalx(x+dx), 
    ?legaly(y+dy), 
    ?popEl(x+dx,y+dy) = c]);

  diffpc(x::Int,y::Int)::Float = (intToFloat(diffCellCount(x,y,opp(popEl(x,y))))/8.0)*100.0;

  Move(a::Agent) -> { 
    let x::Int = a.getX(); y::Int = a.getY(); in
    if diffpc(x,y) > diffLimit 
    then 
      let i::Int = random(vLength); in
      let p::Loc = vacancies[i]; in
      let x0::Int = coordX(p);
          y0::Int = coordY(p);
      in { 
        vacancies[i] := Coord(x,y);
        popSet(x0,y0,popEl(x,y));
        popSet(x,y,empty);
        grid <- Swap(x,y,x0,y0);
        a.setX(x0);
        a.setY(y0);
        self <- Move(a);
      } 
    else self <- Move(a);
  }
}

grid::Grid = new 'esl.grid.Grid'[Grid](width,height,1);

population::Population = new pop;

act main::Main {

   -> {
    edb.display[Grid]('Segregation',grid); 
  }
  
}




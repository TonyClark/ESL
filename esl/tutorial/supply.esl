export main;

import 'esl/lists.esl', 'esl/displays.esl';

Act Main {}

data Colour =
  Red
| Green
| Blue;

colours::Colours = [Red,Green,Red,Blue,Blue];

data ContainerMessage =
  State(Id,RedCount,GreenCount,BlueCount);

type ShortestTime = Int;
type ActualTime   = Int;
type ProcessTime  = Int;
type CurrentTime  = Int;
type QueueLength  = Int;
type RedCount     = Int;
type GreenCount   = Int;
type BlueCount    = Int;
type Delay        = Int;
type Id           = Int;
type Time         = Int;
type Stack[T]     = [T];
type Colours      = [Colour];
type Jobs         = [Job];
type Nodes        = [Node];
type PendingJobs  = [PendingJob];

data Job = Job(Id,CurrentTime,ShortestTime,ActualTime,Stack[Colours]);

jobCurrentTime(j::Job)::Int                        = case j { Job(id,current,shortest,actual,pending) -> current; }
setJobCurrent(j::Job,current::CurrentTime)::Job    = case j { Job(id,n,shortest,actual,pending)       -> Job(id,current,shortest,actual,pending); } 
setJobShortest(j::Job,shortest::ShortestTime)::Job = case j { Job(id,n,t,actual,pending)              -> Job(id,n,shortest+t,actual,pending); } 
addJobColours(j::Job)::Job                         = case j { Job(id,n,shortest,actual,pending)       -> Job(id,n,shortest,actual,colours:pending); } 
jobWaits(j::Job)::Job                              = case j { Job(id,n,shortest,actual,pending)       -> Job(id,n,shortest,actual+1,pending); } 
jobId(j::Job)::Id                                  = case j { Job(id,n,shortest,actual,pending)       -> id; } 
jobDelay(j::Job)::Delay                            = case j { Job(id,n,shortest,actual,pending)       -> actual-shortest; } 

data PendingJob = PendingJob(Time,Job);

Act Node {
  export 
    getColour::()->Colour;
    getId::()->Id;
  Time(Int);
  Process(Job);
  SetProxy(Colour,Node);
  Flush;
}

Act Leaf extends Node { }

Act Container extends Node {
  ProcessFailed(Job);
  ChildCompleted(Colour,Node,Job);
}

Act RootContainer extends Container {}


Act Monitor {
  Handles(Colour,Node);
}

act monitor(nodes::Nodes)::Monitor {
  Handles(c,n) -> {
    if isMonitoring
    then
      for node in nodes do {
        node <- SetProxy(c,n);
      }
    else {}
  }
}

counter::Id = 0;
newId()::Id = grab(counter) { counter := counter + 1; counter; }

act leaf(id::Id,colour::Colour,parent::Container,pTime::ProcessTime,qLength::QueueLength)::Leaf {
  export getColour,getId;
  queue::Jobs = [];
  getColour()::Colour = colour;
  getId()::Id = id;
  proxies::Hash[Colour,Node] = new Hash[Colour,Node];
  process(jobs::Jobs)::Jobs = 
    case jobs {
      [] -> [];
      Job(id,current,shortest,actual,pending):jobs -> Job(id,current-1,shortest,actual+1,pending):process(jobs);
    }
  isFinished(j::Job)::Bool = jobCurrentTime(j) <= 0;
  isIncomplete(j::Job)::Bool = not(isFinished(j));

  Flush -> {
    proxies.clear();
  }

  Process(Job(jobId,current,shortest,actual,(c:cs):pending)) when c = colour -> { 
    queue := queue + [Job(jobId,pTime,shortest+pTime,actual,cs:pending)];
  }

  Process(Job(jobId,current,shortest,actual,(c:cs):pending)) when proxies.hasKey(c) -> { 
    proxies.get(c) <- Process(Job(jobId,current,shortest,actual,(c:cs):pending));
  }

  Process(j) -> parent <- ProcessFailed(jobWaits(j));

  ChildCompleted(c,n,j) -> {}

  SetProxy(c,n) -> {
    proxies.put(c,n);
  }
  
  Time(n::Int) -> { 
    let processed::Jobs = process(take[Job](queue,qLength));
        unprocessed::Jobs = drop[Job](queue,qLength); in
    let completed::Jobs = select[Job](isFinished,processed);
        incomplete::Jobs = select[Job](isIncomplete,processed);
    in { 
      queue := incomplete + [ jobWaits(j) | j <- unprocessed ];
      for j::Job in completed do {
        parent <- ChildCompleted(colour,self,j);
      }
    }
  }
}

act container(id::Id,depth::Int,colour::Colour,parent::Container)::Container {

  export getColour,getId;

  getColour()::Colour = colour;
  getId()::Id = id;
  proxies::Hash[Colour,Node] = new Hash[Colour,Node];

  children::Nodes = [];
  m::Monitor = null[Monitor];

  process(j::Job)::Void = 
    case j {
      Job(jid,n,shortest,actual,[]:pending) -> {
        parent <- ChildCompleted(colour,self,Job(jid,n,shortest,actual,pending));
      }
      Job(id,n,t0,t1,(c:cs):pending) -> { 
        nth[Node](children,random(length[Node](children))) <- Process(j);
      }
    }

  -> { 
    if depth = 0
    then { 
      children := [ new leaf(newId(),c,self,processing,queue) | c <- colours, processing <- [10], queue <- [5] ]; 
      m := new monitor(children);
    }
    else { children := [ new container(newId(),depth-1,c,self) | c <- colours, numOfChildren <- 0..maxChildren() ];  
      m := new monitor(children);
    }
  } 

  Flush -> {
    proxies.clear();
    for n in children do {
      n <- Flush;
    }
  }

  SetProxy(c,n) -> {
    proxies.put(c,n);
  }

  ChildCompleted(c,n,j::Job) -> {
    m <- Handles(c,n);
    process(j);
  }

  ProcessFailed(j) -> { 
    process(j);
  }

  Process(Job(jobId,current,shortest,actual,(c:cs):pending)) when c = colour -> { 
    process(Job(jobId,current,shortest,actual,colours:cs:pending));
  }

  Process(Job(jobId,current,shortest,actual,(c:cs):pending)) when proxies.hasKey(c) -> { 
    proxies.get(c) <- Process(Job(jobId,current,shortest,actual,(c:cs):pending));
  }

  Process(j) -> parent <- ProcessFailed(jobWaits(j));

  Time(n::Int) -> {}
  
}

maxChildren()::Int = 3; 
isMonitoring::Bool = false;

minDelay(jobs::Jobs,min::Int)::Int =
  case jobs {
    [] -> min;
    Job(id,t,possible,actual,cs):jobs when (actual - possible) < min -> minDelay(jobs,actual-possible);
    j:jobs -> minDelay(jobs,min);
  }

maxDelay(jobs::Jobs,max::Int)::Int =
  case jobs {
    [] -> max;
    Job(id,t,possible,actual,cs):jobs when (actual - possible) > max -> maxDelay(jobs,actual-possible);
    j:jobs -> maxDelay(jobs,max);
  }

delayedBy(jobs::Jobs,delay::Int)::Int =
  case jobs {
    [] -> 0;
    Job(id,t,possible,actual,cs):jobs when (actual - possible) >= delay -> 1 + delayedBy(jobs,delay);
    j:jobs -> delayedBy(jobs,delay);
  }

act root(depth::Int,limit::Int,nodes::Int)::RootContainer {

  export getColour,getId;

  getColour()::Colour = Red;
  getId()::Id = 0;

  child::Container = new container(newId(),depth,Red,self);
  jobs::Int = 0;
  runs::Int = 4;
  completed::[Jobs] = [[]];
  counter::Int = 0;
  pending::Hash[Time,Jobs] = 
    let table::Hash[Time,Jobs] = new Hash[Time,Jobs];
    in {
      for i in 0..limit do {
        table.put(i,[ Job(newId(),0,0,0,[[Red]]) | j <- 0..random(nodes)+1 ]);
        jobs := jobs + length[Job](table.get(i));
      }
      table;
    }
  ChildCompleted(c,n,j) -> {
    completed := (j:head[Jobs](completed)):tail[Jobs](completed);
    print[Str](length[Job](head[Jobs](completed)) + ' of ' + jobs);
    if length[Job](head[Jobs](completed)) = jobs
    then {
      print[Str]('completed ' + jobs + ' jobs');
      let 
        graph(completed::[Jobs])::Display = 
          LineGraph([],'Processing ' + jobs + ' jobs over ' + runs + ' runs in ' + (now/1000) + ' seconds','Delay/10','Number of Jobs Delayed by at Least/10',1200,500,[
            GLine([],'Run-' + run + (if run < runs/2 then '(monitored)' else ''),[LPoint([],delay/10,delayedBy(jobs,delay)/10) | 
              delay <- minDelay(jobs,9999)..maxDelay(jobs,0)+1, 
              ?(delay <> 0),
              ?(delayedBy(jobs,delay) <> 0) ]) | run <- 0..runs, jobs <- [nth[Jobs](completed,run)] ]);
      in { 
        if length[Jobs](completed) = runs
        then {
          edb <- Show('Supply Chain Results',graph(completed)); 
          stopAll();
        } else {
          if length[Jobs](completed) >= runs/2 then isMonitoring := true; else {}
          completed := []:completed;
          child <- Flush;
          counter := 0;
        }
      }
    } else {}
  }

  Flush -> {
    child <- Flush;
  }

  SetProxy(c,n) -> {}

  ProcessFailed(j) -> child <- Process(j);

  Process(j::Job) -> child <- Process(j);

  Deprioritize(id) -> {}

  Prioritize(id) -> {}

  Time(n::Int) when counter < limit -> {
    for j in pending.get(counter) do {
      self <- Process(j);
    }
    counter := counter + 1;
  }

  Time(n::Int) -> {}
}

act main::Main {

  rootNode::Node = new root(2,200,25);

}

export main;

Act Main { Time(Int); }
Act Grid { SetColour(Int,Int,Str); TermiteAt(Int,Int,Int); }

size::Int                    = 120;
limit::Int                   = 40000;
numOfTermites::Int           = 600;
twig::Str                    = 'black';
background::Str              = 'white';
grid::Grid                   = new 'esl.grid.Grid'[Grid](size,size,6); 
isLegal(x::Int,y::Int)::Bool = (x = 0 or (x > 0 and x < size)) and (y = 0 or (y > 0 and y < size));

Act Termite {
  Search;
  Drop;
  FindSpace;
  GetAway(Int);
}

Act World {
  TryPickup(Int,Int,Termite);
  FindPile(Int,Int,Termite);
  TryDrop(Int,Int,Termite);
}

act world::World {
  locations::Array[Array[Str]] =
    let a::Array[Array[Str]] = new Array[Array[Str]](size);
    in {
      for x::Int in 0..size do {
        a[x] := new Array[Str](size);
        for y::Int in 0..size do {
          a[x][y] := if random(100) < 30 then twig else background;
          grid <- SetColour(x,y,a[x][y]);
        }
      }
      edb.display[Grid]('Termites',grid); 
      edb.button('Termites','stop','icons/stop.png','stop application',fun()::Void stopAll());
      a;
    }
  termites::[Termite]                 = [ new termite(n,self) | n::Int <- 0..numOfTermites ];
  foundSingleton(x::Int,y::Int)::Bool = locations[x][y] = twig and twigCount(x,y) < 5;
  foundPile(x::Int,y::Int)::Bool      = locations[x][y] = twig and twigCount(x,y) > 4; 

  isTwig(x::Int,y::Int)::Bool = {
    if isLegal(x,y)
    then locations[x][y] = twig;
    else false;
  }

  twigCount(x::Int,y::Int)::Int = {
    (if isTwig(x-1,y-1) then 1 else 0) +
    (if isTwig(x,y-1) then 1 else 0) +
    (if isTwig(x+1,y-1) then 1 else 0) +
    (if isTwig(x-1,y) then 1 else 0) +
    (if isTwig(x+1,y) then 1 else 0) +
    (if isTwig(x-1,y+1) then 1 else 0) +
    (if isTwig(x,y+1) then 1 else 0) +
    (if isTwig(x+1,y+1) then 1 else 0);
  }
    
  TryPickup(x::Int,y::Int,t::Termite) -> { 
    if foundSingleton(x,y)
    then {
      locations[x][y] := background;
      grid <- SetColour(x,y,background);
      t <- Drop;
    } else t <- Search;
  }
    
  FindPile(x::Int,y::Int,t::Termite) -> { 
    if foundPile(x,y)
    then {
      t <- FindSpace;
    } else t <- Drop;
  }
  TryDrop(x::Int,y::Int,t::Termite) -> {
    if locations[x][y] = background
    then {
      locations[x][y] := twig;
      grid <- SetColour(x,y,twig);
      t <- GetAway(20);
    } else t <- FindSpace;
  }
}

act termite(id::Int,w::World)::Termite { 
  x::Int  = random(size);
  y::Int  = random(size);
  dx::Int = random(3) - 1;
  dy::Int = random(3) - 1;
  randomDir()::Void = {
    dx := random(3)-1;
    dy := random(3)-1;
  }
  move()::Void = {
    x := (x + dx);
    y := (y + dy);
    if x < 0 
    then {
      dx := 1;
      x := 0;
      move();
    } else if x > (size - 1)
    then {
      dx := (0-1);
      x := (size - 1);
      move();
    } else if y < 0 
    then {
      dy := 1;
      y := 0;
      move();
    } else if y > (size - 1)
    then {
      dy := 0 -1;
      y := (size - 1);
      move();
    } else grid <- TermiteAt(id,x,y);
  }
  moveRandom()::Void = {
    randomDir();
    move();
  }
  
  -> self <- Search;
  
  Search -> {
    moveRandom();
    w <- TryPickup(x,y,self);
  }
  Drop -> {
    moveRandom();
    w <- FindPile(x,y,self);
  }
  FindSpace -> {
    moveRandom();
    w <- TryDrop(x,y,self);
  }
  GetAway(0) -> {
    self <- Search;
  }
  GetAway(n::Int) -> {
    move();
    self <- GetAway(n-1);
  }
}

w::World = new world;

act main::Main {
  Time(n::Int) when n > limit -> stopAll();
  Time(n::Int) -> { } 
}

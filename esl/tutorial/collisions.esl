export main;

min(x::Int,y::Int)::Int = if x < y then x; else y; 
max(x::Int,y::Int)::Int = if x > y then x; else y;  

Act GUI { 
  export 
    size::Int; 
    width::Int; 
    height::Int; 
    ballSize::Int; 
    isOccupied::(Int,Int,Int)->Bool;
    Time(Int); 
    Draw(Int,Int,Int); 
}

Act Ball { 
  export 
    x::Int; 
    y::Int; 
    Time(Int); 
    Bang(Int,Int); 
} 

Act Simulator { 
  export 
    gui::GUI; 
    balls::[Ball]; 
    SetGUI(GUI); 
    Start; 
    Stop; 
    MouseEnter; 
    MouseExit; 
    MouseMoved(Int,Int); 
    MouseClick(Int,Int); 
    Close; 
} 

Act Main { }

followMouse::Bool = false;
mouseX::Int = 0; 
mouseY::Int = 0; 

act simulator::Simulator {
 
  export gui, balls;
  gui::GUI = null[GUI];
  balls::[Ball] = [];
  
  SetGUI(g::GUI) -> gui := g; 
  Start -> balls := [ new ball(i,self) | i::Int <- 0 .. (gui.size - 1)]; 
  Stop -> for ball::Ball in balls do kill[Ball](ball);
  Close -> stopAll();
  MouseEnter -> followMouse := true;
  MouseExit -> followMouse := false;
  MouseMoved(x::Int,y::Int) -> {
    mouseX := x;
    mouseY := y;
  }
  MouseClick(x::Int,y::Int) -> {
    if followMouse
    then {
      followMouse := false;
      for ball::Ball in balls do {
        ball <- Bang(x,y);
      }
    } else followMouse := true;
  }
}

act ball(id::Int,simulator::Simulator)::Ball {

  export x,y;
  
  x::Int = random(simulator.gui.width);
  y::Int = random(simulator.gui.height);
  dx::Int = random(3) - 2;
  dy::Int = random(3) - 2;
  
  checkDeltas(n::Int)::Void = 
    if (dx = 0) and (dy = 0)
    then { 
      dx := (random(3) - 2)*n;
      dy := (random(3) - 2)*n;
      checkDeltas(n+1);
    } else {}
  
  hitWalls()::Void = {
    if (x + dx + simulator.gui.ballSize) > simulator.gui.width
    then dx := 0 - dx;
    else if (x + dx) < 0
    then dx := 0 - dx;
    else if (y + dy + simulator.gui.ballSize) > simulator.gui.height
    then dy := 0 - dy;
    else if (y + dy) < 0
    then dy := 0 - dy;
    else {}
    {}
  }
    
  overlaps(x1::Int,y1::Int,x2::Int,y2::Int)::Bool = 
    (((x1 > x2) andalso 
      (x1 < (x2 + simulator.gui.ballSize))) andalso 
     ((y1 > y2) andalso 
      (y1 < (y2 + simulator.gui.ballSize)))) orelse
    (((x2 > x1) andalso 
      (x2 < (x1 + simulator.gui.ballSize))) andalso 
     ((y2 > y1) andalso 
      (y2 < (y1 + simulator.gui.ballSize))));
  
  hitBalls()::Void =
    if simulator.gui.isOccupied(id,x+dx,y+dy)
    then {
      dx := 0 - dx;
      dy := 0 - dy;
    } else {}

  moveTowardsMouse()::Void = {
    if mouseX < x then x := x - random(10); else x := x + random(10);
    if mouseY < y then y := y - random(10); else y := y + random(10);
    simulator.gui <- Draw(id,x,y);
  }
    
  -> checkDeltas(2);

  Bang(bx::Int,by::Int) -> {
    if x < bx then dx := random(5); else dx := 0-random(5);
    if y < by then dy := random(5); else dy := 0-random(5);
    x := x + (dx*50);
    y := y + (dy*50);
  }

  Time(n::Int)  -> { 
    if followMouse
    then moveTowardsMouse();
    else {
      hitWalls();
      hitBalls();
      x := max(0,min(x + dx,simulator.gui.width));
      y := max(0,min(y + dy,simulator.gui.height));
      simulator.gui <- Draw(id,x,y);
    }
  }
}

act main::Main {

  // Demonstrates how ESL can communicate with Java. The class test.CollisionGUI implements a simple
  // GUI via Java SWT. The Java agents communicate with ESL via messages in the usual way. When the GUI
  // appears, click on Start to run the simulation and then Stop to stop it. You can change the parameters
  // via the text input fields and then re-run the simulation.

  -> edb.display[GUI]('Collisions',new 'esl.collisions.CollisionFrame'[GUI](new simulator));
}








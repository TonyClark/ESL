export main;

import 'esl/lists.esl', 'esl/displays.esl';

// Demonstrates how actors can be used to implement recursive stack frames so that
// several calls on a function can occur concurrently. Also provides an example
// of how a sequence diagram can be constructed and displayed via EDB.

type Customer = Act { export id::Int; Value(Int,Int,Int); }
type Fact = Act{ export id::Int; Get(Int,Int,Int,Customer); }

data M =
  GetValue(Int,Int,Int,Fact,Fact,Customer,Customer)
| ReturnValue(Int,Int,Int,Customer,Customer)
| Zero(Int,Int,Fact,Customer)
| Start(Int,Int,Customer,Fact);

actors::[Actor] = [];
messages::[M] = [];

addActor(behaviour::Str)::Int =
  grab(actors) {
    let id::Int = length[Actor](actors);
    in {
      actors := actors + [Actor(id,0,timeOut,behaviour)];
      id;
    }
  }
  
addGet(threadId::Int,time::Int,n::Int,source::Fact,target::Fact,sourceCustomer::Customer,targetCustomer::Customer)::Void =
  grab(messages) {
    messages := messages + [GetValue(n,threadId,time,source,target,sourceCustomer,targetCustomer)];
  }
  
addReturn(threadId::Int,time::Int,v::Int,customer::Customer,proxy::Customer)::Void = 
 grab(messages) {
   messages := messages + [ ReturnValue(v,threadId,time,customer,proxy) ];
 }
 
addZero(threadId::Int,time::Int,f::Fact,c::Customer)::Void =
  grab(messages) {
    messages := messages + [ Zero(threadId,time,f,c) ];
  }
 
addStart(n::Int,threadId::Int,c::Customer,f::Fact)::Void =
  grab(messages) {
    messages := messages + [ Start(n,threadId,c,f) ];
  }
  
timeOut::Int = 1000;

act fact::Fact {
  export id;
  id::Int = 0;
  -> id := addActor('fact');
  Get(0,threadId,time::Int,c::Customer) -> {
    addZero(threadId,time,self,c);
    c <- Value(threadId,time+1,1);
  }
  Get(n::Int,threadId,time::Int,c) -> {
    let cc::Customer = new cust(n,c);
    in {
      addGet(threadId,time,n-1,self,self,c,cc);
      self <- Get(n-1,threadId,time+1,cc);
    }
  }
  Time(n::Int) -> {}
}

act cust(n::Int,c::Customer)::Customer {
  export id;
  id::Int = 0;
  -> id := addActor('cust');
  Value(threadId,time::Int,m::Int) -> {
    addReturn(threadId,time,n*m,self,c);
    setDeath(id,time);
    c <- Value(threadId,time+1,n*m);
  }
  Time(t::Int) -> {}
}

translate(msIn::[M])::[Message] =
  case msIn {
    [] -> [];
    Start(n,threadId,c,f):rest -> 
      Message(1,c.id,f.id,'[' + threadId + ']Start('+n+')'):translate(rest);
    GetValue(n,threadId,time,source,target,sourceCustomer,targetCustomer):rest -> 
      Message(time,source.id,target.id,'[' + threadId + ']Get(' + n + ',' + sourceCustomer.id + ',' + targetCustomer.id + ')'):translate(rest);
    ReturnValue(n,threadId,time,source,target):rest -> 
      Message(time,source.id,target.id,'[' + threadId + ']Return(' + n + ')'):translate(rest);
    Zero(threadId,time,f,c):rest -> 
      Message(time,f.id,c.id,'[' + threadId + ']One'):translate(rest);
  }
  
getActor(id::Int,as::[Actor])::Actor =
  case as {
    Actor(i,time,death,b):l when i = id -> Actor(i,time,death,b);
    a:l -> getActor(id,l);
  }
  
changeDeath(a::Actor,t::Int)::Actor =
  case a {
    Actor(i,birth,death,b) ->  Actor(i,birth,t,b);
  }
  
setDeath(id::Int,time::Int)::Void =
  let oldActor::Actor = getActor(id,actors); in
  let newActor::Actor = changeDeath(oldActor,time);
  in grab(actors) {
   actors := subst[Actor](newActor,oldActor,actors);
  }

act main::Customer {
  export id;
  id::Int = 0;
  counter::Int = 0;
  count::Int = 1;
  f::Fact = new fact;
  numberOfFacts::Int = 2;
  computeFact(n::Int)::Void = {
    addStart(n,counter,self,f);
    counter := counter + 1;
    f <- Get(n,counter-1,1,self);
  }
  messageTime(m::Message)::Int = case m { Message(t,s,tt,l) ->  t; }
  messageBefore(time::Int)::(Message)->Bool = fun(m::Message)::Bool messageTime(m) < time;
  createFilmstrip(ms)::[Display] =
    [Sequence(actors,select[Message](messageBefore(t),ms)) | t <- 1..numberOfFacts];
  -> {
    id := addActor('Main');
    computeFact(3);
    computeFact(3);
  }
  Value(threadId::Int,time::Int,n::Int) -> {
    setDeath(id,time);
    if count = numberOfFacts
    then {
      edb <- Show('Factorial',Sequence(actors,translate(messages)));
      stopAll();
    } else count := count + 1;
  }
}
































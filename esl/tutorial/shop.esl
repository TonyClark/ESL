export main;

import 'esl/lists.esl', 'esl/displays.esl';

edb::EDB = null[EDB];

type Main = Act { Time(Int); }

data CustomerState = 
               // A customer is in one of the following states...
  NotInShop    // Hanging around outside.
| Browsing     // Inside the shop looking at items.
| Queuing      // Queuing with an item for purchase.
| SeekingHelp  // Looking for assistance.
| GettingHelp; // Receiving assistance.

data AssistantState = 
               // An assistant is in one of the following states...
  OnFloor      // Looking around to help shoppers.
| Busy;       // Walking to a till.

type Customer = Act { 
  export getId::()->Int;
  Time(Int);                    // Tick.
  Helped;                      // Help was completed.
  Leave;
  TimeOut;
} 

type Assistant = Act {

  CompletedHelp;
  CompletedTill;
  CustomerNeedsHelp;
  CustomerAtTill;
  Time(Int);
}


// ************************* START OF DISPLAY CODE ********************************

Act ShopDisplay { 
  RegisterCustomer(Int,Str,[Str]); 
  ChangeState(Int,Str); 
  Sale(Int); 
  TimeOut(Int); 
}

data CustomerDisplay = C(Int,Str,[Str],Int,Int);

row(ds::[Data])::Row = Row([Prop('style','border: 1px solid black;')],ds);
tdata(d::Display)::Data = Data([Prop('style','font-size: 5px;border: 1px solid black;')],d);
rdata(d::Display)::Data = Data([Prop('style','font-size: 5px;border: 1px solid black;background-color:red;')],d);
bdata(d::Display)::Data = Data([Prop('style','font-size: 5px;border: 1px solid black;background-color:lightblue;')],d);

act displayB::ShopDisplay {
  customers::[CustomerDisplay] = [];
  asTable()::Display =
    letrec
      rows(cs::[CustomerDisplay])::[Row] =
        case cs {
          [] -> [];
            C(c::Int,s::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] -> 
              [row([bdata(HTML('Customer-' + c))] + 
                   (states(s,ss)) + 
                   [tdata(HTML('Sales = ' + sales)),
                    tdata(HTML('Walkouts = ' + walkouts))])
              ] + rows(rest);
        }
      
      states(current::Str,allStates::[Str])::[Data] =
        case allStates {
          [] -> [];
          state:ss when state = current -> [rdata(HTML(state+''))] + states(current,ss);
          state:ss -> [tdata(HTML(state+''))] + states(current,ss);
        }
    in Table([][Property],[row([
         tdata(Table([][Property],rows(take[CustomerDisplay](customers,length[CustomerDisplay](customers)/2)))),
         tdata(Table([][Property],rows(drop[CustomerDisplay](customers,length[CustomerDisplay](customers)/2))))
       ])] + [row([tdata((HTML('time = ' + now))),tdata((HTML('time = ' + now)))])]);
  changeState(c::Int,s::Str,cs::[CustomerDisplay])::[CustomerDisplay] =
    case cs {
      [] -> cs;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] when c1 = c-> C(c,s,ss,sales,walkouts):rest;
      (c1::CustomerDisplay):rest::[CustomerDisplay] -> c1 : (changeState(c,s,rest));
    }
  getSales(cs::[CustomerDisplay])::Int =
    case cs {
      [] -> 0;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] -> sales + getSales(rest);
    }
  getWalkouts(cs::[CustomerDisplay])::Int =
    case cs {
      [] -> 0;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] -> walkouts + getWalkouts(rest);
    }
  getEvents(cs::[CustomerDisplay])::Int =
    case cs {
      [] -> 0;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] -> walkouts + sales + getEvents(rest);
    }
  sale(customer::Int,customers::[CustomerDisplay])::[CustomerDisplay] =
    case customers {
      [] -> customers;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] when c1 = customer -> C(c1,s1,ss,sales+1,walkouts):rest;
      (c1::CustomerDisplay):rest::[CustomerDisplay] -> c1 : (sale(customer,rest));
    }
  timeout(customer::Int,customers::[CustomerDisplay])::[CustomerDisplay] =
    case customers {
      [] -> customers;
      C(c1::Int,s1::Str,ss::[Str],sales::Int,walkouts::Int):rest::[CustomerDisplay] when c1 = customer-> C(c1,s1,ss,sales,walkouts+1):rest;
      (c1::CustomerDisplay):rest::[CustomerDisplay] -> c1 : (timeout(customer,rest));
    }
  ChangeState(c::Int,s::Str) -> {
    customers := changeState(c,s,customers);
    let events::Int = getEvents(customers); in
    let sales::Int = getSales(customers);
        walkouts::Int = getWalkouts(customers);
    in {
      if events = 0 then events := 1; else {}
      edb <-Show('customers',Table([],[
        Row([],[
          Data([],asTable())
      //    Data([],Pie([][Property],'Satisfaction',500,300,[
      //      Slice([],'satisfied',(sales * 100)/events),
      //      Slice([],'unsatisfied',(walkouts * 100)/events)
      //    ]))
        ])
      ]));
    }
  }
  Sale(c::Int) -> customers := sale(c,customers);
  TimeOut(c::Int) -> {
    customers := timeout(c,customers);
  }
  RegisterCustomer(c::Int,state::Str,states::[Str]) -> {
    customers := customers + [C(c,state,states,0,0)];
    edb <- Show('customers',asTable());
  } 
}

display::ShopDisplay = new displayB;
 
// **************************** END OF DISPLAY CODE ************************************************


type HelpMonitor = Act {
  NeedsHelp(Customer);
  Available(Assistant);
  Time(Int);
}

data Help = 
    Helping(Assistant,Customer,Int)
|   WaitingToHelp(Assistant,Int)
|   WaitingForHelp(Customer,Int);

data Tills = 
    TillService(Assistant,Customer,Int,Int)
|   TillReady(Assistant,Int,Int)
|   TillQueue(Customer,Int,Int);

act assistant::Assistant {

  state::AssistantState = OnFloor;
  hasNoticed::Int = 75;

  CompletedHelp -> {
    state := OnFloor;
  }
  CompletedTill -> {
    state := OnFloor;
  }
  CustomerNeedsHelp when state = OnFloor -> probably(hasNoticed) {
      hMonitor <- Available(self);
      state := Busy;
  }
  CustomerNeedsHelp -> {}
  CustomerAtTill when state = OnFloor -> probably(hasNoticed) {
      tMonitor <- Serve(self);
      state := Busy;
  }
  CustomerAtTill -> {}
  Time(n::Int) -> {}
  
}

act helpMonitor::HelpMonitor {
  state::[Help] = [][Help];
  maxHelpTime::Int = 50;
  maxWaitTime::Int = 30;
  assistantWaitingToHelp(h::[Help])::Bool =
    case h {
      [][Help] -> false;
      WaitingToHelp(a::Assistant,n::Int):h::[Help] -> true;
      x::Help:h::[Help] -> assistantWaitingToHelp(h);
    }
  startHelp(c::Customer,n::Int,h::[Help])::[Help] =
    case h {
      [][Help] -> [WaitingForHelp(c,n-1)];
      WaitingToHelp(a::Assistant,m::Int):h::[Help] -> {
        //print[Str]('START HELP ' + a + ' ' + c);
        display <- ChangeState(c.getId(),'GettingHelp');
        Helping(a,c,random(maxHelpTime)):process(h);
      }
      x::Help:h::[Help] -> x:startHelp(c,n,h);
    }
  tryToHelp(a::Assistant,n::Int,h::[Help])::[Help] =
    case h {
      [][Help] -> [WaitingToHelp(a,n-1)];
      WaitingForHelp(c::Customer,m::Int):h::[Help] -> {
        //print[Str]('START HELP ' + a + ' ' + c);
        display <- ChangeState(c.getId(),'GettingHelp');
        Helping(a,c,random(maxHelpTime)):process(h);
      }
      x::Help:h::[Help] -> x:tryToHelp(a,n,h);
    }
  process(s::[Help])::[Help] =
    case s {
      [][Help] -> s;
      Helping(a::Assistant,c::Customer,0):s::[Help] -> {
        a <- CompletedHelp;
        c <- Helped;
        process(s);
      }
      Helping(a::Assistant,c::Customer,n::Int):s::[Help] -> 
        Helping(a,c,n-1):process(s);
      WaitingForHelp(c::Customer,0):s::[Help] -> {
        //print[Str]('CUSTOMER TIMEOUT ' + c);
        c <- TimeOut;
        process(s);
      }
      WaitingForHelp(c::Customer,n::Int):s::[Help] -> {
        startHelp(c,n,s);
      }
      WaitingToHelp(a::Assistant,0):s::[Help] -> {
        //print[Str]('ASSISTANT TIMEOUT ' + a);
        a <- CompletedHelp;
        process(s);
      }
      WaitingToHelp(a::Assistant,n::Int):s::[Help] -> {
        tryToHelp(a,n,s);
      }
    }
  NeedsHelp(c::Customer) -> 
    if assistantWaitingToHelp(state)
    then state := WaitingForHelp(c,maxWaitTime):state;
    else {
      state := WaitingForHelp(c,maxWaitTime):state;
      for a::Assistant in assistants do a <- CustomerNeedsHelp;
    }
  Available(a::Assistant) -> state := WaitingToHelp(a,maxWaitTime):state;
  Time(n::Int) -> {
    state := process(state);
  }
  
}

type TillMonitor = Act {
  Queue(Customer);
  Serve(Assistant);
  Time(Int);
}

act tillMonitor::TillMonitor {
  state::[Tills] = [][Tills];
  maxServeTime::Int = 2;
  maxWaitTime::Int = 100;
  maxIdleTime::Int = 200;
  findBusyTill(s::[Tills])::Int = 
    case s {
      TillQueue(c::Customer,till::Int,n::Int):s::[Tills] -> till;
      [][Tills] -> 0-1;
      x::Tills:s::[Tills] -> findBusyTill(s);
    }
  findServicedTill(s::[Tills])::Int = 
    case s {
      TillReady(a::Assistant,till::Int,n::Int):s::[Tills] -> till;
      [][Tills] -> 0-1;
      x::Tills:s::[Tills] -> findServicedTill(s);
    }
  startServe(c::Customer,till::Int,n::Int,h::[Tills])::[Tills] =
    case h {
      [][Tills] -> {
        [TillQueue(c,till,n-1)];
      }
      TillReady(a::Assistant,atill::Int,m::Int):h::[Tills] when atill = till -> {
        //print[Str]('START TO SERVE ' + a + ' ' + c);
        display <- ChangeState(c.getId(),'Buying');
        TillService(a,c,till,random(maxServeTime)):process(h);
      }
      x::Tills:h::[Tills] -> x:startServe(c,till,n,h);
    }
  tryToServe(a::Assistant,till::Int,n::Int,h::[Tills])::[Tills] =
    case h {
      [][Tills] -> [TillReady(a,till,n-1)];
      TillQueue(c::Customer,atill::Int,m::Int):h::[Help] when till = atill -> {
        //print[Str]('START TO SERVE ' + a + ' ' + c);
        display <- ChangeState(c.getId(),'Buying');
        TillService(a,c,till,random(maxServeTime)):process(h);
      }
      x::Tills:h::[Tills] -> x:tryToServe(a,till,n,h);
    }
  process(s::[Tills])::[Tills] = 
    case s {
      [][Tills] -> s;
      TillService(a::Assistant,c::Customer,till::Int,0):s::[Help] -> {
        //print[Str]('CUSTOMER PURCHASE COMPLETED ' + c);
        display <- Sale(c.getId());
        c <- Leave;
        self <- Serve(a);
        process(s);
      }
      TillService(a::Assistant,c::Customer,till::Int,n::Int):s::[Tills] -> 
        TillService(a,c,till,n-1):process(s);
      TillQueue(c::Customer,till::Int,0):s::[Tills] -> {
        //print[Str]('CUSTOMER TILL TIMEOUT ' + c);
        c <- TimeOut;
        process(s);
      }
      TillQueue(c::Customer,till::Int,n::Int):s::[Tills] -> {
        startServe(c,till,n,s);
      }
      TillReady(a::Assistant,till::Int,0):s::[Tills] -> {
        //print[Str]('ASSISTANT TILL TIMEOUT ' + a);
        a <- CompletedTill;
        process(s);
      }
      TillReady(a::Assistant,till::Int,n::Int):s::[Tills] -> {
        tryToServe(a,till,n,s);
      }
    }
  Queue(c::Customer) -> 
    let till::Int = findServicedTill(state);
    in if till < 0
       then {
         state := TillQueue(c,random(numOfTills),maxWaitTime):state;
         for a::Assistant in assistants do a <- CustomerAtTill;
       } else state := TillQueue(c,till,maxWaitTime):state;
  Serve(a::Assistant) -> 
    let till::Int = findBusyTill(state);
    in if till < 0
       then a <- CompletedTill;
       else state := TillReady(a,till,maxIdleTime):state;
  Time(n::Int) -> {
    state := process(state);
  }
  
}

numOfCustomers::Int      = 40;
numOfAssistants::Int     = 10;
numOfTills::Int          = 5;
numOfSteps::Int          = 10000;
customers::[Customer]    = [];
assistants::[Assistant]  = [];
hMonitor::HelpMonitor    = new helpMonitor;
tMonitor::TillMonitor    = new tillMonitor;

act customer(id::Int)::Customer {

  export getId;

  state::CustomerState = NotInShop;
  probOfEnteringShop::Int = 30;
  probOfBuying::Int = 80;
  probOfSeekingHelp::Int = 20;

  getId()::Int = id;
  
  Time(n::Int) when state = NotInShop -> probably(probOfEnteringShop) { 
    //print[Str]('ENTER[' + now + ']: ' + self);
    display <- ChangeState(id,'Browsing');
    state := Browsing;
  }
  Time(n::Int) when state = Browsing  -> probably(probOfSeekingHelp) {
    //print[Str]('SEEK HELP[' + now + ']: ' + self);
    display <- ChangeState(id,'SeekingHelp');
    state := SeekingHelp;
    hMonitor <- NeedsHelp(self);
  } else probably(probOfBuying) {
    //print[Str]('QUEUE[' + now + ']: ' + self);
    display <- ChangeState(id,'Queueing');
    tMonitor <- Queue(self);
    state := Queuing;
  }
  TimeOut -> {
    //print[Str]('LEAVE[' + now + ']: ' + self);
    display <- TimeOut(id);
    display <- ChangeState(id,'NotInShop');
    state := NotInShop;
  }
  Helped -> {
    //print[Str]('HELPED[' + now + ']: ' + self);
    display <- ChangeState(id,'Browsing');
    state := Browsing;
  }
  Leave -> {
    //print[Str]('LEAVE[' + now + ']: ' + self);
    display <- ChangeState(id,'NotInShop');
    state := NotInShop;
  }
  Time(n::Int) -> {}
}

act main::Main {
  -> {
    for n::Int in 0..numOfCustomers do {
      customers :=  (new customer(n)):customers;
      display <- RegisterCustomer(n,'NotInShop',['NotInShop','Queueing','Browsing','SeekingHelp','GettingHelp','Buying']);
    }
    for n::Int in 0..numOfAssistants do {
      assistants := (new assistant):assistants;
    }
  }
  Time(n::Int) when n > numOfSteps -> {
    //print[Str]('Shopped ' + n);
    stopAll();
  }
  Time(n::Int) -> { }
}



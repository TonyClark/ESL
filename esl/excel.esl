export getSheet,getSheetNamed,getColumnNamed,Excel,ExcelCell,ExcelColumn,ExcelError,ExcelRow,ExcelSheet,Main,XBlank,XBool,XDate,XFloat,XFormula,XRow,XSheet,XStr,XUnknown,XWorkbook,readWorkbook,writeWorkbook;

import 
  'esl/displays.esl',
  'esl/lists.esl';

type Main = Act { Time(Int); }

data ExcelCell = 
  // Every cell in an Excel spreadsheet produces a tagged value as shown below...
  XStr(Str) 
| XFloat(Float) 
| XBool(Bool) 
| XDate(Str) 
| XFormula(Str) 
| XBlank 
| XUnknown;

type ExcelColumn = [ExcelCell];
data ExcelRow    = XRow([ExcelCell]);
data ExcelSheet  = XSheet(Str,[ExcelRow]);
data Excel       = 
  // The type of a single Excel workbook...
  XWorkbook([ExcelSheet]) 
| ExcelError(Str);

rowCells(row::ExcelRow)::ExcelColumn =
  case row {
    XRow(cells) -> cells;
  }

getSheet(b::Excel,n::Int)::ExcelSheet =
  case b {
    XWorkbook(sheets) -> nth[ExcelSheet](sheets,n);
  }

getSheetNamed(s::Excel,name::Str)::ExcelSheet =
  let sheetNamed(s::ExcelSheet)::Bool = case s { XSheet(n,rows) when n = name -> true; s -> false; }
  in {
    case s {
      XWorkbook(sheets) -> select1[ExcelSheet](sheets,null[ExcelSheet],sheetNamed);
    }
  }

getColumn(s::ExcelSheet,n::Int)::ExcelColumn =
  case s {
    XSheet(name,rows) -> [ nth[ExcelCell](cells,n) | XRow(cells) <- rows ];
  }

getColumnNamed(s::ExcelSheet,n::Str)::ExcelColumn =
  case s {
    XSheet(name,rows) -> 
      let i::Int = indexOf[ExcelCell](XStr(n),rowCells(head[ExcelRow](rows)));
      in tail[ExcelCell](getColumn(s,i));
  }
  

// readWorkbook is a builtin operation that takes an Excel file and returns a value of type Excel.
readWorkbook::(Str) -> Excel = builtin[(Str) -> Excel]('','readWorkbook',1);    
// writeWorkbook creates an Excel spreadsheet and populated it from the supplied term.
writeWorkbook::(Str,Excel) -> Excel = builtin[(Str,Excel) -> Excel]('','writeWorkbook',1);  

